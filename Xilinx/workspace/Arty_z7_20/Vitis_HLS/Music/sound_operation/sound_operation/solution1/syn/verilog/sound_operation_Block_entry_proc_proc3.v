// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sound_operation_Block_entry_proc_proc3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_ram_AWVALID,
        m_axi_ram_AWREADY,
        m_axi_ram_AWADDR,
        m_axi_ram_AWID,
        m_axi_ram_AWLEN,
        m_axi_ram_AWSIZE,
        m_axi_ram_AWBURST,
        m_axi_ram_AWLOCK,
        m_axi_ram_AWCACHE,
        m_axi_ram_AWPROT,
        m_axi_ram_AWQOS,
        m_axi_ram_AWREGION,
        m_axi_ram_AWUSER,
        m_axi_ram_WVALID,
        m_axi_ram_WREADY,
        m_axi_ram_WDATA,
        m_axi_ram_WSTRB,
        m_axi_ram_WLAST,
        m_axi_ram_WID,
        m_axi_ram_WUSER,
        m_axi_ram_ARVALID,
        m_axi_ram_ARREADY,
        m_axi_ram_ARADDR,
        m_axi_ram_ARID,
        m_axi_ram_ARLEN,
        m_axi_ram_ARSIZE,
        m_axi_ram_ARBURST,
        m_axi_ram_ARLOCK,
        m_axi_ram_ARCACHE,
        m_axi_ram_ARPROT,
        m_axi_ram_ARQOS,
        m_axi_ram_ARREGION,
        m_axi_ram_ARUSER,
        m_axi_ram_RVALID,
        m_axi_ram_RREADY,
        m_axi_ram_RDATA,
        m_axi_ram_RLAST,
        m_axi_ram_RID,
        m_axi_ram_RUSER,
        m_axi_ram_RRESP,
        m_axi_ram_BVALID,
        m_axi_ram_BREADY,
        m_axi_ram_BRESP,
        m_axi_ram_BID,
        m_axi_ram_BUSER,
        ramadr_dout,
        ramadr_empty_n,
        ramadr_read,
        sdata,
        sdata_ap_vld
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_ram_AWVALID;
input   m_axi_ram_AWREADY;
output  [63:0] m_axi_ram_AWADDR;
output  [0:0] m_axi_ram_AWID;
output  [31:0] m_axi_ram_AWLEN;
output  [2:0] m_axi_ram_AWSIZE;
output  [1:0] m_axi_ram_AWBURST;
output  [1:0] m_axi_ram_AWLOCK;
output  [3:0] m_axi_ram_AWCACHE;
output  [2:0] m_axi_ram_AWPROT;
output  [3:0] m_axi_ram_AWQOS;
output  [3:0] m_axi_ram_AWREGION;
output  [0:0] m_axi_ram_AWUSER;
output   m_axi_ram_WVALID;
input   m_axi_ram_WREADY;
output  [31:0] m_axi_ram_WDATA;
output  [3:0] m_axi_ram_WSTRB;
output   m_axi_ram_WLAST;
output  [0:0] m_axi_ram_WID;
output  [0:0] m_axi_ram_WUSER;
output   m_axi_ram_ARVALID;
input   m_axi_ram_ARREADY;
output  [63:0] m_axi_ram_ARADDR;
output  [0:0] m_axi_ram_ARID;
output  [31:0] m_axi_ram_ARLEN;
output  [2:0] m_axi_ram_ARSIZE;
output  [1:0] m_axi_ram_ARBURST;
output  [1:0] m_axi_ram_ARLOCK;
output  [3:0] m_axi_ram_ARCACHE;
output  [2:0] m_axi_ram_ARPROT;
output  [3:0] m_axi_ram_ARQOS;
output  [3:0] m_axi_ram_ARREGION;
output  [0:0] m_axi_ram_ARUSER;
input   m_axi_ram_RVALID;
output   m_axi_ram_RREADY;
input  [31:0] m_axi_ram_RDATA;
input   m_axi_ram_RLAST;
input  [0:0] m_axi_ram_RID;
input  [0:0] m_axi_ram_RUSER;
input  [1:0] m_axi_ram_RRESP;
input   m_axi_ram_BVALID;
output   m_axi_ram_BREADY;
input  [1:0] m_axi_ram_BRESP;
input  [0:0] m_axi_ram_BID;
input  [0:0] m_axi_ram_BUSER;
input  [63:0] ramadr_dout;
input   ramadr_empty_n;
output   ramadr_read;
output  [31:0] sdata;
output   sdata_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_ram_ARVALID;
reg m_axi_ram_RREADY;
reg ramadr_read;
reg[31:0] sdata;
reg sdata_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ram_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    ram_blk_n_R;
wire    ap_CS_fsm_state9;
reg    ramadr_blk_n;
reg   [63:0] ram_addr_reg_90;
wire  signed [63:0] sext_ln324_fu_80_p1;
reg    ap_block_state1;
reg   [31:0] sdata_preg;
wire   [61:0] trunc_ln_fu_70_p4;
reg   [8:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 sdata_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        sdata_preg <= 32'd0;
    end else begin
        if (((m_axi_ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            sdata_preg <= m_axi_ram_RDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ram_addr_reg_90 <= sext_ln324_fu_80_p1;
    end
end

always @ (*) begin
    if (((m_axi_ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ram_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_ram_ARVALID = 1'b1;
    end else begin
        m_axi_ram_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_ram_RREADY = 1'b1;
    end else begin
        m_axi_ram_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ram_blk_n_AR = m_axi_ram_ARREADY;
    end else begin
        ram_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ram_blk_n_R = m_axi_ram_RVALID;
    end else begin
        ram_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ramadr_blk_n = ramadr_empty_n;
    end else begin
        ramadr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ramadr_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ramadr_read = 1'b1;
    end else begin
        ramadr_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        sdata = m_axi_ram_RDATA;
    end else begin
        sdata = sdata_preg;
    end
end

always @ (*) begin
    if (((m_axi_ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        sdata_ap_vld = 1'b1;
    end else begin
        sdata_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ramadr_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_ram_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ramadr_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign m_axi_ram_ARADDR = ram_addr_reg_90;

assign m_axi_ram_ARBURST = 2'd0;

assign m_axi_ram_ARCACHE = 4'd0;

assign m_axi_ram_ARID = 1'd0;

assign m_axi_ram_ARLEN = 32'd1;

assign m_axi_ram_ARLOCK = 2'd0;

assign m_axi_ram_ARPROT = 3'd0;

assign m_axi_ram_ARQOS = 4'd0;

assign m_axi_ram_ARREGION = 4'd0;

assign m_axi_ram_ARSIZE = 3'd0;

assign m_axi_ram_ARUSER = 1'd0;

assign m_axi_ram_AWADDR = 64'd0;

assign m_axi_ram_AWBURST = 2'd0;

assign m_axi_ram_AWCACHE = 4'd0;

assign m_axi_ram_AWID = 1'd0;

assign m_axi_ram_AWLEN = 32'd0;

assign m_axi_ram_AWLOCK = 2'd0;

assign m_axi_ram_AWPROT = 3'd0;

assign m_axi_ram_AWQOS = 4'd0;

assign m_axi_ram_AWREGION = 4'd0;

assign m_axi_ram_AWSIZE = 3'd0;

assign m_axi_ram_AWUSER = 1'd0;

assign m_axi_ram_AWVALID = 1'b0;

assign m_axi_ram_BREADY = 1'b0;

assign m_axi_ram_WDATA = 32'd0;

assign m_axi_ram_WID = 1'd0;

assign m_axi_ram_WLAST = 1'b0;

assign m_axi_ram_WSTRB = 4'd0;

assign m_axi_ram_WUSER = 1'd0;

assign m_axi_ram_WVALID = 1'b0;

assign sext_ln324_fu_80_p1 = $signed(trunc_ln_fu_70_p4);

assign trunc_ln_fu_70_p4 = {{ramadr_dout[63:2]}};

endmodule //sound_operation_Block_entry_proc_proc3
