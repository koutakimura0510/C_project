-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sound_operation is
generic (
    C_M_AXI_RAM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_RAM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RAM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RAM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RAM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RAM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RAM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RAM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_ram_AWVALID : OUT STD_LOGIC;
    m_axi_ram_AWREADY : IN STD_LOGIC;
    m_axi_ram_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_ADDR_WIDTH-1 downto 0);
    m_axi_ram_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_ID_WIDTH-1 downto 0);
    m_axi_ram_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ram_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_AWUSER_WIDTH-1 downto 0);
    m_axi_ram_WVALID : OUT STD_LOGIC;
    m_axi_ram_WREADY : IN STD_LOGIC;
    m_axi_ram_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_DATA_WIDTH-1 downto 0);
    m_axi_ram_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_DATA_WIDTH/8-1 downto 0);
    m_axi_ram_WLAST : OUT STD_LOGIC;
    m_axi_ram_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_ID_WIDTH-1 downto 0);
    m_axi_ram_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_WUSER_WIDTH-1 downto 0);
    m_axi_ram_ARVALID : OUT STD_LOGIC;
    m_axi_ram_ARREADY : IN STD_LOGIC;
    m_axi_ram_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_ADDR_WIDTH-1 downto 0);
    m_axi_ram_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_ID_WIDTH-1 downto 0);
    m_axi_ram_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ram_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RAM_ARUSER_WIDTH-1 downto 0);
    m_axi_ram_RVALID : IN STD_LOGIC;
    m_axi_ram_RREADY : OUT STD_LOGIC;
    m_axi_ram_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RAM_DATA_WIDTH-1 downto 0);
    m_axi_ram_RLAST : IN STD_LOGIC;
    m_axi_ram_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RAM_ID_WIDTH-1 downto 0);
    m_axi_ram_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RAM_RUSER_WIDTH-1 downto 0);
    m_axi_ram_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_BVALID : IN STD_LOGIC;
    m_axi_ram_BREADY : OUT STD_LOGIC;
    m_axi_ram_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RAM_ID_WIDTH-1 downto 0);
    m_axi_ram_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RAM_BUSER_WIDTH-1 downto 0);
    sdata : IN STD_LOGIC_VECTOR (31 downto 0);
    opeout : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of sound_operation is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sound_operation_sound_operation,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=182,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_RAM_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_RAM_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_RAM_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ramadr : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component sound_operation_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ramadr : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    control_s_axi_U : component sound_operation_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ramadr => ramadr);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    m_axi_ram_ARADDR <= ap_const_lv64_0;
    m_axi_ram_ARBURST <= ap_const_lv2_0;
    m_axi_ram_ARCACHE <= ap_const_lv4_0;
    m_axi_ram_ARID <= ap_const_lv1_0;
    m_axi_ram_ARLEN <= ap_const_lv8_0;
    m_axi_ram_ARLOCK <= ap_const_lv2_0;
    m_axi_ram_ARPROT <= ap_const_lv3_0;
    m_axi_ram_ARQOS <= ap_const_lv4_0;
    m_axi_ram_ARREGION <= ap_const_lv4_0;
    m_axi_ram_ARSIZE <= ap_const_lv3_0;
    m_axi_ram_ARUSER <= ap_const_lv1_0;
    m_axi_ram_ARVALID <= ap_const_logic_0;
    m_axi_ram_AWADDR <= ap_const_lv64_0;
    m_axi_ram_AWBURST <= ap_const_lv2_0;
    m_axi_ram_AWCACHE <= ap_const_lv4_0;
    m_axi_ram_AWID <= ap_const_lv1_0;
    m_axi_ram_AWLEN <= ap_const_lv8_0;
    m_axi_ram_AWLOCK <= ap_const_lv2_0;
    m_axi_ram_AWPROT <= ap_const_lv3_0;
    m_axi_ram_AWQOS <= ap_const_lv4_0;
    m_axi_ram_AWREGION <= ap_const_lv4_0;
    m_axi_ram_AWSIZE <= ap_const_lv3_0;
    m_axi_ram_AWUSER <= ap_const_lv1_0;
    m_axi_ram_AWVALID <= ap_const_logic_0;
    m_axi_ram_BREADY <= ap_const_logic_0;
    m_axi_ram_RREADY <= ap_const_logic_0;
    m_axi_ram_WDATA <= ap_const_lv32_0;
    m_axi_ram_WID <= ap_const_lv1_0;
    m_axi_ram_WLAST <= ap_const_logic_0;
    m_axi_ram_WSTRB <= ap_const_lv4_0;
    m_axi_ram_WUSER <= ap_const_lv1_0;
    m_axi_ram_WVALID <= ap_const_logic_0;
end behav;
