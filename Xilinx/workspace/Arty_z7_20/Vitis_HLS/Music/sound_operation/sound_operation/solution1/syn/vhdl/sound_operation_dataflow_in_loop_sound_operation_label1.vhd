-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sound_operation_dataflow_in_loop_sound_operation_label1 is
port (
    opeout : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_AWVALID : OUT STD_LOGIC;
    m_axi_ram_AWREADY : IN STD_LOGIC;
    m_axi_ram_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_ram_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_WVALID : OUT STD_LOGIC;
    m_axi_ram_WREADY : IN STD_LOGIC;
    m_axi_ram_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_WLAST : OUT STD_LOGIC;
    m_axi_ram_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_ARVALID : OUT STD_LOGIC;
    m_axi_ram_ARREADY : IN STD_LOGIC;
    m_axi_ram_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_ram_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_RVALID : IN STD_LOGIC;
    m_axi_ram_RREADY : OUT STD_LOGIC;
    m_axi_ram_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_RLAST : IN STD_LOGIC;
    m_axi_ram_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_BVALID : IN STD_LOGIC;
    m_axi_ram_BREADY : OUT STD_LOGIC;
    m_axi_ram_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ramadr : IN STD_LOGIC_VECTOR (63 downto 0);
    sdata : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ramadr_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    opeout_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    sdata_ap_vld : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of sound_operation_dataflow_in_loop_sound_operation_label1 is 
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_start_out : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_start_write : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_ramadr_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_sound_operation_label1_entry3_U0_ramadr_out_write : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_read : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_out_write : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry_proc_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry_proc_proc_U0_opeout : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_proc_proc_U0_opeout_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_ap_start : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_ap_done : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_ap_continue : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_ap_idle : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_ap_ready : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWVALID : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_WVALID : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_m_axi_ram_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_WLAST : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_m_axi_ram_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARVALID : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_proc_proc3_U0_m_axi_ram_RREADY : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_m_axi_ram_BREADY : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_ramadr_read : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_sdata : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_proc_proc3_U0_sdata_ap_vld : STD_LOGIC;
    signal ramadr_c1_full_n : STD_LOGIC;
    signal ramadr_c1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ramadr_c1_empty_n : STD_LOGIC;
    signal ramadr_c_full_n : STD_LOGIC;
    signal ramadr_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ramadr_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Block_entry_proc_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_entry_proc_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Block_entry_proc_proc3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_entry_proc_proc3_U0_ap_ready : STD_LOGIC;
    signal start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_full_n : STD_LOGIC;
    signal start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_empty_n : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_sound_operation_label1_entry4_U0_start_write : STD_LOGIC;
    signal Block_entry_proc_proc_U0_start_full_n : STD_LOGIC;
    signal Block_entry_proc_proc_U0_start_write : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_start_full_n : STD_LOGIC;
    signal Block_entry_proc_proc3_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sound_operation_dataflow_in_loop_sound_operation_label1_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ramadr : IN STD_LOGIC_VECTOR (63 downto 0);
        ramadr_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ramadr_out_full_n : IN STD_LOGIC;
        ramadr_out_write : OUT STD_LOGIC );
    end component;


    component sound_operation_dataflow_in_loop_sound_operation_label1_entry4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ramadr_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ramadr_empty_n : IN STD_LOGIC;
        ramadr_read : OUT STD_LOGIC;
        ramadr_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ramadr_out_full_n : IN STD_LOGIC;
        ramadr_out_write : OUT STD_LOGIC );
    end component;


    component sound_operation_Block_entry_proc_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        opeout : OUT STD_LOGIC_VECTOR (31 downto 0);
        opeout_ap_vld : OUT STD_LOGIC );
    end component;


    component sound_operation_Block_entry_proc_proc3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_ram_AWVALID : OUT STD_LOGIC;
        m_axi_ram_AWREADY : IN STD_LOGIC;
        m_axi_ram_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ram_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ram_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ram_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ram_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ram_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ram_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ram_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ram_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ram_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_WVALID : OUT STD_LOGIC;
        m_axi_ram_WREADY : IN STD_LOGIC;
        m_axi_ram_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ram_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ram_WLAST : OUT STD_LOGIC;
        m_axi_ram_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_ARVALID : OUT STD_LOGIC;
        m_axi_ram_ARREADY : IN STD_LOGIC;
        m_axi_ram_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ram_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ram_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ram_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ram_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ram_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ram_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ram_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ram_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ram_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_RVALID : IN STD_LOGIC;
        m_axi_ram_RREADY : OUT STD_LOGIC;
        m_axi_ram_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ram_RLAST : IN STD_LOGIC;
        m_axi_ram_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ram_BVALID : IN STD_LOGIC;
        m_axi_ram_BREADY : OUT STD_LOGIC;
        m_axi_ram_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ram_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ram_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ramadr_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ramadr_empty_n : IN STD_LOGIC;
        ramadr_read : OUT STD_LOGIC;
        sdata : OUT STD_LOGIC_VECTOR (31 downto 0);
        sdata_ap_vld : OUT STD_LOGIC );
    end component;


    component sound_operation_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sound_operation_start_for_dataflow_in_loop_sound_operation_label1_entry4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_sound_operation_label1_entry3_U0 : component sound_operation_dataflow_in_loop_sound_operation_label1_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_sound_operation_label1_entry3_U0_ap_start,
        start_full_n => start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_full_n,
        ap_done => dataflow_in_loop_sound_operation_label1_entry3_U0_ap_done,
        ap_continue => dataflow_in_loop_sound_operation_label1_entry3_U0_ap_continue,
        ap_idle => dataflow_in_loop_sound_operation_label1_entry3_U0_ap_idle,
        ap_ready => dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready,
        start_out => dataflow_in_loop_sound_operation_label1_entry3_U0_start_out,
        start_write => dataflow_in_loop_sound_operation_label1_entry3_U0_start_write,
        ramadr => ramadr,
        ramadr_out_din => dataflow_in_loop_sound_operation_label1_entry3_U0_ramadr_out_din,
        ramadr_out_full_n => ramadr_c1_full_n,
        ramadr_out_write => dataflow_in_loop_sound_operation_label1_entry3_U0_ramadr_out_write);

    dataflow_in_loop_sound_operation_label1_entry4_U0 : component sound_operation_dataflow_in_loop_sound_operation_label1_entry4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_sound_operation_label1_entry4_U0_ap_start,
        ap_done => dataflow_in_loop_sound_operation_label1_entry4_U0_ap_done,
        ap_continue => dataflow_in_loop_sound_operation_label1_entry4_U0_ap_continue,
        ap_idle => dataflow_in_loop_sound_operation_label1_entry4_U0_ap_idle,
        ap_ready => dataflow_in_loop_sound_operation_label1_entry4_U0_ap_ready,
        ramadr_dout => ramadr_c1_dout,
        ramadr_empty_n => ramadr_c1_empty_n,
        ramadr_read => dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_read,
        ramadr_out_din => dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_out_din,
        ramadr_out_full_n => ramadr_c_full_n,
        ramadr_out_write => dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_out_write);

    Block_entry_proc_proc_U0 : component sound_operation_Block_entry_proc_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry_proc_proc_U0_ap_start,
        ap_done => Block_entry_proc_proc_U0_ap_done,
        ap_continue => Block_entry_proc_proc_U0_ap_continue,
        ap_idle => Block_entry_proc_proc_U0_ap_idle,
        ap_ready => Block_entry_proc_proc_U0_ap_ready,
        opeout => Block_entry_proc_proc_U0_opeout,
        opeout_ap_vld => Block_entry_proc_proc_U0_opeout_ap_vld);

    Block_entry_proc_proc3_U0 : component sound_operation_Block_entry_proc_proc3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry_proc_proc3_U0_ap_start,
        ap_done => Block_entry_proc_proc3_U0_ap_done,
        ap_continue => Block_entry_proc_proc3_U0_ap_continue,
        ap_idle => Block_entry_proc_proc3_U0_ap_idle,
        ap_ready => Block_entry_proc_proc3_U0_ap_ready,
        m_axi_ram_AWVALID => Block_entry_proc_proc3_U0_m_axi_ram_AWVALID,
        m_axi_ram_AWREADY => ap_const_logic_0,
        m_axi_ram_AWADDR => Block_entry_proc_proc3_U0_m_axi_ram_AWADDR,
        m_axi_ram_AWID => Block_entry_proc_proc3_U0_m_axi_ram_AWID,
        m_axi_ram_AWLEN => Block_entry_proc_proc3_U0_m_axi_ram_AWLEN,
        m_axi_ram_AWSIZE => Block_entry_proc_proc3_U0_m_axi_ram_AWSIZE,
        m_axi_ram_AWBURST => Block_entry_proc_proc3_U0_m_axi_ram_AWBURST,
        m_axi_ram_AWLOCK => Block_entry_proc_proc3_U0_m_axi_ram_AWLOCK,
        m_axi_ram_AWCACHE => Block_entry_proc_proc3_U0_m_axi_ram_AWCACHE,
        m_axi_ram_AWPROT => Block_entry_proc_proc3_U0_m_axi_ram_AWPROT,
        m_axi_ram_AWQOS => Block_entry_proc_proc3_U0_m_axi_ram_AWQOS,
        m_axi_ram_AWREGION => Block_entry_proc_proc3_U0_m_axi_ram_AWREGION,
        m_axi_ram_AWUSER => Block_entry_proc_proc3_U0_m_axi_ram_AWUSER,
        m_axi_ram_WVALID => Block_entry_proc_proc3_U0_m_axi_ram_WVALID,
        m_axi_ram_WREADY => ap_const_logic_0,
        m_axi_ram_WDATA => Block_entry_proc_proc3_U0_m_axi_ram_WDATA,
        m_axi_ram_WSTRB => Block_entry_proc_proc3_U0_m_axi_ram_WSTRB,
        m_axi_ram_WLAST => Block_entry_proc_proc3_U0_m_axi_ram_WLAST,
        m_axi_ram_WID => Block_entry_proc_proc3_U0_m_axi_ram_WID,
        m_axi_ram_WUSER => Block_entry_proc_proc3_U0_m_axi_ram_WUSER,
        m_axi_ram_ARVALID => Block_entry_proc_proc3_U0_m_axi_ram_ARVALID,
        m_axi_ram_ARREADY => m_axi_ram_ARREADY,
        m_axi_ram_ARADDR => Block_entry_proc_proc3_U0_m_axi_ram_ARADDR,
        m_axi_ram_ARID => Block_entry_proc_proc3_U0_m_axi_ram_ARID,
        m_axi_ram_ARLEN => Block_entry_proc_proc3_U0_m_axi_ram_ARLEN,
        m_axi_ram_ARSIZE => Block_entry_proc_proc3_U0_m_axi_ram_ARSIZE,
        m_axi_ram_ARBURST => Block_entry_proc_proc3_U0_m_axi_ram_ARBURST,
        m_axi_ram_ARLOCK => Block_entry_proc_proc3_U0_m_axi_ram_ARLOCK,
        m_axi_ram_ARCACHE => Block_entry_proc_proc3_U0_m_axi_ram_ARCACHE,
        m_axi_ram_ARPROT => Block_entry_proc_proc3_U0_m_axi_ram_ARPROT,
        m_axi_ram_ARQOS => Block_entry_proc_proc3_U0_m_axi_ram_ARQOS,
        m_axi_ram_ARREGION => Block_entry_proc_proc3_U0_m_axi_ram_ARREGION,
        m_axi_ram_ARUSER => Block_entry_proc_proc3_U0_m_axi_ram_ARUSER,
        m_axi_ram_RVALID => m_axi_ram_RVALID,
        m_axi_ram_RREADY => Block_entry_proc_proc3_U0_m_axi_ram_RREADY,
        m_axi_ram_RDATA => m_axi_ram_RDATA,
        m_axi_ram_RLAST => m_axi_ram_RLAST,
        m_axi_ram_RID => m_axi_ram_RID,
        m_axi_ram_RUSER => m_axi_ram_RUSER,
        m_axi_ram_RRESP => m_axi_ram_RRESP,
        m_axi_ram_BVALID => ap_const_logic_0,
        m_axi_ram_BREADY => Block_entry_proc_proc3_U0_m_axi_ram_BREADY,
        m_axi_ram_BRESP => ap_const_lv2_0,
        m_axi_ram_BID => ap_const_lv1_0,
        m_axi_ram_BUSER => ap_const_lv1_0,
        ramadr_dout => ramadr_c_dout,
        ramadr_empty_n => ramadr_c_empty_n,
        ramadr_read => Block_entry_proc_proc3_U0_ramadr_read,
        sdata => Block_entry_proc_proc3_U0_sdata,
        sdata_ap_vld => Block_entry_proc_proc3_U0_sdata_ap_vld);

    ramadr_c1_U : component sound_operation_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_sound_operation_label1_entry3_U0_ramadr_out_din,
        if_full_n => ramadr_c1_full_n,
        if_write => dataflow_in_loop_sound_operation_label1_entry3_U0_ramadr_out_write,
        if_dout => ramadr_c1_dout,
        if_empty_n => ramadr_c1_empty_n,
        if_read => dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_read);

    ramadr_c_U : component sound_operation_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_out_din,
        if_full_n => ramadr_c_full_n,
        if_write => dataflow_in_loop_sound_operation_label1_entry4_U0_ramadr_out_write,
        if_dout => ramadr_c_dout,
        if_empty_n => ramadr_c_empty_n,
        if_read => Block_entry_proc_proc3_U0_ramadr_read);

    start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_U : component sound_operation_start_for_dataflow_in_loop_sound_operation_label1_entry4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_din,
        if_full_n => start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_full_n,
        if_write => dataflow_in_loop_sound_operation_label1_entry3_U0_start_write,
        if_dout => start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_dout,
        if_empty_n => start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_empty_n,
        if_read => dataflow_in_loop_sound_operation_label1_entry4_U0_ap_ready);





    ap_sync_reg_Block_entry_proc_proc3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_entry_proc_proc3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_entry_proc_proc3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_entry_proc_proc3_U0_ap_ready <= ap_sync_Block_entry_proc_proc3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_entry_proc_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_entry_proc_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_entry_proc_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_entry_proc_proc_U0_ap_ready <= ap_sync_Block_entry_proc_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready <= ap_sync_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_entry_proc_proc3_U0_ap_continue <= ap_sync_continue;
    Block_entry_proc_proc3_U0_ap_start <= ((ap_sync_reg_Block_entry_proc_proc3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_entry_proc_proc3_U0_start_full_n <= ap_const_logic_1;
    Block_entry_proc_proc3_U0_start_write <= ap_const_logic_0;
    Block_entry_proc_proc_U0_ap_continue <= ap_sync_continue;
    Block_entry_proc_proc_U0_ap_start <= ((ap_sync_reg_Block_entry_proc_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_entry_proc_proc_U0_start_full_n <= ap_const_logic_1;
    Block_entry_proc_proc_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (dataflow_in_loop_sound_operation_label1_entry4_U0_ap_idle and dataflow_in_loop_sound_operation_label1_entry3_U0_ap_idle and Block_entry_proc_proc_U0_ap_idle and Block_entry_proc_proc3_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Block_entry_proc_proc3_U0_ap_ready <= (ap_sync_reg_Block_entry_proc_proc3_U0_ap_ready or Block_entry_proc_proc3_U0_ap_ready);
    ap_sync_Block_entry_proc_proc_U0_ap_ready <= (ap_sync_reg_Block_entry_proc_proc_U0_ap_ready or Block_entry_proc_proc_U0_ap_ready);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready <= (dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready or ap_sync_reg_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready);
    ap_sync_done <= (Block_entry_proc_proc_U0_ap_done and Block_entry_proc_proc3_U0_ap_done);
    ap_sync_ready <= (ap_sync_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready and ap_sync_Block_entry_proc_proc_U0_ap_ready and ap_sync_Block_entry_proc_proc3_U0_ap_ready);
    dataflow_in_loop_sound_operation_label1_entry3_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_sound_operation_label1_entry3_U0_ap_start <= ((ap_sync_reg_dataflow_in_loop_sound_operation_label1_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    dataflow_in_loop_sound_operation_label1_entry4_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_sound_operation_label1_entry4_U0_ap_start <= start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_empty_n;
    dataflow_in_loop_sound_operation_label1_entry4_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_sound_operation_label1_entry4_U0_start_write <= ap_const_logic_0;
    m_axi_ram_ARADDR <= Block_entry_proc_proc3_U0_m_axi_ram_ARADDR;
    m_axi_ram_ARBURST <= Block_entry_proc_proc3_U0_m_axi_ram_ARBURST;
    m_axi_ram_ARCACHE <= Block_entry_proc_proc3_U0_m_axi_ram_ARCACHE;
    m_axi_ram_ARID <= Block_entry_proc_proc3_U0_m_axi_ram_ARID;
    m_axi_ram_ARLEN <= Block_entry_proc_proc3_U0_m_axi_ram_ARLEN;
    m_axi_ram_ARLOCK <= Block_entry_proc_proc3_U0_m_axi_ram_ARLOCK;
    m_axi_ram_ARPROT <= Block_entry_proc_proc3_U0_m_axi_ram_ARPROT;
    m_axi_ram_ARQOS <= Block_entry_proc_proc3_U0_m_axi_ram_ARQOS;
    m_axi_ram_ARREGION <= Block_entry_proc_proc3_U0_m_axi_ram_ARREGION;
    m_axi_ram_ARSIZE <= Block_entry_proc_proc3_U0_m_axi_ram_ARSIZE;
    m_axi_ram_ARUSER <= Block_entry_proc_proc3_U0_m_axi_ram_ARUSER;
    m_axi_ram_ARVALID <= Block_entry_proc_proc3_U0_m_axi_ram_ARVALID;
    m_axi_ram_AWADDR <= ap_const_lv64_0;
    m_axi_ram_AWBURST <= ap_const_lv2_0;
    m_axi_ram_AWCACHE <= ap_const_lv4_0;
    m_axi_ram_AWID <= ap_const_lv1_0;
    m_axi_ram_AWLEN <= ap_const_lv32_0;
    m_axi_ram_AWLOCK <= ap_const_lv2_0;
    m_axi_ram_AWPROT <= ap_const_lv3_0;
    m_axi_ram_AWQOS <= ap_const_lv4_0;
    m_axi_ram_AWREGION <= ap_const_lv4_0;
    m_axi_ram_AWSIZE <= ap_const_lv3_0;
    m_axi_ram_AWUSER <= ap_const_lv1_0;
    m_axi_ram_AWVALID <= ap_const_logic_0;
    m_axi_ram_BREADY <= ap_const_logic_0;
    m_axi_ram_RREADY <= Block_entry_proc_proc3_U0_m_axi_ram_RREADY;
    m_axi_ram_WDATA <= ap_const_lv32_0;
    m_axi_ram_WID <= ap_const_lv1_0;
    m_axi_ram_WLAST <= ap_const_logic_0;
    m_axi_ram_WSTRB <= ap_const_lv4_0;
    m_axi_ram_WUSER <= ap_const_lv1_0;
    m_axi_ram_WVALID <= ap_const_logic_0;
    opeout <= Block_entry_proc_proc_U0_opeout;
    opeout_ap_vld <= Block_entry_proc_proc_U0_opeout_ap_vld;
    sdata <= Block_entry_proc_proc3_U0_sdata;
    sdata_ap_vld <= Block_entry_proc_proc3_U0_sdata_ap_vld;
    start_for_dataflow_in_loop_sound_operation_label1_entry4_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
