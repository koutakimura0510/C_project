-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mapchip_png is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_SRC_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_SRC_ID_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_SRC_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DST_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DST_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DST_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_USER_VALUE : INTEGER := 0;
    C_M_AXI_SRC_PROT_VALUE : INTEGER := 0;
    C_M_AXI_SRC_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DST_USER_VALUE : INTEGER := 0;
    C_M_AXI_DST_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DST_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_src_AWVALID : OUT STD_LOGIC;
    m_axi_src_AWREADY : IN STD_LOGIC;
    m_axi_src_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ADDR_WIDTH-1 downto 0);
    m_axi_src_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_src_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_AWUSER_WIDTH-1 downto 0);
    m_axi_src_WVALID : OUT STD_LOGIC;
    m_axi_src_WREADY : IN STD_LOGIC;
    m_axi_src_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_DATA_WIDTH-1 downto 0);
    m_axi_src_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_DATA_WIDTH/8-1 downto 0);
    m_axi_src_WLAST : OUT STD_LOGIC;
    m_axi_src_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_WUSER_WIDTH-1 downto 0);
    m_axi_src_ARVALID : OUT STD_LOGIC;
    m_axi_src_ARREADY : IN STD_LOGIC;
    m_axi_src_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ADDR_WIDTH-1 downto 0);
    m_axi_src_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_src_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ARUSER_WIDTH-1 downto 0);
    m_axi_src_RVALID : IN STD_LOGIC;
    m_axi_src_RREADY : OUT STD_LOGIC;
    m_axi_src_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_DATA_WIDTH-1 downto 0);
    m_axi_src_RLAST : IN STD_LOGIC;
    m_axi_src_RID : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_RUSER_WIDTH-1 downto 0);
    m_axi_src_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BVALID : IN STD_LOGIC;
    m_axi_src_BREADY : OUT STD_LOGIC;
    m_axi_src_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BID : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_BUSER_WIDTH-1 downto 0);
    m_axi_dst_AWVALID : OUT STD_LOGIC;
    m_axi_dst_AWREADY : IN STD_LOGIC;
    m_axi_dst_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ADDR_WIDTH-1 downto 0);
    m_axi_dst_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dst_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_AWUSER_WIDTH-1 downto 0);
    m_axi_dst_WVALID : OUT STD_LOGIC;
    m_axi_dst_WREADY : IN STD_LOGIC;
    m_axi_dst_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_DATA_WIDTH-1 downto 0);
    m_axi_dst_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_DATA_WIDTH/8-1 downto 0);
    m_axi_dst_WLAST : OUT STD_LOGIC;
    m_axi_dst_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_WUSER_WIDTH-1 downto 0);
    m_axi_dst_ARVALID : OUT STD_LOGIC;
    m_axi_dst_ARREADY : IN STD_LOGIC;
    m_axi_dst_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ADDR_WIDTH-1 downto 0);
    m_axi_dst_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dst_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ARUSER_WIDTH-1 downto 0);
    m_axi_dst_RVALID : IN STD_LOGIC;
    m_axi_dst_RREADY : OUT STD_LOGIC;
    m_axi_dst_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DST_DATA_WIDTH-1 downto 0);
    m_axi_dst_RLAST : IN STD_LOGIC;
    m_axi_dst_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DST_RUSER_WIDTH-1 downto 0);
    m_axi_dst_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_BVALID : IN STD_LOGIC;
    m_axi_dst_BREADY : OUT STD_LOGIC;
    m_axi_dst_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DST_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of mapchip_png is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mapchip_png_mapchip_png,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=62900,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=6423,HLS_SYN_LUT=5353,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal srcin : STD_LOGIC_VECTOR (63 downto 0);
    signal dstin : STD_LOGIC_VECTOR (63 downto 0);
    signal dstout : STD_LOGIC_VECTOR (63 downto 0);
    signal mapchip_maxwidth : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_maxheight : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_draw_xsize : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_draw_ysize : STD_LOGIC_VECTOR (31 downto 0);
    signal xstart_pos : STD_LOGIC_VECTOR (31 downto 0);
    signal ystart_pos : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_size : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha : STD_LOGIC_VECTOR (7 downto 0);
    signal id : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal src_AWREADY : STD_LOGIC;
    signal src_WREADY : STD_LOGIC;
    signal src_ARREADY : STD_LOGIC;
    signal src_RVALID : STD_LOGIC;
    signal src_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal src_RLAST : STD_LOGIC;
    signal src_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal src_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal src_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal src_BVALID : STD_LOGIC;
    signal src_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal src_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal src_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_AWREADY : STD_LOGIC;
    signal dst_WREADY : STD_LOGIC;
    signal dst_ARREADY : STD_LOGIC;
    signal dst_RVALID : STD_LOGIC;
    signal dst_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_RLAST : STD_LOGIC;
    signal dst_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal dst_BVALID : STD_LOGIC;
    signal dst_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal dst_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_WVALID : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_src_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_WLAST : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_src_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_src_RREADY : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_src_BREADY : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_WVALID : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_WLAST : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_RREADY : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_m_axi_dst_BREADY : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_height_loop_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_height_loop_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mapchip_png_dataflow_in_loop_height_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        mapchip_draw_xsize : IN STD_LOGIC_VECTOR (31 downto 0);
        id : IN STD_LOGIC_VECTOR (31 downto 0);
        mapchip_maxheight : IN STD_LOGIC_VECTOR (31 downto 0);
        ystart_pos : IN STD_LOGIC_VECTOR (31 downto 0);
        mapchip_maxwidth : IN STD_LOGIC_VECTOR (31 downto 0);
        xstart_pos : IN STD_LOGIC_VECTOR (31 downto 0);
        y : IN STD_LOGIC_VECTOR (31 downto 0);
        srcin : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_src_AWVALID : OUT STD_LOGIC;
        m_axi_src_AWREADY : IN STD_LOGIC;
        m_axi_src_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_src_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_src_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_src_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_src_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_WVALID : OUT STD_LOGIC;
        m_axi_src_WREADY : IN STD_LOGIC;
        m_axi_src_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_src_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_WLAST : OUT STD_LOGIC;
        m_axi_src_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_ARVALID : OUT STD_LOGIC;
        m_axi_src_ARREADY : IN STD_LOGIC;
        m_axi_src_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_src_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_src_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_src_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_src_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_RVALID : IN STD_LOGIC;
        m_axi_src_RREADY : OUT STD_LOGIC;
        m_axi_src_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_src_RLAST : IN STD_LOGIC;
        m_axi_src_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_BVALID : IN STD_LOGIC;
        m_axi_src_BREADY : OUT STD_LOGIC;
        m_axi_src_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        frame_size : IN STD_LOGIC_VECTOR (31 downto 0);
        dstin : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_dst_AWVALID : OUT STD_LOGIC;
        m_axi_dst_AWREADY : IN STD_LOGIC;
        m_axi_dst_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_dst_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dst_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dst_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dst_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_WVALID : OUT STD_LOGIC;
        m_axi_dst_WREADY : IN STD_LOGIC;
        m_axi_dst_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dst_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_WLAST : OUT STD_LOGIC;
        m_axi_dst_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_ARVALID : OUT STD_LOGIC;
        m_axi_dst_ARREADY : IN STD_LOGIC;
        m_axi_dst_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_dst_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dst_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dst_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dst_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_RVALID : IN STD_LOGIC;
        m_axi_dst_RREADY : OUT STD_LOGIC;
        m_axi_dst_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dst_RLAST : IN STD_LOGIC;
        m_axi_dst_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_BVALID : IN STD_LOGIC;
        m_axi_dst_BREADY : OUT STD_LOGIC;
        m_axi_dst_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        alpha : IN STD_LOGIC_VECTOR (7 downto 0);
        dstout : IN STD_LOGIC_VECTOR (63 downto 0);
        mapchip_draw_xsize_ap_vld : IN STD_LOGIC;
        id_ap_vld : IN STD_LOGIC;
        mapchip_maxheight_ap_vld : IN STD_LOGIC;
        ystart_pos_ap_vld : IN STD_LOGIC;
        mapchip_maxwidth_ap_vld : IN STD_LOGIC;
        xstart_pos_ap_vld : IN STD_LOGIC;
        y_ap_vld : IN STD_LOGIC;
        srcin_ap_vld : IN STD_LOGIC;
        frame_size_ap_vld : IN STD_LOGIC;
        dstin_ap_vld : IN STD_LOGIC;
        alpha_ap_vld : IN STD_LOGIC;
        dstout_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component mapchip_png_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        srcin : OUT STD_LOGIC_VECTOR (63 downto 0);
        dstin : OUT STD_LOGIC_VECTOR (63 downto 0);
        dstout : OUT STD_LOGIC_VECTOR (63 downto 0);
        mapchip_maxwidth : OUT STD_LOGIC_VECTOR (31 downto 0);
        mapchip_maxheight : OUT STD_LOGIC_VECTOR (31 downto 0);
        mapchip_draw_xsize : OUT STD_LOGIC_VECTOR (31 downto 0);
        mapchip_draw_ysize : OUT STD_LOGIC_VECTOR (31 downto 0);
        xstart_pos : OUT STD_LOGIC_VECTOR (31 downto 0);
        ystart_pos : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        alpha : OUT STD_LOGIC_VECTOR (7 downto 0);
        id : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component mapchip_png_src_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mapchip_png_dst_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component mapchip_png_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        srcin => srcin,
        dstin => dstin,
        dstout => dstout,
        mapchip_maxwidth => mapchip_maxwidth,
        mapchip_maxheight => mapchip_maxheight,
        mapchip_draw_xsize => mapchip_draw_xsize,
        mapchip_draw_ysize => mapchip_draw_ysize,
        xstart_pos => xstart_pos,
        ystart_pos => ystart_pos,
        frame_size => frame_size,
        alpha => alpha,
        id => id,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    src_m_axi_U : component mapchip_png_src_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_SRC_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_SRC_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_SRC_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_SRC_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_SRC_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_SRC_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_SRC_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_SRC_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_SRC_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_SRC_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_SRC_CACHE_VALUE)
    port map (
        AWVALID => m_axi_src_AWVALID,
        AWREADY => m_axi_src_AWREADY,
        AWADDR => m_axi_src_AWADDR,
        AWID => m_axi_src_AWID,
        AWLEN => m_axi_src_AWLEN,
        AWSIZE => m_axi_src_AWSIZE,
        AWBURST => m_axi_src_AWBURST,
        AWLOCK => m_axi_src_AWLOCK,
        AWCACHE => m_axi_src_AWCACHE,
        AWPROT => m_axi_src_AWPROT,
        AWQOS => m_axi_src_AWQOS,
        AWREGION => m_axi_src_AWREGION,
        AWUSER => m_axi_src_AWUSER,
        WVALID => m_axi_src_WVALID,
        WREADY => m_axi_src_WREADY,
        WDATA => m_axi_src_WDATA,
        WSTRB => m_axi_src_WSTRB,
        WLAST => m_axi_src_WLAST,
        WID => m_axi_src_WID,
        WUSER => m_axi_src_WUSER,
        ARVALID => m_axi_src_ARVALID,
        ARREADY => m_axi_src_ARREADY,
        ARADDR => m_axi_src_ARADDR,
        ARID => m_axi_src_ARID,
        ARLEN => m_axi_src_ARLEN,
        ARSIZE => m_axi_src_ARSIZE,
        ARBURST => m_axi_src_ARBURST,
        ARLOCK => m_axi_src_ARLOCK,
        ARCACHE => m_axi_src_ARCACHE,
        ARPROT => m_axi_src_ARPROT,
        ARQOS => m_axi_src_ARQOS,
        ARREGION => m_axi_src_ARREGION,
        ARUSER => m_axi_src_ARUSER,
        RVALID => m_axi_src_RVALID,
        RREADY => m_axi_src_RREADY,
        RDATA => m_axi_src_RDATA,
        RLAST => m_axi_src_RLAST,
        RID => m_axi_src_RID,
        RUSER => m_axi_src_RUSER,
        RRESP => m_axi_src_RRESP,
        BVALID => m_axi_src_BVALID,
        BREADY => m_axi_src_BREADY,
        BRESP => m_axi_src_BRESP,
        BID => m_axi_src_BID,
        BUSER => m_axi_src_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => dataflow_in_loop_height_loop_U0_m_axi_src_ARVALID,
        I_ARREADY => src_ARREADY,
        I_ARADDR => dataflow_in_loop_height_loop_U0_m_axi_src_ARADDR,
        I_ARID => dataflow_in_loop_height_loop_U0_m_axi_src_ARID,
        I_ARLEN => dataflow_in_loop_height_loop_U0_m_axi_src_ARLEN,
        I_ARSIZE => dataflow_in_loop_height_loop_U0_m_axi_src_ARSIZE,
        I_ARLOCK => dataflow_in_loop_height_loop_U0_m_axi_src_ARLOCK,
        I_ARCACHE => dataflow_in_loop_height_loop_U0_m_axi_src_ARCACHE,
        I_ARQOS => dataflow_in_loop_height_loop_U0_m_axi_src_ARQOS,
        I_ARPROT => dataflow_in_loop_height_loop_U0_m_axi_src_ARPROT,
        I_ARUSER => dataflow_in_loop_height_loop_U0_m_axi_src_ARUSER,
        I_ARBURST => dataflow_in_loop_height_loop_U0_m_axi_src_ARBURST,
        I_ARREGION => dataflow_in_loop_height_loop_U0_m_axi_src_ARREGION,
        I_RVALID => src_RVALID,
        I_RREADY => dataflow_in_loop_height_loop_U0_m_axi_src_RREADY,
        I_RDATA => src_RDATA,
        I_RID => src_RID,
        I_RUSER => src_RUSER,
        I_RRESP => src_RRESP,
        I_RLAST => src_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => src_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => src_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => src_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => src_BRESP,
        I_BID => src_BID,
        I_BUSER => src_BUSER);

    dst_m_axi_U : component mapchip_png_dst_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_DST_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DST_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DST_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DST_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DST_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DST_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DST_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DST_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DST_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DST_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DST_CACHE_VALUE)
    port map (
        AWVALID => m_axi_dst_AWVALID,
        AWREADY => m_axi_dst_AWREADY,
        AWADDR => m_axi_dst_AWADDR,
        AWID => m_axi_dst_AWID,
        AWLEN => m_axi_dst_AWLEN,
        AWSIZE => m_axi_dst_AWSIZE,
        AWBURST => m_axi_dst_AWBURST,
        AWLOCK => m_axi_dst_AWLOCK,
        AWCACHE => m_axi_dst_AWCACHE,
        AWPROT => m_axi_dst_AWPROT,
        AWQOS => m_axi_dst_AWQOS,
        AWREGION => m_axi_dst_AWREGION,
        AWUSER => m_axi_dst_AWUSER,
        WVALID => m_axi_dst_WVALID,
        WREADY => m_axi_dst_WREADY,
        WDATA => m_axi_dst_WDATA,
        WSTRB => m_axi_dst_WSTRB,
        WLAST => m_axi_dst_WLAST,
        WID => m_axi_dst_WID,
        WUSER => m_axi_dst_WUSER,
        ARVALID => m_axi_dst_ARVALID,
        ARREADY => m_axi_dst_ARREADY,
        ARADDR => m_axi_dst_ARADDR,
        ARID => m_axi_dst_ARID,
        ARLEN => m_axi_dst_ARLEN,
        ARSIZE => m_axi_dst_ARSIZE,
        ARBURST => m_axi_dst_ARBURST,
        ARLOCK => m_axi_dst_ARLOCK,
        ARCACHE => m_axi_dst_ARCACHE,
        ARPROT => m_axi_dst_ARPROT,
        ARQOS => m_axi_dst_ARQOS,
        ARREGION => m_axi_dst_ARREGION,
        ARUSER => m_axi_dst_ARUSER,
        RVALID => m_axi_dst_RVALID,
        RREADY => m_axi_dst_RREADY,
        RDATA => m_axi_dst_RDATA,
        RLAST => m_axi_dst_RLAST,
        RID => m_axi_dst_RID,
        RUSER => m_axi_dst_RUSER,
        RRESP => m_axi_dst_RRESP,
        BVALID => m_axi_dst_BVALID,
        BREADY => m_axi_dst_BREADY,
        BRESP => m_axi_dst_BRESP,
        BID => m_axi_dst_BID,
        BUSER => m_axi_dst_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => dataflow_in_loop_height_loop_U0_m_axi_dst_ARVALID,
        I_ARREADY => dst_ARREADY,
        I_ARADDR => dataflow_in_loop_height_loop_U0_m_axi_dst_ARADDR,
        I_ARID => dataflow_in_loop_height_loop_U0_m_axi_dst_ARID,
        I_ARLEN => dataflow_in_loop_height_loop_U0_m_axi_dst_ARLEN,
        I_ARSIZE => dataflow_in_loop_height_loop_U0_m_axi_dst_ARSIZE,
        I_ARLOCK => dataflow_in_loop_height_loop_U0_m_axi_dst_ARLOCK,
        I_ARCACHE => dataflow_in_loop_height_loop_U0_m_axi_dst_ARCACHE,
        I_ARQOS => dataflow_in_loop_height_loop_U0_m_axi_dst_ARQOS,
        I_ARPROT => dataflow_in_loop_height_loop_U0_m_axi_dst_ARPROT,
        I_ARUSER => dataflow_in_loop_height_loop_U0_m_axi_dst_ARUSER,
        I_ARBURST => dataflow_in_loop_height_loop_U0_m_axi_dst_ARBURST,
        I_ARREGION => dataflow_in_loop_height_loop_U0_m_axi_dst_ARREGION,
        I_RVALID => dst_RVALID,
        I_RREADY => dataflow_in_loop_height_loop_U0_m_axi_dst_RREADY,
        I_RDATA => dst_RDATA,
        I_RID => dst_RID,
        I_RUSER => dst_RUSER,
        I_RRESP => dst_RRESP,
        I_RLAST => dst_RLAST,
        I_AWVALID => dataflow_in_loop_height_loop_U0_m_axi_dst_AWVALID,
        I_AWREADY => dst_AWREADY,
        I_AWADDR => dataflow_in_loop_height_loop_U0_m_axi_dst_AWADDR,
        I_AWID => dataflow_in_loop_height_loop_U0_m_axi_dst_AWID,
        I_AWLEN => dataflow_in_loop_height_loop_U0_m_axi_dst_AWLEN,
        I_AWSIZE => dataflow_in_loop_height_loop_U0_m_axi_dst_AWSIZE,
        I_AWLOCK => dataflow_in_loop_height_loop_U0_m_axi_dst_AWLOCK,
        I_AWCACHE => dataflow_in_loop_height_loop_U0_m_axi_dst_AWCACHE,
        I_AWQOS => dataflow_in_loop_height_loop_U0_m_axi_dst_AWQOS,
        I_AWPROT => dataflow_in_loop_height_loop_U0_m_axi_dst_AWPROT,
        I_AWUSER => dataflow_in_loop_height_loop_U0_m_axi_dst_AWUSER,
        I_AWBURST => dataflow_in_loop_height_loop_U0_m_axi_dst_AWBURST,
        I_AWREGION => dataflow_in_loop_height_loop_U0_m_axi_dst_AWREGION,
        I_WVALID => dataflow_in_loop_height_loop_U0_m_axi_dst_WVALID,
        I_WREADY => dst_WREADY,
        I_WDATA => dataflow_in_loop_height_loop_U0_m_axi_dst_WDATA,
        I_WID => dataflow_in_loop_height_loop_U0_m_axi_dst_WID,
        I_WUSER => dataflow_in_loop_height_loop_U0_m_axi_dst_WUSER,
        I_WLAST => dataflow_in_loop_height_loop_U0_m_axi_dst_WLAST,
        I_WSTRB => dataflow_in_loop_height_loop_U0_m_axi_dst_WSTRB,
        I_BVALID => dst_BVALID,
        I_BREADY => dataflow_in_loop_height_loop_U0_m_axi_dst_BREADY,
        I_BRESP => dst_BRESP,
        I_BID => dst_BID,
        I_BUSER => dst_BUSER);

    dataflow_in_loop_height_loop_U0 : component mapchip_png_dataflow_in_loop_height_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        mapchip_draw_xsize => mapchip_draw_xsize,
        id => id,
        mapchip_maxheight => mapchip_maxheight,
        ystart_pos => ystart_pos,
        mapchip_maxwidth => mapchip_maxwidth,
        xstart_pos => xstart_pos,
        y => loop_dataflow_input_count,
        srcin => srcin,
        m_axi_src_AWVALID => dataflow_in_loop_height_loop_U0_m_axi_src_AWVALID,
        m_axi_src_AWREADY => ap_const_logic_0,
        m_axi_src_AWADDR => dataflow_in_loop_height_loop_U0_m_axi_src_AWADDR,
        m_axi_src_AWID => dataflow_in_loop_height_loop_U0_m_axi_src_AWID,
        m_axi_src_AWLEN => dataflow_in_loop_height_loop_U0_m_axi_src_AWLEN,
        m_axi_src_AWSIZE => dataflow_in_loop_height_loop_U0_m_axi_src_AWSIZE,
        m_axi_src_AWBURST => dataflow_in_loop_height_loop_U0_m_axi_src_AWBURST,
        m_axi_src_AWLOCK => dataflow_in_loop_height_loop_U0_m_axi_src_AWLOCK,
        m_axi_src_AWCACHE => dataflow_in_loop_height_loop_U0_m_axi_src_AWCACHE,
        m_axi_src_AWPROT => dataflow_in_loop_height_loop_U0_m_axi_src_AWPROT,
        m_axi_src_AWQOS => dataflow_in_loop_height_loop_U0_m_axi_src_AWQOS,
        m_axi_src_AWREGION => dataflow_in_loop_height_loop_U0_m_axi_src_AWREGION,
        m_axi_src_AWUSER => dataflow_in_loop_height_loop_U0_m_axi_src_AWUSER,
        m_axi_src_WVALID => dataflow_in_loop_height_loop_U0_m_axi_src_WVALID,
        m_axi_src_WREADY => ap_const_logic_0,
        m_axi_src_WDATA => dataflow_in_loop_height_loop_U0_m_axi_src_WDATA,
        m_axi_src_WSTRB => dataflow_in_loop_height_loop_U0_m_axi_src_WSTRB,
        m_axi_src_WLAST => dataflow_in_loop_height_loop_U0_m_axi_src_WLAST,
        m_axi_src_WID => dataflow_in_loop_height_loop_U0_m_axi_src_WID,
        m_axi_src_WUSER => dataflow_in_loop_height_loop_U0_m_axi_src_WUSER,
        m_axi_src_ARVALID => dataflow_in_loop_height_loop_U0_m_axi_src_ARVALID,
        m_axi_src_ARREADY => src_ARREADY,
        m_axi_src_ARADDR => dataflow_in_loop_height_loop_U0_m_axi_src_ARADDR,
        m_axi_src_ARID => dataflow_in_loop_height_loop_U0_m_axi_src_ARID,
        m_axi_src_ARLEN => dataflow_in_loop_height_loop_U0_m_axi_src_ARLEN,
        m_axi_src_ARSIZE => dataflow_in_loop_height_loop_U0_m_axi_src_ARSIZE,
        m_axi_src_ARBURST => dataflow_in_loop_height_loop_U0_m_axi_src_ARBURST,
        m_axi_src_ARLOCK => dataflow_in_loop_height_loop_U0_m_axi_src_ARLOCK,
        m_axi_src_ARCACHE => dataflow_in_loop_height_loop_U0_m_axi_src_ARCACHE,
        m_axi_src_ARPROT => dataflow_in_loop_height_loop_U0_m_axi_src_ARPROT,
        m_axi_src_ARQOS => dataflow_in_loop_height_loop_U0_m_axi_src_ARQOS,
        m_axi_src_ARREGION => dataflow_in_loop_height_loop_U0_m_axi_src_ARREGION,
        m_axi_src_ARUSER => dataflow_in_loop_height_loop_U0_m_axi_src_ARUSER,
        m_axi_src_RVALID => src_RVALID,
        m_axi_src_RREADY => dataflow_in_loop_height_loop_U0_m_axi_src_RREADY,
        m_axi_src_RDATA => src_RDATA,
        m_axi_src_RLAST => src_RLAST,
        m_axi_src_RID => src_RID,
        m_axi_src_RUSER => src_RUSER,
        m_axi_src_RRESP => src_RRESP,
        m_axi_src_BVALID => ap_const_logic_0,
        m_axi_src_BREADY => dataflow_in_loop_height_loop_U0_m_axi_src_BREADY,
        m_axi_src_BRESP => ap_const_lv2_0,
        m_axi_src_BID => ap_const_lv1_0,
        m_axi_src_BUSER => ap_const_lv1_0,
        frame_size => frame_size,
        dstin => dstin,
        m_axi_dst_AWVALID => dataflow_in_loop_height_loop_U0_m_axi_dst_AWVALID,
        m_axi_dst_AWREADY => dst_AWREADY,
        m_axi_dst_AWADDR => dataflow_in_loop_height_loop_U0_m_axi_dst_AWADDR,
        m_axi_dst_AWID => dataflow_in_loop_height_loop_U0_m_axi_dst_AWID,
        m_axi_dst_AWLEN => dataflow_in_loop_height_loop_U0_m_axi_dst_AWLEN,
        m_axi_dst_AWSIZE => dataflow_in_loop_height_loop_U0_m_axi_dst_AWSIZE,
        m_axi_dst_AWBURST => dataflow_in_loop_height_loop_U0_m_axi_dst_AWBURST,
        m_axi_dst_AWLOCK => dataflow_in_loop_height_loop_U0_m_axi_dst_AWLOCK,
        m_axi_dst_AWCACHE => dataflow_in_loop_height_loop_U0_m_axi_dst_AWCACHE,
        m_axi_dst_AWPROT => dataflow_in_loop_height_loop_U0_m_axi_dst_AWPROT,
        m_axi_dst_AWQOS => dataflow_in_loop_height_loop_U0_m_axi_dst_AWQOS,
        m_axi_dst_AWREGION => dataflow_in_loop_height_loop_U0_m_axi_dst_AWREGION,
        m_axi_dst_AWUSER => dataflow_in_loop_height_loop_U0_m_axi_dst_AWUSER,
        m_axi_dst_WVALID => dataflow_in_loop_height_loop_U0_m_axi_dst_WVALID,
        m_axi_dst_WREADY => dst_WREADY,
        m_axi_dst_WDATA => dataflow_in_loop_height_loop_U0_m_axi_dst_WDATA,
        m_axi_dst_WSTRB => dataflow_in_loop_height_loop_U0_m_axi_dst_WSTRB,
        m_axi_dst_WLAST => dataflow_in_loop_height_loop_U0_m_axi_dst_WLAST,
        m_axi_dst_WID => dataflow_in_loop_height_loop_U0_m_axi_dst_WID,
        m_axi_dst_WUSER => dataflow_in_loop_height_loop_U0_m_axi_dst_WUSER,
        m_axi_dst_ARVALID => dataflow_in_loop_height_loop_U0_m_axi_dst_ARVALID,
        m_axi_dst_ARREADY => dst_ARREADY,
        m_axi_dst_ARADDR => dataflow_in_loop_height_loop_U0_m_axi_dst_ARADDR,
        m_axi_dst_ARID => dataflow_in_loop_height_loop_U0_m_axi_dst_ARID,
        m_axi_dst_ARLEN => dataflow_in_loop_height_loop_U0_m_axi_dst_ARLEN,
        m_axi_dst_ARSIZE => dataflow_in_loop_height_loop_U0_m_axi_dst_ARSIZE,
        m_axi_dst_ARBURST => dataflow_in_loop_height_loop_U0_m_axi_dst_ARBURST,
        m_axi_dst_ARLOCK => dataflow_in_loop_height_loop_U0_m_axi_dst_ARLOCK,
        m_axi_dst_ARCACHE => dataflow_in_loop_height_loop_U0_m_axi_dst_ARCACHE,
        m_axi_dst_ARPROT => dataflow_in_loop_height_loop_U0_m_axi_dst_ARPROT,
        m_axi_dst_ARQOS => dataflow_in_loop_height_loop_U0_m_axi_dst_ARQOS,
        m_axi_dst_ARREGION => dataflow_in_loop_height_loop_U0_m_axi_dst_ARREGION,
        m_axi_dst_ARUSER => dataflow_in_loop_height_loop_U0_m_axi_dst_ARUSER,
        m_axi_dst_RVALID => dst_RVALID,
        m_axi_dst_RREADY => dataflow_in_loop_height_loop_U0_m_axi_dst_RREADY,
        m_axi_dst_RDATA => dst_RDATA,
        m_axi_dst_RLAST => dst_RLAST,
        m_axi_dst_RID => dst_RID,
        m_axi_dst_RUSER => dst_RUSER,
        m_axi_dst_RRESP => dst_RRESP,
        m_axi_dst_BVALID => dst_BVALID,
        m_axi_dst_BREADY => dataflow_in_loop_height_loop_U0_m_axi_dst_BREADY,
        m_axi_dst_BRESP => dst_BRESP,
        m_axi_dst_BID => dst_BID,
        m_axi_dst_BUSER => dst_BUSER,
        alpha => alpha,
        dstout => dstout,
        mapchip_draw_xsize_ap_vld => ap_const_logic_1,
        id_ap_vld => ap_const_logic_1,
        mapchip_maxheight_ap_vld => ap_const_logic_1,
        ystart_pos_ap_vld => ap_const_logic_1,
        mapchip_maxwidth_ap_vld => ap_const_logic_1,
        xstart_pos_ap_vld => ap_const_logic_1,
        y_ap_vld => ap_const_logic_0,
        srcin_ap_vld => ap_const_logic_1,
        frame_size_ap_vld => ap_const_logic_1,
        dstin_ap_vld => ap_const_logic_1,
        alpha_ap_vld => ap_const_logic_1,
        dstout_ap_vld => ap_const_logic_1,
        ap_start => dataflow_in_loop_height_loop_U0_ap_start,
        ap_done => dataflow_in_loop_height_loop_U0_ap_done,
        ap_ready => dataflow_in_loop_height_loop_U0_ap_ready,
        ap_idle => dataflow_in_loop_height_loop_U0_ap_idle,
        ap_continue => dataflow_in_loop_height_loop_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loop_dataflow_input_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_height_loop_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv32_1));
                elsif (((ap_start = ap_const_logic_1) and (loop_dataflow_input_count = bound_minus_1) and (dataflow_in_loop_height_loop_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loop_dataflow_output_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_in_loop_height_loop_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_height_loop_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_height_loop_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_height_loop_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_in_loop_height_loop_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_height_loop_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, dataflow_in_loop_height_loop_U0_ap_idle, loop_dataflow_output_count)
    begin
        if (((ap_start = ap_const_logic_0) and (loop_dataflow_output_count = ap_const_lv32_0) and (dataflow_in_loop_height_loop_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, dataflow_in_loop_height_loop_U0_ap_ready, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((ap_start = ap_const_logic_1) and (loop_dataflow_input_count = bound_minus_1) and (dataflow_in_loop_height_loop_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= dataflow_in_loop_height_loop_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_height_loop_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(mapchip_draw_ysize) - unsigned(ap_const_lv32_1));
    dataflow_in_loop_height_loop_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_height_loop_U0_ap_start <= ap_start;
    dataflow_in_loop_height_loop_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_height_loop_U0_start_write <= ap_const_logic_0;
end behav;
