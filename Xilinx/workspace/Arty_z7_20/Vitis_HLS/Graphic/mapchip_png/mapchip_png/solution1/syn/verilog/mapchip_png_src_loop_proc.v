// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mapchip_png_src_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mapchip_draw_xsize_dout,
        mapchip_draw_xsize_empty_n,
        mapchip_draw_xsize_read,
        id_dout,
        id_empty_n,
        id_read,
        mapchip_maxheight_dout,
        mapchip_maxheight_empty_n,
        mapchip_maxheight_read,
        ystart_pos_dout,
        ystart_pos_empty_n,
        ystart_pos_read,
        mapchip_maxwidth_dout,
        mapchip_maxwidth_empty_n,
        mapchip_maxwidth_read,
        xstart_pos_dout,
        xstart_pos_empty_n,
        xstart_pos_read,
        y_dout,
        y_empty_n,
        y_read,
        srcin_dout,
        srcin_empty_n,
        srcin_read,
        m_axi_src_AWVALID,
        m_axi_src_AWREADY,
        m_axi_src_AWADDR,
        m_axi_src_AWID,
        m_axi_src_AWLEN,
        m_axi_src_AWSIZE,
        m_axi_src_AWBURST,
        m_axi_src_AWLOCK,
        m_axi_src_AWCACHE,
        m_axi_src_AWPROT,
        m_axi_src_AWQOS,
        m_axi_src_AWREGION,
        m_axi_src_AWUSER,
        m_axi_src_WVALID,
        m_axi_src_WREADY,
        m_axi_src_WDATA,
        m_axi_src_WSTRB,
        m_axi_src_WLAST,
        m_axi_src_WID,
        m_axi_src_WUSER,
        m_axi_src_ARVALID,
        m_axi_src_ARREADY,
        m_axi_src_ARADDR,
        m_axi_src_ARID,
        m_axi_src_ARLEN,
        m_axi_src_ARSIZE,
        m_axi_src_ARBURST,
        m_axi_src_ARLOCK,
        m_axi_src_ARCACHE,
        m_axi_src_ARPROT,
        m_axi_src_ARQOS,
        m_axi_src_ARREGION,
        m_axi_src_ARUSER,
        m_axi_src_RVALID,
        m_axi_src_RREADY,
        m_axi_src_RDATA,
        m_axi_src_RLAST,
        m_axi_src_RID,
        m_axi_src_RUSER,
        m_axi_src_RRESP,
        m_axi_src_BVALID,
        m_axi_src_BREADY,
        m_axi_src_BRESP,
        m_axi_src_BID,
        m_axi_src_BUSER,
        src_V1_address0,
        src_V1_ce0,
        src_V1_we0,
        src_V1_d0,
        mapchip_draw_xsize_out_din,
        mapchip_draw_xsize_out_full_n,
        mapchip_draw_xsize_out_write,
        y_out_din,
        y_out_full_n,
        y_out_write
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage0 = 17'd32768;
parameter    ap_ST_fsm_state19 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] mapchip_draw_xsize_dout;
input   mapchip_draw_xsize_empty_n;
output   mapchip_draw_xsize_read;
input  [31:0] id_dout;
input   id_empty_n;
output   id_read;
input  [31:0] mapchip_maxheight_dout;
input   mapchip_maxheight_empty_n;
output   mapchip_maxheight_read;
input  [31:0] ystart_pos_dout;
input   ystart_pos_empty_n;
output   ystart_pos_read;
input  [31:0] mapchip_maxwidth_dout;
input   mapchip_maxwidth_empty_n;
output   mapchip_maxwidth_read;
input  [31:0] xstart_pos_dout;
input   xstart_pos_empty_n;
output   xstart_pos_read;
input  [31:0] y_dout;
input   y_empty_n;
output   y_read;
input  [63:0] srcin_dout;
input   srcin_empty_n;
output   srcin_read;
output   m_axi_src_AWVALID;
input   m_axi_src_AWREADY;
output  [63:0] m_axi_src_AWADDR;
output  [0:0] m_axi_src_AWID;
output  [31:0] m_axi_src_AWLEN;
output  [2:0] m_axi_src_AWSIZE;
output  [1:0] m_axi_src_AWBURST;
output  [1:0] m_axi_src_AWLOCK;
output  [3:0] m_axi_src_AWCACHE;
output  [2:0] m_axi_src_AWPROT;
output  [3:0] m_axi_src_AWQOS;
output  [3:0] m_axi_src_AWREGION;
output  [0:0] m_axi_src_AWUSER;
output   m_axi_src_WVALID;
input   m_axi_src_WREADY;
output  [31:0] m_axi_src_WDATA;
output  [3:0] m_axi_src_WSTRB;
output   m_axi_src_WLAST;
output  [0:0] m_axi_src_WID;
output  [0:0] m_axi_src_WUSER;
output   m_axi_src_ARVALID;
input   m_axi_src_ARREADY;
output  [63:0] m_axi_src_ARADDR;
output  [0:0] m_axi_src_ARID;
output  [31:0] m_axi_src_ARLEN;
output  [2:0] m_axi_src_ARSIZE;
output  [1:0] m_axi_src_ARBURST;
output  [1:0] m_axi_src_ARLOCK;
output  [3:0] m_axi_src_ARCACHE;
output  [2:0] m_axi_src_ARPROT;
output  [3:0] m_axi_src_ARQOS;
output  [3:0] m_axi_src_ARREGION;
output  [0:0] m_axi_src_ARUSER;
input   m_axi_src_RVALID;
output   m_axi_src_RREADY;
input  [31:0] m_axi_src_RDATA;
input   m_axi_src_RLAST;
input  [0:0] m_axi_src_RID;
input  [0:0] m_axi_src_RUSER;
input  [1:0] m_axi_src_RRESP;
input   m_axi_src_BVALID;
output   m_axi_src_BREADY;
input  [1:0] m_axi_src_BRESP;
input  [0:0] m_axi_src_BID;
input  [0:0] m_axi_src_BUSER;
output  [9:0] src_V1_address0;
output   src_V1_ce0;
output   src_V1_we0;
output  [31:0] src_V1_d0;
output  [31:0] mapchip_draw_xsize_out_din;
input   mapchip_draw_xsize_out_full_n;
output   mapchip_draw_xsize_out_write;
output  [31:0] y_out_din;
input   y_out_full_n;
output   y_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mapchip_draw_xsize_read;
reg id_read;
reg mapchip_maxheight_read;
reg ystart_pos_read;
reg mapchip_maxwidth_read;
reg xstart_pos_read;
reg y_read;
reg srcin_read;
reg m_axi_src_ARVALID;
reg m_axi_src_RREADY;
reg src_V1_ce0;
reg src_V1_we0;
reg mapchip_draw_xsize_out_write;
reg y_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mapchip_draw_xsize_blk_n;
reg    id_blk_n;
reg    mapchip_maxheight_blk_n;
reg    ystart_pos_blk_n;
reg    mapchip_maxwidth_blk_n;
reg    xstart_pos_blk_n;
reg    y_blk_n;
reg    srcin_blk_n;
reg    src_blk_n_AR;
wire    ap_CS_fsm_state9;
reg    src_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_reg_361;
reg    mapchip_draw_xsize_out_blk_n;
reg    y_out_blk_n;
reg   [31:0] x_reg_176;
reg   [31:0] x_reg_176_pp0_iter1_reg;
wire    ap_block_state16_pp0_stage0_iter0;
reg    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] mapchip_draw_xsize_read_reg_273;
reg  signed [31:0] id_read_reg_279;
reg  signed [31:0] mapchip_maxheight_read_reg_284;
reg   [31:0] ystart_pos_read_reg_289;
reg  signed [31:0] mapchip_maxwidth_read_reg_294;
reg   [31:0] xstart_pos_read_reg_300;
reg   [31:0] y_read_reg_305;
reg   [63:0] srcin_read_reg_310;
wire   [31:0] grp_fu_188_p2;
reg   [31:0] mul_ln208_reg_315;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_i_fu_192_p2;
reg  signed [31:0] tmp_i_reg_320;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_196_p2;
reg   [31:0] tmp6_i_reg_335;
wire    ap_CS_fsm_state6;
wire   [61:0] grp_fu_206_p2;
reg   [61:0] mul_ln534_reg_340;
wire   [61:0] add_ln324_fu_220_p2;
reg   [61:0] add_ln324_reg_345;
wire    ap_CS_fsm_state7;
reg   [63:0] src_addr_reg_350;
wire    ap_CS_fsm_state8;
wire   [31:0] add_ln65_fu_257_p2;
reg   [31:0] add_ln65_reg_356;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln878_fu_263_p2;
reg   [0:0] icmp_ln878_reg_361_pp0_iter1_reg;
reg   [31:0] src_addr_read_reg_365;
wire    ap_CS_fsm_state15;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state16;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] ap_phi_mux_x_phi_fu_180_p4;
wire   [63:0] zext_ln65_fu_268_p1;
wire  signed [63:0] sext_ln324_fu_247_p1;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_206_p0;
wire   [31:0] grp_fu_206_p1;
wire   [31:0] add_ln208_fu_212_p2;
wire   [61:0] zext_ln534_fu_216_p1;
wire   [63:0] shl_ln324_1_fu_225_p3;
wire   [63:0] add_ln324_1_fu_232_p2;
wire   [61:0] trunc_ln324_1_fu_237_p4;
wire    ap_CS_fsm_state19;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [61:0] grp_fu_206_p00;
wire   [61:0] grp_fu_206_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

mapchip_png_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(id_read_reg_279),
    .din1(mapchip_maxheight_read_reg_284),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

mapchip_png_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mapchip_maxwidth_read_reg_294),
    .din1(tmp_i_reg_320),
    .ce(1'b1),
    .dout(grp_fu_196_p2)
);

mapchip_png_mul_32ns_32ns_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_32ns_32ns_62_2_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state16)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        x_reg_176 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_361 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_reg_176 <= add_ln65_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln324_reg_345 <= add_ln324_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln65_reg_356 <= add_ln65_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_reg_361 <= icmp_ln878_fu_263_p2;
        icmp_ln878_reg_361_pp0_iter1_reg <= icmp_ln878_reg_361;
        x_reg_176_pp0_iter1_reg <= x_reg_176;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        id_read_reg_279 <= id_dout;
        mapchip_draw_xsize_read_reg_273 <= mapchip_draw_xsize_dout;
        mapchip_maxheight_read_reg_284 <= mapchip_maxheight_dout;
        mapchip_maxwidth_read_reg_294 <= mapchip_maxwidth_dout;
        srcin_read_reg_310 <= srcin_dout;
        xstart_pos_read_reg_300 <= xstart_pos_dout;
        y_read_reg_305 <= y_dout;
        ystart_pos_read_reg_289 <= ystart_pos_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln208_reg_315 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln534_reg_340 <= grp_fu_206_p2;
        tmp6_i_reg_335 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_361 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_addr_read_reg_365 <= m_axi_src_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        src_addr_reg_350 <= sext_ln324_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_i_reg_320 <= tmp_i_fu_192_p2;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_263_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_361 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_phi_fu_180_p4 = add_ln65_reg_356;
    end else begin
        ap_phi_mux_x_phi_fu_180_p4 = x_reg_176;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        id_blk_n = id_empty_n;
    end else begin
        id_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        id_read = 1'b1;
    end else begin
        id_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_src_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_src_ARVALID = 1'b1;
    end else begin
        m_axi_src_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_361 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_src_RREADY = 1'b1;
    end else begin
        m_axi_src_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_blk_n = mapchip_draw_xsize_empty_n;
    end else begin
        mapchip_draw_xsize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_out_blk_n = mapchip_draw_xsize_out_full_n;
    end else begin
        mapchip_draw_xsize_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_out_write = 1'b1;
    end else begin
        mapchip_draw_xsize_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_read = 1'b1;
    end else begin
        mapchip_draw_xsize_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxheight_blk_n = mapchip_maxheight_empty_n;
    end else begin
        mapchip_maxheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxheight_read = 1'b1;
    end else begin
        mapchip_maxheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxwidth_blk_n = mapchip_maxwidth_empty_n;
    end else begin
        mapchip_maxwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxwidth_read = 1'b1;
    end else begin
        mapchip_maxwidth_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V1_ce0 = 1'b1;
    end else begin
        src_V1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln878_reg_361_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V1_we0 = 1'b1;
    end else begin
        src_V1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        src_blk_n_AR = m_axi_src_ARREADY;
    end else begin
        src_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_361 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_blk_n_R = m_axi_src_RVALID;
    end else begin
        src_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcin_blk_n = srcin_empty_n;
    end else begin
        srcin_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcin_read = 1'b1;
    end else begin
        srcin_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        xstart_pos_blk_n = xstart_pos_empty_n;
    end else begin
        xstart_pos_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        xstart_pos_read = 1'b1;
    end else begin
        xstart_pos_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_blk_n = y_empty_n;
    end else begin
        y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_out_blk_n = y_out_full_n;
    end else begin
        y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_out_write = 1'b1;
    end else begin
        y_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_read = 1'b1;
    end else begin
        y_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ystart_pos_blk_n = ystart_pos_empty_n;
    end else begin
        ystart_pos_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ystart_pos_read = 1'b1;
    end else begin
        ystart_pos_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_src_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln878_fu_263_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln878_fu_263_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln208_fu_212_p2 = (xstart_pos_read_reg_300 + tmp6_i_reg_335);

assign add_ln324_1_fu_232_p2 = (srcin_read_reg_310 + shl_ln324_1_fu_225_p3);

assign add_ln324_fu_220_p2 = (mul_ln534_reg_340 + zext_ln534_fu_216_p1);

assign add_ln65_fu_257_p2 = (ap_phi_mux_x_phi_fu_180_p4 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln878_reg_361 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_src_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln878_reg_361 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_src_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((srcin_empty_n == 1'b0) | (y_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (id_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (y_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0));
end

assign ap_block_state16_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter1 = ((icmp_ln878_reg_361 == 1'd0) & (m_axi_src_RVALID == 1'b0));
end

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_206_p0 = grp_fu_206_p00;

assign grp_fu_206_p00 = y_read_reg_305;

assign grp_fu_206_p1 = grp_fu_206_p10;

assign grp_fu_206_p10 = $unsigned(mapchip_maxwidth_read_reg_294);

assign icmp_ln878_fu_263_p2 = ((ap_phi_mux_x_phi_fu_180_p4 == mapchip_draw_xsize_read_reg_273) ? 1'b1 : 1'b0);

assign m_axi_src_ARADDR = src_addr_reg_350;

assign m_axi_src_ARBURST = 2'd0;

assign m_axi_src_ARCACHE = 4'd0;

assign m_axi_src_ARID = 1'd0;

assign m_axi_src_ARLEN = mapchip_draw_xsize_read_reg_273;

assign m_axi_src_ARLOCK = 2'd0;

assign m_axi_src_ARPROT = 3'd0;

assign m_axi_src_ARQOS = 4'd0;

assign m_axi_src_ARREGION = 4'd0;

assign m_axi_src_ARSIZE = 3'd0;

assign m_axi_src_ARUSER = 1'd0;

assign m_axi_src_AWADDR = 64'd0;

assign m_axi_src_AWBURST = 2'd0;

assign m_axi_src_AWCACHE = 4'd0;

assign m_axi_src_AWID = 1'd0;

assign m_axi_src_AWLEN = 32'd0;

assign m_axi_src_AWLOCK = 2'd0;

assign m_axi_src_AWPROT = 3'd0;

assign m_axi_src_AWQOS = 4'd0;

assign m_axi_src_AWREGION = 4'd0;

assign m_axi_src_AWSIZE = 3'd0;

assign m_axi_src_AWUSER = 1'd0;

assign m_axi_src_AWVALID = 1'b0;

assign m_axi_src_BREADY = 1'b0;

assign m_axi_src_WDATA = 32'd0;

assign m_axi_src_WID = 1'd0;

assign m_axi_src_WLAST = 1'b0;

assign m_axi_src_WSTRB = 4'd0;

assign m_axi_src_WUSER = 1'd0;

assign m_axi_src_WVALID = 1'b0;

assign mapchip_draw_xsize_out_din = mapchip_draw_xsize_dout;

assign sext_ln324_fu_247_p1 = $signed(trunc_ln324_1_fu_237_p4);

assign shl_ln324_1_fu_225_p3 = {{add_ln324_reg_345}, {2'd0}};

assign src_V1_address0 = zext_ln65_fu_268_p1;

assign src_V1_d0 = src_addr_read_reg_365;

assign tmp_i_fu_192_p2 = (ystart_pos_read_reg_289 + mul_ln208_reg_315);

assign trunc_ln324_1_fu_237_p4 = {{add_ln324_1_fu_232_p2[63:2]}};

assign y_out_din = y_dout;

assign zext_ln534_fu_216_p1 = add_ln208_fu_212_p2;

assign zext_ln65_fu_268_p1 = x_reg_176_pp0_iter1_reg;

endmodule //mapchip_png_src_loop_proc
