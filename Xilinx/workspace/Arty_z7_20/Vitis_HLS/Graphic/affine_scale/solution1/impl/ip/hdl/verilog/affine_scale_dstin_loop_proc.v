// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module affine_scale_dstin_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mapchip_draw_xsize_dout,
        mapchip_draw_xsize_empty_n,
        mapchip_draw_xsize_read,
        trunc_ln69_dout,
        trunc_ln69_empty_n,
        trunc_ln69_read,
        frame_size_dout,
        frame_size_empty_n,
        frame_size_read,
        dstin_dout,
        dstin_empty_n,
        dstin_read,
        m_axi_dst_AWVALID,
        m_axi_dst_AWREADY,
        m_axi_dst_AWADDR,
        m_axi_dst_AWID,
        m_axi_dst_AWLEN,
        m_axi_dst_AWSIZE,
        m_axi_dst_AWBURST,
        m_axi_dst_AWLOCK,
        m_axi_dst_AWCACHE,
        m_axi_dst_AWPROT,
        m_axi_dst_AWQOS,
        m_axi_dst_AWREGION,
        m_axi_dst_AWUSER,
        m_axi_dst_WVALID,
        m_axi_dst_WREADY,
        m_axi_dst_WDATA,
        m_axi_dst_WSTRB,
        m_axi_dst_WLAST,
        m_axi_dst_WID,
        m_axi_dst_WUSER,
        m_axi_dst_ARVALID,
        m_axi_dst_ARREADY,
        m_axi_dst_ARADDR,
        m_axi_dst_ARID,
        m_axi_dst_ARLEN,
        m_axi_dst_ARSIZE,
        m_axi_dst_ARBURST,
        m_axi_dst_ARLOCK,
        m_axi_dst_ARCACHE,
        m_axi_dst_ARPROT,
        m_axi_dst_ARQOS,
        m_axi_dst_ARREGION,
        m_axi_dst_ARUSER,
        m_axi_dst_RVALID,
        m_axi_dst_RREADY,
        m_axi_dst_RDATA,
        m_axi_dst_RLAST,
        m_axi_dst_RID,
        m_axi_dst_RUSER,
        m_axi_dst_RRESP,
        m_axi_dst_BVALID,
        m_axi_dst_BREADY,
        m_axi_dst_BRESP,
        m_axi_dst_BID,
        m_axi_dst_BUSER,
        mapchip_maxwidth_dout,
        mapchip_maxwidth_empty_n,
        mapchip_maxwidth_read,
        d_dout,
        d_empty_n,
        d_read,
        a_dout,
        a_empty_n,
        a_read,
        c_dout,
        c_empty_n,
        c_read,
        b_dout,
        b_empty_n,
        b_read,
        m_dout,
        m_empty_n,
        m_read,
        mapchip_maxheight_dout,
        mapchip_maxheight_empty_n,
        mapchip_maxheight_read,
        n_dout,
        n_empty_n,
        n_read,
        dst_V2_address0,
        dst_V2_ce0,
        dst_V2_we0,
        dst_V2_d0
);

parameter    ap_ST_fsm_state1 = 49'd1;
parameter    ap_ST_fsm_state2 = 49'd2;
parameter    ap_ST_fsm_state3 = 49'd4;
parameter    ap_ST_fsm_state4 = 49'd8;
parameter    ap_ST_fsm_state5 = 49'd16;
parameter    ap_ST_fsm_state6 = 49'd32;
parameter    ap_ST_fsm_state7 = 49'd64;
parameter    ap_ST_fsm_state8 = 49'd128;
parameter    ap_ST_fsm_state9 = 49'd256;
parameter    ap_ST_fsm_state10 = 49'd512;
parameter    ap_ST_fsm_state11 = 49'd1024;
parameter    ap_ST_fsm_state12 = 49'd2048;
parameter    ap_ST_fsm_state13 = 49'd4096;
parameter    ap_ST_fsm_state14 = 49'd8192;
parameter    ap_ST_fsm_state15 = 49'd16384;
parameter    ap_ST_fsm_state16 = 49'd32768;
parameter    ap_ST_fsm_state17 = 49'd65536;
parameter    ap_ST_fsm_state18 = 49'd131072;
parameter    ap_ST_fsm_state19 = 49'd262144;
parameter    ap_ST_fsm_state20 = 49'd524288;
parameter    ap_ST_fsm_state21 = 49'd1048576;
parameter    ap_ST_fsm_state22 = 49'd2097152;
parameter    ap_ST_fsm_state23 = 49'd4194304;
parameter    ap_ST_fsm_state24 = 49'd8388608;
parameter    ap_ST_fsm_state25 = 49'd16777216;
parameter    ap_ST_fsm_state26 = 49'd33554432;
parameter    ap_ST_fsm_state27 = 49'd67108864;
parameter    ap_ST_fsm_state28 = 49'd134217728;
parameter    ap_ST_fsm_state29 = 49'd268435456;
parameter    ap_ST_fsm_state30 = 49'd536870912;
parameter    ap_ST_fsm_state31 = 49'd1073741824;
parameter    ap_ST_fsm_state32 = 49'd2147483648;
parameter    ap_ST_fsm_state33 = 49'd4294967296;
parameter    ap_ST_fsm_state34 = 49'd8589934592;
parameter    ap_ST_fsm_state35 = 49'd17179869184;
parameter    ap_ST_fsm_state36 = 49'd34359738368;
parameter    ap_ST_fsm_state37 = 49'd68719476736;
parameter    ap_ST_fsm_state38 = 49'd137438953472;
parameter    ap_ST_fsm_state39 = 49'd274877906944;
parameter    ap_ST_fsm_state40 = 49'd549755813888;
parameter    ap_ST_fsm_state41 = 49'd1099511627776;
parameter    ap_ST_fsm_state42 = 49'd2199023255552;
parameter    ap_ST_fsm_state43 = 49'd4398046511104;
parameter    ap_ST_fsm_state44 = 49'd8796093022208;
parameter    ap_ST_fsm_state45 = 49'd17592186044416;
parameter    ap_ST_fsm_state46 = 49'd35184372088832;
parameter    ap_ST_fsm_state47 = 49'd70368744177664;
parameter    ap_ST_fsm_pp0_stage0 = 49'd140737488355328;
parameter    ap_ST_fsm_state64 = 49'd281474976710656;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] mapchip_draw_xsize_dout;
input   mapchip_draw_xsize_empty_n;
output   mapchip_draw_xsize_read;
input  [31:0] trunc_ln69_dout;
input   trunc_ln69_empty_n;
output   trunc_ln69_read;
input  [31:0] frame_size_dout;
input   frame_size_empty_n;
output   frame_size_read;
input  [63:0] dstin_dout;
input   dstin_empty_n;
output   dstin_read;
output   m_axi_dst_AWVALID;
input   m_axi_dst_AWREADY;
output  [63:0] m_axi_dst_AWADDR;
output  [0:0] m_axi_dst_AWID;
output  [31:0] m_axi_dst_AWLEN;
output  [2:0] m_axi_dst_AWSIZE;
output  [1:0] m_axi_dst_AWBURST;
output  [1:0] m_axi_dst_AWLOCK;
output  [3:0] m_axi_dst_AWCACHE;
output  [2:0] m_axi_dst_AWPROT;
output  [3:0] m_axi_dst_AWQOS;
output  [3:0] m_axi_dst_AWREGION;
output  [0:0] m_axi_dst_AWUSER;
output   m_axi_dst_WVALID;
input   m_axi_dst_WREADY;
output  [31:0] m_axi_dst_WDATA;
output  [3:0] m_axi_dst_WSTRB;
output   m_axi_dst_WLAST;
output  [0:0] m_axi_dst_WID;
output  [0:0] m_axi_dst_WUSER;
output   m_axi_dst_ARVALID;
input   m_axi_dst_ARREADY;
output  [63:0] m_axi_dst_ARADDR;
output  [0:0] m_axi_dst_ARID;
output  [31:0] m_axi_dst_ARLEN;
output  [2:0] m_axi_dst_ARSIZE;
output  [1:0] m_axi_dst_ARBURST;
output  [1:0] m_axi_dst_ARLOCK;
output  [3:0] m_axi_dst_ARCACHE;
output  [2:0] m_axi_dst_ARPROT;
output  [3:0] m_axi_dst_ARQOS;
output  [3:0] m_axi_dst_ARREGION;
output  [0:0] m_axi_dst_ARUSER;
input   m_axi_dst_RVALID;
output   m_axi_dst_RREADY;
input  [31:0] m_axi_dst_RDATA;
input   m_axi_dst_RLAST;
input  [0:0] m_axi_dst_RID;
input  [0:0] m_axi_dst_RUSER;
input  [1:0] m_axi_dst_RRESP;
input   m_axi_dst_BVALID;
output   m_axi_dst_BREADY;
input  [1:0] m_axi_dst_BRESP;
input  [0:0] m_axi_dst_BID;
input  [0:0] m_axi_dst_BUSER;
input  [31:0] mapchip_maxwidth_dout;
input   mapchip_maxwidth_empty_n;
output   mapchip_maxwidth_read;
input  [19:0] d_dout;
input   d_empty_n;
output   d_read;
input  [19:0] a_dout;
input   a_empty_n;
output   a_read;
input  [19:0] c_dout;
input   c_empty_n;
output   c_read;
input  [19:0] b_dout;
input   b_empty_n;
output   b_read;
input  [31:0] m_dout;
input   m_empty_n;
output   m_read;
input  [31:0] mapchip_maxheight_dout;
input   mapchip_maxheight_empty_n;
output   mapchip_maxheight_read;
input  [31:0] n_dout;
input   n_empty_n;
output   n_read;
output  [9:0] dst_V2_address0;
output   dst_V2_ce0;
output   dst_V2_we0;
output  [23:0] dst_V2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mapchip_draw_xsize_read;
reg trunc_ln69_read;
reg frame_size_read;
reg dstin_read;
reg m_axi_dst_ARVALID;
reg[63:0] m_axi_dst_ARADDR;
reg m_axi_dst_RREADY;
reg mapchip_maxwidth_read;
reg d_read;
reg a_read;
reg c_read;
reg b_read;
reg m_read;
reg mapchip_maxheight_read;
reg n_read;
reg dst_V2_ce0;
reg dst_V2_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [48:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mapchip_draw_xsize_blk_n;
reg    trunc_ln69_blk_n;
reg    frame_size_blk_n;
reg    dstin_blk_n;
reg    dst_blk_n_AR;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_4_reg_1449;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter6_reg;
reg   [0:0] or_ln171_2_reg_1483;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter6_reg;
reg    dst_blk_n_R;
reg    ap_enable_reg_pp0_iter14;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter13_reg;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter13_reg;
reg    mapchip_maxwidth_blk_n;
reg    d_blk_n;
reg    a_blk_n;
reg    c_blk_n;
reg    b_blk_n;
reg    m_blk_n;
reg    mapchip_maxheight_blk_n;
reg    n_blk_n;
reg   [31:0] x_V_reg_248;
reg   [31:0] x_V_reg_248_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state48_pp0_stage0_iter0;
wire    ap_block_state49_pp0_stage0_iter1;
wire    ap_block_state50_pp0_stage0_iter2;
wire    ap_block_state51_pp0_stage0_iter3;
wire    ap_block_state52_pp0_stage0_iter4;
wire    ap_block_state53_pp0_stage0_iter5;
wire    ap_block_state54_pp0_stage0_iter6;
wire    ap_block_state55_pp0_stage0_iter7;
reg    ap_predicate_op397_readreq_state55;
reg    ap_predicate_op398_readreq_state55;
reg    ap_block_state55_io;
wire    ap_block_state56_pp0_stage0_iter8;
wire    ap_block_state57_pp0_stage0_iter9;
wire    ap_block_state58_pp0_stage0_iter10;
wire    ap_block_state59_pp0_stage0_iter11;
wire    ap_block_state60_pp0_stage0_iter12;
wire    ap_block_state61_pp0_stage0_iter13;
reg    ap_predicate_op411_read_state62;
reg    ap_predicate_op412_read_state62;
reg    ap_block_state62_pp0_stage0_iter14;
wire    ap_block_state63_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] x_V_reg_248_pp0_iter2_reg;
reg   [31:0] x_V_reg_248_pp0_iter3_reg;
reg   [31:0] x_V_reg_248_pp0_iter4_reg;
reg   [31:0] x_V_reg_248_pp0_iter5_reg;
reg   [31:0] mapchip_draw_xsize_read_reg_1083;
reg   [31:0] trunc_ln69_read_reg_1088;
reg   [31:0] frame_size_read_reg_1094;
reg   [63:0] dstin_read_reg_1099;
reg   [31:0] mapchip_width_V_reg_1105;
reg   [19:0] a_read_reg_1111;
reg   [19:0] c_read_reg_1116;
reg   [19:0] b_read_reg_1121;
reg   [31:0] m_read_reg_1126;
reg   [31:0] mapchip_height_V_reg_1132;
reg   [30:0] p_cast_i_reg_1137;
wire  signed [31:0] shl_ln_fu_279_p3;
reg  signed [31:0] shl_ln_reg_1142;
reg   [0:0] tmp_25_reg_1147;
reg   [0:0] tmp_27_reg_1153;
reg   [0:0] tmp_30_reg_1159;
reg   [0:0] tmp_33_reg_1165;
reg   [19:0] tmp_s_reg_1171;
reg   [30:0] shr_i_i_reg_1176;
wire   [31:0] select_ln138_fu_351_p3;
reg   [31:0] select_ln138_reg_1181;
reg   [19:0] tmp_2_reg_1186;
wire    ap_CS_fsm_state2;
wire  signed [31:0] select_ln133_fu_452_p3;
reg  signed [31:0] select_ln133_reg_1221;
wire  signed [31:0] tmp31_i_fu_467_p2;
reg  signed [31:0] tmp31_i_reg_1227;
wire   [61:0] grp_fu_375_p2;
reg   [61:0] ret_22_reg_1233;
wire    ap_CS_fsm_state3;
wire   [64:0] grp_fu_384_p2;
reg   [64:0] mul_ln1364_reg_1238;
reg   [25:0] tmp_reg_1243;
wire   [64:0] grp_fu_401_p2;
reg   [64:0] mul_ln1364_9_reg_1248;
reg   [25:0] tmp_29_reg_1253;
wire   [64:0] grp_fu_418_p2;
reg   [64:0] mul_ln1364_10_reg_1258;
reg   [25:0] tmp_32_reg_1263;
wire   [64:0] grp_fu_435_p2;
reg   [64:0] mul_ln1364_11_reg_1268;
reg   [25:0] tmp_35_reg_1273;
wire  signed [31:0] select_ln1364_8_fu_547_p3;
reg  signed [31:0] select_ln1364_8_reg_1278;
wire    ap_CS_fsm_state4;
wire  signed [31:0] select_ln1364_10_fu_589_p3;
reg  signed [31:0] select_ln1364_10_reg_1284;
wire  signed [31:0] select_ln1364_12_fu_631_p3;
reg  signed [31:0] select_ln1364_12_reg_1290;
wire  signed [31:0] select_ln1364_14_fu_673_p3;
reg  signed [31:0] select_ln1364_14_reg_1295;
wire   [20:0] trunc_ln1497_fu_680_p1;
reg   [20:0] trunc_ln1497_reg_1300;
wire   [20:0] trunc_ln1497_2_fu_684_p1;
reg   [20:0] trunc_ln1497_2_reg_1305;
wire    ap_CS_fsm_state5;
wire   [43:0] grp_fu_694_p2;
reg   [43:0] mul_ln215_reg_1330;
wire    ap_CS_fsm_state7;
wire   [43:0] grp_fu_706_p2;
reg   [43:0] mul_ln1347_reg_1335;
wire    ap_CS_fsm_state8;
wire  signed [31:0] trunc_ln69_4_fu_721_p4;
wire  signed [32:0] sext_ln1364_fu_750_p1;
wire  signed [31:0] grp_fu_731_p2;
reg  signed [31:0] ixa_V_reg_1372;
wire    ap_CS_fsm_state43;
wire  signed [31:0] grp_fu_784_p2;
reg  signed [31:0] sdiv_ln1364_6_reg_1378;
wire   [31:0] grp_fu_754_p2;
reg   [31:0] sdiv_ln1364_4_reg_1383;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_773_p2;
reg   [31:0] sdiv_ln1364_5_reg_1388;
wire    ap_CS_fsm_state45;
wire  signed [31:0] ixc_V_fu_802_p1;
reg  signed [31:0] ixc_V_reg_1398;
wire   [31:0] grp_fu_790_p2;
reg   [31:0] mul_ln69_reg_1404;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_797_p2;
reg   [31:0] tmp32_i_reg_1409;
wire   [31:0] grp_fu_805_p2;
reg   [31:0] mul_ln69_4_reg_1414;
wire   [31:0] grp_fu_810_p2;
reg   [31:0] tmp34_i_reg_1419;
wire  signed [31:0] shr_i_i_i_fu_814_p1;
reg  signed [31:0] shr_i_i_i_reg_1424;
wire    ap_CS_fsm_state47;
wire   [31:0] sub_ln69_fu_824_p2;
reg   [31:0] sub_ln69_reg_1429;
wire   [31:0] sub_ln69_5_fu_836_p2;
reg   [31:0] sub_ln69_5_reg_1434;
wire   [52:0] zext_ln534_fu_841_p1;
reg   [52:0] zext_ln534_reg_1439;
wire   [31:0] add_ln691_fu_844_p2;
reg   [31:0] add_ln691_reg_1444;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln878_4_fu_850_p2;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter1_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter2_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter3_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter4_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter5_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter7_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter8_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter9_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter10_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter11_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter12_reg;
reg   [0:0] icmp_ln878_4_reg_1449_pp0_iter14_reg;
wire  signed [31:0] affine_x_fu_855_p2;
reg  signed [31:0] affine_x_reg_1453;
wire   [31:0] grp_fu_860_p2;
reg   [31:0] mul_ln69_5_reg_1459;
wire   [31:0] grp_fu_864_p2;
reg   [31:0] mul_ln69_6_reg_1464;
reg  signed [20:0] trunc_ln1497_5_reg_1469;
reg  signed [20:0] trunc_ln1497_5_reg_1469_pp0_iter4_reg;
reg  signed [20:0] trunc_ln1497_5_reg_1469_pp0_iter5_reg;
reg  signed [20:0] trunc_ln1497_6_reg_1476;
wire   [0:0] or_ln171_2_fu_972_p2;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter5_reg;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter7_reg;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter8_reg;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter9_reg;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter10_reg;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter11_reg;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter12_reg;
reg   [0:0] or_ln171_2_reg_1483_pp0_iter14_reg;
wire   [52:0] grp_fu_981_p2;
reg   [52:0] mul_ln534_reg_1492;
reg   [9:0] dst_V2_addr_reg_1497;
reg   [9:0] dst_V2_addr_reg_1497_pp0_iter7_reg;
reg   [9:0] dst_V2_addr_reg_1497_pp0_iter8_reg;
reg   [9:0] dst_V2_addr_reg_1497_pp0_iter9_reg;
reg   [9:0] dst_V2_addr_reg_1497_pp0_iter10_reg;
reg   [9:0] dst_V2_addr_reg_1497_pp0_iter11_reg;
reg   [9:0] dst_V2_addr_reg_1497_pp0_iter12_reg;
reg   [9:0] dst_V2_addr_reg_1497_pp0_iter13_reg;
reg   [9:0] dst_V2_addr_reg_1497_pp0_iter14_reg;
reg   [63:0] dst_addr_1_reg_1502;
reg   [63:0] dst_addr_reg_1508;
reg   [31:0] dst_addr_1_read_reg_1514;
reg   [31:0] dst_addr_read_reg_1519;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state48;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter15;
reg   [31:0] ap_phi_mux_x_V_phi_fu_252_p4;
reg   [31:0] ap_phi_mux_phi_ln174_phi_fu_263_p4;
wire   [31:0] ap_phi_reg_pp0_iter15_phi_ln174_reg_260;
wire   [63:0] zext_ln167_1_fu_990_p1;
wire  signed [63:0] sext_ln324_4_fu_1030_p1;
wire  signed [63:0] sext_ln324_fu_1068_p1;
reg    ap_block_state1;
wire   [0:0] icmp_ln878_3_fu_339_p2;
wire   [31:0] add_ln692_2_fu_345_p2;
wire   [31:0] grp_fu_375_p0;
wire   [31:0] grp_fu_375_p1;
wire   [33:0] grp_fu_384_p1;
wire  signed [31:0] shl_ln1497_9_fu_390_p3;
wire   [33:0] grp_fu_401_p1;
wire  signed [31:0] shl_ln1497_s_fu_407_p3;
wire   [33:0] grp_fu_418_p1;
wire  signed [31:0] shl_ln1497_1_fu_424_p3;
wire   [33:0] grp_fu_435_p1;
wire   [0:0] icmp_ln878_fu_441_p2;
wire   [31:0] add_ln692_fu_447_p2;
wire   [31:0] shr_i_i_cast_fu_459_p1;
wire   [31:0] sub_ln69_4_fu_462_p2;
wire   [64:0] sub_ln1364_fu_512_p2;
wire   [25:0] tmp_26_fu_517_p4;
wire  signed [31:0] sext_ln1364_14_fu_527_p1;
wire  signed [31:0] sext_ln1364_15_fu_531_p1;
wire   [31:0] select_ln1364_fu_534_p3;
wire   [31:0] sub_ln1364_8_fu_541_p2;
wire   [64:0] sub_ln1364_9_fu_554_p2;
wire   [25:0] tmp_28_fu_559_p4;
wire  signed [31:0] sext_ln1364_17_fu_569_p1;
wire  signed [31:0] sext_ln1364_18_fu_573_p1;
wire   [31:0] select_ln1364_9_fu_576_p3;
wire   [31:0] sub_ln1364_10_fu_583_p2;
wire   [64:0] sub_ln1364_11_fu_596_p2;
wire   [25:0] tmp_31_fu_601_p4;
wire  signed [31:0] sext_ln1364_20_fu_611_p1;
wire  signed [31:0] sext_ln1364_21_fu_615_p1;
wire   [31:0] select_ln1364_11_fu_618_p3;
wire   [31:0] sub_ln1364_12_fu_625_p2;
wire   [64:0] sub_ln1364_13_fu_638_p2;
wire   [25:0] tmp_34_fu_643_p4;
wire  signed [31:0] sext_ln1364_23_fu_653_p1;
wire  signed [31:0] sext_ln1364_24_fu_657_p1;
wire   [31:0] select_ln1364_13_fu_660_p3;
wire   [31:0] sub_ln1364_14_fu_667_p2;
wire  signed [27:0] grp_fu_694_p0;
wire  signed [27:0] grp_fu_694_p1;
wire  signed [27:0] grp_fu_706_p0;
wire  signed [27:0] grp_fu_706_p1;
wire   [43:0] sub_ln1347_fu_717_p2;
wire   [31:0] grp_fu_731_p0;
wire  signed [31:0] grp_fu_731_p1;
wire   [20:0] sub_ln1497_fu_737_p2;
wire   [32:0] grp_fu_754_p0;
wire  signed [31:0] grp_fu_754_p1;
wire   [20:0] sub_ln1497_2_fu_760_p2;
wire   [32:0] grp_fu_773_p0;
wire  signed [31:0] grp_fu_773_p1;
wire   [31:0] grp_fu_784_p0;
wire  signed [31:0] grp_fu_784_p1;
wire  signed [31:0] grp_fu_797_p1;
wire  signed [31:0] grp_fu_805_p0;
wire   [31:0] r_8_i_fu_817_p3;
wire   [31:0] r_9_i_fu_829_p3;
wire   [31:0] add_ln69_fu_868_p2;
wire   [31:0] rx_fu_872_p2;
wire   [31:0] add_ln69_5_fu_881_p2;
wire   [31:0] ry_V_fu_885_p2;
wire  signed [32:0] sext_ln215_6_fu_877_p1;
wire   [32:0] ret_fu_894_p2;
wire  signed [32:0] sext_ln215_7_fu_890_p1;
wire   [32:0] ret_21_fu_910_p2;
wire  signed [31:0] sext_ln69_fu_926_p1;
wire   [0:0] icmp_ln890_fu_936_p2;
wire   [20:0] or_ln171_fu_932_p2;
wire  signed [31:0] sext_ln69_2_fu_929_p1;
wire   [0:0] icmp_ln890_2_fu_955_p2;
wire   [0:0] xor_ln890_fu_941_p2;
wire   [0:0] xor_ln890_2_fu_960_p2;
wire   [0:0] or_ln171_1_fu_966_p2;
wire   [0:0] tmp_36_fu_947_p3;
wire   [31:0] grp_fu_981_p0;
wire  signed [52:0] sext_ln324_2_fu_995_p1;
wire   [52:0] add_ln324_3_fu_998_p2;
wire   [54:0] tmp_3_fu_1003_p3;
wire  signed [63:0] sext_ln324_3_fu_1011_p1;
wire   [63:0] add_ln324_4_fu_1015_p2;
wire   [61:0] trunc_ln324_1_fu_1020_p4;
wire   [61:0] zext_ln167_fu_986_p1;
wire   [61:0] add_ln324_fu_1040_p2;
wire   [63:0] shl_ln1_fu_1045_p3;
wire   [63:0] add_ln324_2_fu_1053_p2;
wire   [61:0] trunc_ln3_fu_1058_p4;
reg    grp_fu_731_ap_start;
wire    grp_fu_731_ap_done;
reg    grp_fu_754_ap_start;
wire    grp_fu_754_ap_done;
reg    grp_fu_773_ap_start;
wire    grp_fu_773_ap_done;
reg    grp_fu_784_ap_start;
wire    grp_fu_784_ap_done;
reg    grp_fu_860_ce;
reg    grp_fu_864_ce;
reg    grp_fu_981_ce;
wire    ap_CS_fsm_state64;
reg   [48:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [61:0] grp_fu_375_p00;
wire   [61:0] grp_fu_375_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 49'd1;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

affine_scale_mul_32ns_32ns_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_32ns_32ns_62_2_1_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_375_p0),
    .din1(grp_fu_375_p1),
    .ce(1'b1),
    .dout(grp_fu_375_p2)
);

affine_scale_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U92(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln_reg_1142),
    .din1(grp_fu_384_p1),
    .ce(1'b1),
    .dout(grp_fu_384_p2)
);

affine_scale_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U93(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln1497_9_fu_390_p3),
    .din1(grp_fu_401_p1),
    .ce(1'b1),
    .dout(grp_fu_401_p2)
);

affine_scale_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U94(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln1497_s_fu_407_p3),
    .din1(grp_fu_418_p1),
    .ce(1'b1),
    .dout(grp_fu_418_p2)
);

affine_scale_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln1497_1_fu_424_p3),
    .din1(grp_fu_435_p1),
    .ce(1'b1),
    .dout(grp_fu_435_p2)
);

affine_scale_mul_28s_28s_44_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 44 ))
mul_28s_28s_44_3_1_U96(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_694_p0),
    .din1(grp_fu_694_p1),
    .ce(1'b1),
    .dout(grp_fu_694_p2)
);

affine_scale_mul_28s_28s_44_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 44 ))
mul_28s_28s_44_3_1_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_706_p0),
    .din1(grp_fu_706_p1),
    .ce(1'b1),
    .dout(grp_fu_706_p2)
);

affine_scale_sdiv_32ns_32s_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32s_32_36_seq_1_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_731_ap_start),
    .done(grp_fu_731_ap_done),
    .din0(grp_fu_731_p0),
    .din1(grp_fu_731_p1),
    .ce(1'b1),
    .dout(grp_fu_731_p2)
);

affine_scale_sdiv_33ns_32s_32_37_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 37 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_33ns_32s_32_37_seq_1_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_754_ap_start),
    .done(grp_fu_754_ap_done),
    .din0(grp_fu_754_p0),
    .din1(grp_fu_754_p1),
    .ce(1'b1),
    .dout(grp_fu_754_p2)
);

affine_scale_sdiv_33ns_32s_32_37_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 37 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_33ns_32s_32_37_seq_1_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_773_ap_start),
    .done(grp_fu_773_ap_done),
    .din0(grp_fu_773_p0),
    .din1(grp_fu_773_p1),
    .ce(1'b1),
    .dout(grp_fu_773_p2)
);

affine_scale_sdiv_32ns_32s_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32s_32_36_seq_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_784_ap_start),
    .done(grp_fu_784_ap_done),
    .din0(grp_fu_784_p0),
    .din1(grp_fu_784_p1),
    .ce(1'b1),
    .dout(grp_fu_784_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ixa_V_reg_1372),
    .din1(select_ln133_reg_1221),
    .ce(1'b1),
    .dout(grp_fu_790_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U103(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp31_i_reg_1227),
    .din1(grp_fu_797_p1),
    .ce(1'b1),
    .dout(grp_fu_797_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_805_p0),
    .din1(select_ln133_reg_1221),
    .ce(1'b1),
    .dout(grp_fu_805_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U105(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp31_i_reg_1227),
    .din1(sdiv_ln1364_6_reg_1378),
    .ce(1'b1),
    .dout(grp_fu_810_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(affine_x_reg_1453),
    .din1(ixa_V_reg_1372),
    .ce(grp_fu_860_ce),
    .dout(grp_fu_860_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(affine_x_reg_1453),
    .din1(ixc_V_reg_1398),
    .ce(grp_fu_864_ce),
    .dout(grp_fu_864_p2)
);

affine_scale_mul_32ns_21s_53_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 21 ),
    .dout_WIDTH( 53 ))
mul_32ns_21s_53_2_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_981_p0),
    .din1(trunc_ln1497_6_reg_1476),
    .ce(grp_fu_981_ce),
    .dout(grp_fu_981_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state48) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state48)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state48);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        x_V_reg_248 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_4_reg_1449 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_V_reg_248 <= add_ln691_reg_1444;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a_read_reg_1111 <= a_dout;
        b_read_reg_1121 <= b_dout;
        c_read_reg_1116 <= c_dout;
        dstin_read_reg_1099 <= dstin_dout;
        frame_size_read_reg_1094 <= frame_size_dout;
        m_read_reg_1126 <= m_dout;
        mapchip_draw_xsize_read_reg_1083 <= mapchip_draw_xsize_dout;
        mapchip_height_V_reg_1132 <= mapchip_maxheight_dout;
        mapchip_width_V_reg_1105 <= mapchip_maxwidth_dout;
        p_cast_i_reg_1137 <= {{mapchip_maxwidth_dout[31:1]}};
        select_ln138_reg_1181 <= select_ln138_fu_351_p3;
        shl_ln_reg_1142[31 : 12] <= shl_ln_fu_279_p3[31 : 12];
        shr_i_i_reg_1176 <= {{mapchip_maxheight_dout[31:1]}};
        tmp_25_reg_1147 <= d_dout[32'd19];
        tmp_27_reg_1153 <= a_dout[32'd19];
        tmp_2_reg_1186 <= {{mapchip_maxheight_dout[20:1]}};
        tmp_30_reg_1159 <= c_dout[32'd19];
        tmp_33_reg_1165 <= b_dout[32'd19];
        tmp_s_reg_1171 <= {{mapchip_maxwidth_dout[20:1]}};
        trunc_ln69_read_reg_1088 <= trunc_ln69_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln691_reg_1444 <= add_ln691_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_4_fu_850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        affine_x_reg_1453 <= affine_x_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_4_reg_1449_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_V2_addr_reg_1497 <= zext_ln167_1_fu_990_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        dst_V2_addr_reg_1497_pp0_iter10_reg <= dst_V2_addr_reg_1497_pp0_iter9_reg;
        dst_V2_addr_reg_1497_pp0_iter11_reg <= dst_V2_addr_reg_1497_pp0_iter10_reg;
        dst_V2_addr_reg_1497_pp0_iter12_reg <= dst_V2_addr_reg_1497_pp0_iter11_reg;
        dst_V2_addr_reg_1497_pp0_iter13_reg <= dst_V2_addr_reg_1497_pp0_iter12_reg;
        dst_V2_addr_reg_1497_pp0_iter14_reg <= dst_V2_addr_reg_1497_pp0_iter13_reg;
        dst_V2_addr_reg_1497_pp0_iter7_reg <= dst_V2_addr_reg_1497;
        dst_V2_addr_reg_1497_pp0_iter8_reg <= dst_V2_addr_reg_1497_pp0_iter7_reg;
        dst_V2_addr_reg_1497_pp0_iter9_reg <= dst_V2_addr_reg_1497_pp0_iter8_reg;
        icmp_ln878_4_reg_1449_pp0_iter10_reg <= icmp_ln878_4_reg_1449_pp0_iter9_reg;
        icmp_ln878_4_reg_1449_pp0_iter11_reg <= icmp_ln878_4_reg_1449_pp0_iter10_reg;
        icmp_ln878_4_reg_1449_pp0_iter12_reg <= icmp_ln878_4_reg_1449_pp0_iter11_reg;
        icmp_ln878_4_reg_1449_pp0_iter13_reg <= icmp_ln878_4_reg_1449_pp0_iter12_reg;
        icmp_ln878_4_reg_1449_pp0_iter14_reg <= icmp_ln878_4_reg_1449_pp0_iter13_reg;
        icmp_ln878_4_reg_1449_pp0_iter2_reg <= icmp_ln878_4_reg_1449_pp0_iter1_reg;
        icmp_ln878_4_reg_1449_pp0_iter3_reg <= icmp_ln878_4_reg_1449_pp0_iter2_reg;
        icmp_ln878_4_reg_1449_pp0_iter4_reg <= icmp_ln878_4_reg_1449_pp0_iter3_reg;
        icmp_ln878_4_reg_1449_pp0_iter5_reg <= icmp_ln878_4_reg_1449_pp0_iter4_reg;
        icmp_ln878_4_reg_1449_pp0_iter6_reg <= icmp_ln878_4_reg_1449_pp0_iter5_reg;
        icmp_ln878_4_reg_1449_pp0_iter7_reg <= icmp_ln878_4_reg_1449_pp0_iter6_reg;
        icmp_ln878_4_reg_1449_pp0_iter8_reg <= icmp_ln878_4_reg_1449_pp0_iter7_reg;
        icmp_ln878_4_reg_1449_pp0_iter9_reg <= icmp_ln878_4_reg_1449_pp0_iter8_reg;
        or_ln171_2_reg_1483_pp0_iter10_reg <= or_ln171_2_reg_1483_pp0_iter9_reg;
        or_ln171_2_reg_1483_pp0_iter11_reg <= or_ln171_2_reg_1483_pp0_iter10_reg;
        or_ln171_2_reg_1483_pp0_iter12_reg <= or_ln171_2_reg_1483_pp0_iter11_reg;
        or_ln171_2_reg_1483_pp0_iter13_reg <= or_ln171_2_reg_1483_pp0_iter12_reg;
        or_ln171_2_reg_1483_pp0_iter14_reg <= or_ln171_2_reg_1483_pp0_iter13_reg;
        or_ln171_2_reg_1483_pp0_iter5_reg <= or_ln171_2_reg_1483;
        or_ln171_2_reg_1483_pp0_iter6_reg <= or_ln171_2_reg_1483_pp0_iter5_reg;
        or_ln171_2_reg_1483_pp0_iter7_reg <= or_ln171_2_reg_1483_pp0_iter6_reg;
        or_ln171_2_reg_1483_pp0_iter8_reg <= or_ln171_2_reg_1483_pp0_iter7_reg;
        or_ln171_2_reg_1483_pp0_iter9_reg <= or_ln171_2_reg_1483_pp0_iter8_reg;
        trunc_ln1497_5_reg_1469_pp0_iter4_reg <= trunc_ln1497_5_reg_1469;
        trunc_ln1497_5_reg_1469_pp0_iter5_reg <= trunc_ln1497_5_reg_1469_pp0_iter4_reg;
        x_V_reg_248_pp0_iter2_reg <= x_V_reg_248_pp0_iter1_reg;
        x_V_reg_248_pp0_iter3_reg <= x_V_reg_248_pp0_iter2_reg;
        x_V_reg_248_pp0_iter4_reg <= x_V_reg_248_pp0_iter3_reg;
        x_V_reg_248_pp0_iter5_reg <= x_V_reg_248_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op411_read_state62 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_addr_1_read_reg_1514 <= m_axi_dst_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln171_2_reg_1483_pp0_iter5_reg == 1'd0) & (icmp_ln878_4_reg_1449_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_addr_1_reg_1502 <= sext_ln324_4_fu_1030_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op412_read_state62 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_addr_read_reg_1519 <= m_axi_dst_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln171_2_reg_1483_pp0_iter5_reg == 1'd1) & (icmp_ln878_4_reg_1449_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_addr_reg_1508 <= sext_ln324_fu_1068_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_4_reg_1449 <= icmp_ln878_4_fu_850_p2;
        icmp_ln878_4_reg_1449_pp0_iter1_reg <= icmp_ln878_4_reg_1449;
        x_V_reg_248_pp0_iter1_reg <= x_V_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ixa_V_reg_1372 <= grp_fu_731_p2;
        sdiv_ln1364_6_reg_1378 <= grp_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ixc_V_reg_1398 <= ixc_V_fu_802_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln1347_reg_1335 <= grp_fu_706_p2;
        mul_ln215_reg_1330 <= grp_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln1364_10_reg_1258 <= grp_fu_418_p2;
        mul_ln1364_11_reg_1268 <= grp_fu_435_p2;
        mul_ln1364_9_reg_1248 <= grp_fu_401_p2;
        mul_ln1364_reg_1238 <= grp_fu_384_p2;
        ret_22_reg_1233 <= grp_fu_375_p2;
        tmp_29_reg_1253 <= {{grp_fu_401_p2[64:39]}};
        tmp_32_reg_1263 <= {{grp_fu_418_p2[64:39]}};
        tmp_35_reg_1273 <= {{grp_fu_435_p2[64:39]}};
        tmp_reg_1243 <= {{grp_fu_384_p2[64:39]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_4_reg_1449_pp0_iter4_reg == 1'd0) & (or_ln171_2_reg_1483 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln534_reg_1492 <= grp_fu_981_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        mul_ln69_4_reg_1414 <= grp_fu_805_p2;
        mul_ln69_reg_1404 <= grp_fu_790_p2;
        tmp32_i_reg_1409 <= grp_fu_797_p2;
        tmp34_i_reg_1419 <= grp_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_4_reg_1449_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln69_5_reg_1459 <= grp_fu_860_p2;
        mul_ln69_6_reg_1464 <= grp_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_4_reg_1449_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln171_2_reg_1483 <= or_ln171_2_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        sdiv_ln1364_4_reg_1383 <= grp_fu_754_p2;
        sdiv_ln1364_5_reg_1388 <= grp_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln133_reg_1221 <= select_ln133_fu_452_p3;
        tmp31_i_reg_1227 <= tmp31_i_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln1364_10_reg_1284 <= select_ln1364_10_fu_589_p3;
        select_ln1364_12_reg_1290 <= select_ln1364_12_fu_631_p3;
        select_ln1364_14_reg_1295 <= select_ln1364_14_fu_673_p3;
        select_ln1364_8_reg_1278 <= select_ln1364_8_fu_547_p3;
        trunc_ln1497_2_reg_1305 <= trunc_ln1497_2_fu_684_p1;
        trunc_ln1497_reg_1300 <= trunc_ln1497_fu_680_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        shr_i_i_i_reg_1424 <= shr_i_i_i_fu_814_p1;
        sub_ln69_5_reg_1434 <= sub_ln69_5_fu_836_p2;
        sub_ln69_reg_1429 <= sub_ln69_fu_824_p2;
        zext_ln534_reg_1439[31 : 0] <= zext_ln534_fu_841_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_4_reg_1449_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln1497_5_reg_1469 <= {{ret_fu_894_p2[32:12]}};
        trunc_ln1497_6_reg_1476 <= {{ret_21_fu_910_p2[32:12]}};
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_blk_n = a_empty_n;
    end else begin
        a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_read = 1'b1;
    end else begin
        a_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_4_fu_850_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state48 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state48 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_4_reg_1449_pp0_iter14_reg == 1'd0)) begin
        if ((or_ln171_2_reg_1483_pp0_iter14_reg == 1'd1)) begin
            ap_phi_mux_phi_ln174_phi_fu_263_p4 = dst_addr_read_reg_1519;
        end else if ((or_ln171_2_reg_1483_pp0_iter14_reg == 1'd0)) begin
            ap_phi_mux_phi_ln174_phi_fu_263_p4 = dst_addr_1_read_reg_1514;
        end else begin
            ap_phi_mux_phi_ln174_phi_fu_263_p4 = ap_phi_reg_pp0_iter15_phi_ln174_reg_260;
        end
    end else begin
        ap_phi_mux_phi_ln174_phi_fu_263_p4 = ap_phi_reg_pp0_iter15_phi_ln174_reg_260;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_4_reg_1449 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_x_V_phi_fu_252_p4 = add_ln691_reg_1444;
    end else begin
        ap_phi_mux_x_V_phi_fu_252_p4 = x_V_reg_248;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_blk_n = b_empty_n;
    end else begin
        b_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_read = 1'b1;
    end else begin
        b_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_blk_n = c_empty_n;
    end else begin
        c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read = 1'b1;
    end else begin
        c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_blk_n = d_empty_n;
    end else begin
        d_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_read = 1'b1;
    end else begin
        d_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_V2_ce0 = 1'b1;
    end else begin
        dst_V2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln878_4_reg_1449_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_V2_we0 = 1'b1;
    end else begin
        dst_V2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln171_2_reg_1483_pp0_iter6_reg == 1'd0) & (icmp_ln878_4_reg_1449_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((or_ln171_2_reg_1483_pp0_iter6_reg == 1'd1) & (icmp_ln878_4_reg_1449_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
        dst_blk_n_AR = m_axi_dst_ARREADY;
    end else begin
        dst_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((or_ln171_2_reg_1483_pp0_iter13_reg == 1'd0) & (icmp_ln878_4_reg_1449_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((or_ln171_2_reg_1483_pp0_iter13_reg == 1'd1) & (icmp_ln878_4_reg_1449_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        dst_blk_n_R = m_axi_dst_RVALID;
    end else begin
        dst_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstin_blk_n = dstin_empty_n;
    end else begin
        dstin_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstin_read = 1'b1;
    end else begin
        dstin_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_size_blk_n = frame_size_empty_n;
    end else begin
        frame_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_size_read = 1'b1;
    end else begin
        frame_size_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_731_ap_start = 1'b1;
    end else begin
        grp_fu_731_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_754_ap_start = 1'b1;
    end else begin
        grp_fu_754_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_773_ap_start = 1'b1;
    end else begin
        grp_fu_773_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_784_ap_start = 1'b1;
    end else begin
        grp_fu_784_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_860_ce = 1'b1;
    end else begin
        grp_fu_860_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_864_ce = 1'b1;
    end else begin
        grp_fu_864_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_981_ce = 1'b1;
    end else begin
        grp_fu_981_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        if ((ap_predicate_op398_readreq_state55 == 1'b1)) begin
            m_axi_dst_ARADDR = dst_addr_reg_1508;
        end else if ((ap_predicate_op397_readreq_state55 == 1'b1)) begin
            m_axi_dst_ARADDR = dst_addr_1_reg_1502;
        end else begin
            m_axi_dst_ARADDR = 'bx;
        end
    end else begin
        m_axi_dst_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op398_readreq_state55 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_predicate_op397_readreq_state55 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
        m_axi_dst_ARVALID = 1'b1;
    end else begin
        m_axi_dst_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op412_read_state62 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op411_read_state62 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_dst_RREADY = 1'b1;
    end else begin
        m_axi_dst_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_blk_n = m_empty_n;
    end else begin
        m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_read = 1'b1;
    end else begin
        m_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_blk_n = mapchip_draw_xsize_empty_n;
    end else begin
        mapchip_draw_xsize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_read = 1'b1;
    end else begin
        mapchip_draw_xsize_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxheight_blk_n = mapchip_maxheight_empty_n;
    end else begin
        mapchip_maxheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxheight_read = 1'b1;
    end else begin
        mapchip_maxheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxwidth_blk_n = mapchip_maxwidth_empty_n;
    end else begin
        mapchip_maxwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxwidth_read = 1'b1;
    end else begin
        mapchip_maxwidth_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_blk_n = n_empty_n;
    end else begin
        n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read = 1'b1;
    end else begin
        n_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln69_blk_n = trunc_ln69_empty_n;
    end else begin
        trunc_ln69_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln69_read = 1'b1;
    end else begin
        trunc_ln69_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_4_fu_850_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_4_fu_850_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_2_fu_1053_p2 = (dstin_read_reg_1099 + shl_ln1_fu_1045_p3);

assign add_ln324_3_fu_998_p2 = ($signed(mul_ln534_reg_1492) + $signed(sext_ln324_2_fu_995_p1));

assign add_ln324_4_fu_1015_p2 = ($signed(dstin_read_reg_1099) + $signed(sext_ln324_3_fu_1011_p1));

assign add_ln324_fu_1040_p2 = (ret_22_reg_1233 + zext_ln167_fu_986_p1);

assign add_ln691_fu_844_p2 = (ap_phi_mux_x_V_phi_fu_252_p4 + 32'd1);

assign add_ln692_2_fu_345_p2 = ($signed(n_dout) + $signed(32'd4294967295));

assign add_ln692_fu_447_p2 = ($signed(m_read_reg_1126) + $signed(32'd4294967295));

assign add_ln69_5_fu_881_p2 = (tmp34_i_reg_1419 + mul_ln69_6_reg_1464);

assign add_ln69_fu_868_p2 = (tmp32_i_reg_1409 + mul_ln69_5_reg_1459);

assign affine_x_fu_855_p2 = ($signed(ap_phi_mux_x_V_phi_fu_252_p4) - $signed(shr_i_i_i_reg_1424));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state55_io) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter14 == 1'b1) & (((ap_predicate_op412_read_state62 == 1'b1) & (m_axi_dst_RVALID == 1'b0)) | ((ap_predicate_op411_read_state62 == 1'b1) & (m_axi_dst_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state55_io) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter14 == 1'b1) & (((ap_predicate_op412_read_state62 == 1'b1) & (m_axi_dst_RVALID == 1'b0)) | ((ap_predicate_op411_read_state62 == 1'b1) & (m_axi_dst_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((dstin_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0));
end

assign ap_block_state48_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state55_io = (((ap_predicate_op398_readreq_state55 == 1'b1) & (m_axi_dst_ARREADY == 1'b0)) | ((ap_predicate_op397_readreq_state55 == 1'b1) & (m_axi_dst_ARREADY == 1'b0)));
end

assign ap_block_state55_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state62_pp0_stage0_iter14 = (((ap_predicate_op412_read_state62 == 1'b1) & (m_axi_dst_RVALID == 1'b0)) | ((ap_predicate_op411_read_state62 == 1'b1) & (m_axi_dst_RVALID == 1'b0)));
end

assign ap_block_state63_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter15_phi_ln174_reg_260 = 'bx;

always @ (*) begin
    ap_predicate_op397_readreq_state55 = ((or_ln171_2_reg_1483_pp0_iter6_reg == 1'd0) & (icmp_ln878_4_reg_1449_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op398_readreq_state55 = ((or_ln171_2_reg_1483_pp0_iter6_reg == 1'd1) & (icmp_ln878_4_reg_1449_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op411_read_state62 = ((or_ln171_2_reg_1483_pp0_iter13_reg == 1'd0) & (icmp_ln878_4_reg_1449_pp0_iter13_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op412_read_state62 = ((or_ln171_2_reg_1483_pp0_iter13_reg == 1'd1) & (icmp_ln878_4_reg_1449_pp0_iter13_reg == 1'd0));
end

assign dst_V2_address0 = dst_V2_addr_reg_1497_pp0_iter14_reg;

assign dst_V2_d0 = ap_phi_mux_phi_ln174_phi_fu_263_p4[23:0];

assign grp_fu_375_p0 = grp_fu_375_p00;

assign grp_fu_375_p00 = trunc_ln69_read_reg_1088;

assign grp_fu_375_p1 = grp_fu_375_p10;

assign grp_fu_375_p10 = frame_size_read_reg_1094;

assign grp_fu_384_p1 = 65'd5497558139;

assign grp_fu_401_p1 = 65'd5497558139;

assign grp_fu_418_p1 = 65'd5497558139;

assign grp_fu_435_p1 = 65'd5497558139;

assign grp_fu_694_p0 = select_ln1364_8_reg_1278;

assign grp_fu_694_p1 = select_ln1364_10_reg_1284;

assign grp_fu_706_p0 = select_ln1364_12_reg_1290;

assign grp_fu_706_p1 = select_ln1364_14_reg_1295;

assign grp_fu_731_p0 = select_ln1364_8_reg_1278 << 32'd12;

assign grp_fu_731_p1 = {{sub_ln1347_fu_717_p2[43:12]}};

assign grp_fu_754_p0 = {{sub_ln1497_fu_737_p2}, {12'd0}};

assign grp_fu_754_p1 = sext_ln1364_fu_750_p1;

assign grp_fu_773_p0 = {{sub_ln1497_2_fu_760_p2}, {12'd0}};

assign grp_fu_773_p1 = sext_ln1364_fu_750_p1;

assign grp_fu_784_p0 = select_ln1364_10_reg_1284 << 32'd12;

assign grp_fu_784_p1 = {{sub_ln1347_fu_717_p2[43:12]}};

assign grp_fu_797_p1 = sdiv_ln1364_4_reg_1383[31:0];

assign grp_fu_805_p0 = sdiv_ln1364_5_reg_1388[31:0];

assign grp_fu_981_p0 = zext_ln534_reg_1439;

assign icmp_ln878_3_fu_339_p2 = (($signed(shl_ln_fu_279_p3) < $signed(32'd4294967197)) ? 1'b1 : 1'b0);

assign icmp_ln878_4_fu_850_p2 = ((ap_phi_mux_x_V_phi_fu_252_p4 == mapchip_draw_xsize_read_reg_1083) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_441_p2 = (($signed(shl_ln1497_9_fu_390_p3) < $signed(32'd4294967197)) ? 1'b1 : 1'b0);

assign icmp_ln890_2_fu_955_p2 = ((sext_ln69_2_fu_929_p1 < mapchip_height_V_reg_1132) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_936_p2 = ((sext_ln69_fu_926_p1 < mapchip_width_V_reg_1105) ? 1'b1 : 1'b0);

assign ixc_V_fu_802_p1 = sdiv_ln1364_5_reg_1388[31:0];

assign m_axi_dst_ARBURST = 2'd0;

assign m_axi_dst_ARCACHE = 4'd0;

assign m_axi_dst_ARID = 1'd0;

assign m_axi_dst_ARLEN = 32'd1;

assign m_axi_dst_ARLOCK = 2'd0;

assign m_axi_dst_ARPROT = 3'd0;

assign m_axi_dst_ARQOS = 4'd0;

assign m_axi_dst_ARREGION = 4'd0;

assign m_axi_dst_ARSIZE = 3'd0;

assign m_axi_dst_ARUSER = 1'd0;

assign m_axi_dst_AWADDR = 64'd0;

assign m_axi_dst_AWBURST = 2'd0;

assign m_axi_dst_AWCACHE = 4'd0;

assign m_axi_dst_AWID = 1'd0;

assign m_axi_dst_AWLEN = 32'd0;

assign m_axi_dst_AWLOCK = 2'd0;

assign m_axi_dst_AWPROT = 3'd0;

assign m_axi_dst_AWQOS = 4'd0;

assign m_axi_dst_AWREGION = 4'd0;

assign m_axi_dst_AWSIZE = 3'd0;

assign m_axi_dst_AWUSER = 1'd0;

assign m_axi_dst_AWVALID = 1'b0;

assign m_axi_dst_BREADY = 1'b0;

assign m_axi_dst_WDATA = 32'd0;

assign m_axi_dst_WID = 1'd0;

assign m_axi_dst_WLAST = 1'b0;

assign m_axi_dst_WSTRB = 4'd0;

assign m_axi_dst_WUSER = 1'd0;

assign m_axi_dst_WVALID = 1'b0;

assign or_ln171_1_fu_966_p2 = (xor_ln890_fu_941_p2 | xor_ln890_2_fu_960_p2);

assign or_ln171_2_fu_972_p2 = (tmp_36_fu_947_p3 | or_ln171_1_fu_966_p2);

assign or_ln171_fu_932_p2 = (trunc_ln1497_6_reg_1476 | trunc_ln1497_5_reg_1469);

assign r_8_i_fu_817_p3 = {{tmp_s_reg_1171}, {12'd0}};

assign r_9_i_fu_829_p3 = {{tmp_2_reg_1186}, {12'd0}};

assign ret_21_fu_910_p2 = ($signed(sext_ln215_7_fu_890_p1) + $signed(33'd2048));

assign ret_fu_894_p2 = ($signed(sext_ln215_6_fu_877_p1) + $signed(33'd2048));

assign rx_fu_872_p2 = (add_ln69_fu_868_p2 + sub_ln69_reg_1429);

assign ry_V_fu_885_p2 = (add_ln69_5_fu_881_p2 + sub_ln69_5_reg_1434);

assign select_ln133_fu_452_p3 = ((icmp_ln878_fu_441_p2[0:0] == 1'b1) ? add_ln692_fu_447_p2 : m_read_reg_1126);

assign select_ln1364_10_fu_589_p3 = ((tmp_27_reg_1153[0:0] == 1'b1) ? sub_ln1364_10_fu_583_p2 : sext_ln1364_18_fu_573_p1);

assign select_ln1364_11_fu_618_p3 = ((tmp_30_reg_1159[0:0] == 1'b1) ? sext_ln1364_20_fu_611_p1 : sext_ln1364_21_fu_615_p1);

assign select_ln1364_12_fu_631_p3 = ((tmp_30_reg_1159[0:0] == 1'b1) ? sub_ln1364_12_fu_625_p2 : sext_ln1364_21_fu_615_p1);

assign select_ln1364_13_fu_660_p3 = ((tmp_33_reg_1165[0:0] == 1'b1) ? sext_ln1364_23_fu_653_p1 : sext_ln1364_24_fu_657_p1);

assign select_ln1364_14_fu_673_p3 = ((tmp_33_reg_1165[0:0] == 1'b1) ? sub_ln1364_14_fu_667_p2 : sext_ln1364_24_fu_657_p1);

assign select_ln1364_8_fu_547_p3 = ((tmp_25_reg_1147[0:0] == 1'b1) ? sub_ln1364_8_fu_541_p2 : sext_ln1364_15_fu_531_p1);

assign select_ln1364_9_fu_576_p3 = ((tmp_27_reg_1153[0:0] == 1'b1) ? sext_ln1364_17_fu_569_p1 : sext_ln1364_18_fu_573_p1);

assign select_ln1364_fu_534_p3 = ((tmp_25_reg_1147[0:0] == 1'b1) ? sext_ln1364_14_fu_527_p1 : sext_ln1364_15_fu_531_p1);

assign select_ln138_fu_351_p3 = ((icmp_ln878_3_fu_339_p2[0:0] == 1'b1) ? add_ln692_2_fu_345_p2 : n_dout);

assign sext_ln1364_14_fu_527_p1 = $signed(tmp_26_fu_517_p4);

assign sext_ln1364_15_fu_531_p1 = $signed(tmp_reg_1243);

assign sext_ln1364_17_fu_569_p1 = $signed(tmp_28_fu_559_p4);

assign sext_ln1364_18_fu_573_p1 = $signed(tmp_29_reg_1253);

assign sext_ln1364_20_fu_611_p1 = $signed(tmp_31_fu_601_p4);

assign sext_ln1364_21_fu_615_p1 = $signed(tmp_32_reg_1263);

assign sext_ln1364_23_fu_653_p1 = $signed(tmp_34_fu_643_p4);

assign sext_ln1364_24_fu_657_p1 = $signed(tmp_35_reg_1273);

assign sext_ln1364_fu_750_p1 = trunc_ln69_4_fu_721_p4;

assign sext_ln215_6_fu_877_p1 = $signed(rx_fu_872_p2);

assign sext_ln215_7_fu_890_p1 = $signed(ry_V_fu_885_p2);

assign sext_ln324_2_fu_995_p1 = trunc_ln1497_5_reg_1469_pp0_iter5_reg;

assign sext_ln324_3_fu_1011_p1 = $signed(tmp_3_fu_1003_p3);

assign sext_ln324_4_fu_1030_p1 = $signed(trunc_ln324_1_fu_1020_p4);

assign sext_ln324_fu_1068_p1 = $signed(trunc_ln3_fu_1058_p4);

assign sext_ln69_2_fu_929_p1 = trunc_ln1497_6_reg_1476;

assign sext_ln69_fu_926_p1 = trunc_ln1497_5_reg_1469;

assign shl_ln1497_1_fu_424_p3 = {{b_read_reg_1121}, {12'd0}};

assign shl_ln1497_9_fu_390_p3 = {{a_read_reg_1111}, {12'd0}};

assign shl_ln1497_s_fu_407_p3 = {{c_read_reg_1116}, {12'd0}};

assign shl_ln1_fu_1045_p3 = {{add_ln324_fu_1040_p2}, {2'd0}};

assign shl_ln_fu_279_p3 = {{d_dout}, {12'd0}};

assign shr_i_i_cast_fu_459_p1 = shr_i_i_reg_1176;

assign shr_i_i_i_fu_814_p1 = $signed(p_cast_i_reg_1137);

assign sub_ln1347_fu_717_p2 = (mul_ln215_reg_1330 - mul_ln1347_reg_1335);

assign sub_ln1364_10_fu_583_p2 = (32'd0 - select_ln1364_9_fu_576_p3);

assign sub_ln1364_11_fu_596_p2 = (65'd0 - mul_ln1364_10_reg_1258);

assign sub_ln1364_12_fu_625_p2 = (32'd0 - select_ln1364_11_fu_618_p3);

assign sub_ln1364_13_fu_638_p2 = (65'd0 - mul_ln1364_11_reg_1268);

assign sub_ln1364_14_fu_667_p2 = (32'd0 - select_ln1364_13_fu_660_p3);

assign sub_ln1364_8_fu_541_p2 = (32'd0 - select_ln1364_fu_534_p3);

assign sub_ln1364_9_fu_554_p2 = (65'd0 - mul_ln1364_9_reg_1248);

assign sub_ln1364_fu_512_p2 = (65'd0 - mul_ln1364_reg_1238);

assign sub_ln1497_2_fu_760_p2 = (21'd0 - trunc_ln1497_2_reg_1305);

assign sub_ln1497_fu_737_p2 = (21'd0 - trunc_ln1497_reg_1300);

assign sub_ln69_4_fu_462_p2 = (trunc_ln69_read_reg_1088 - shr_i_i_cast_fu_459_p1);

assign sub_ln69_5_fu_836_p2 = (r_9_i_fu_829_p3 - mul_ln69_4_reg_1414);

assign sub_ln69_fu_824_p2 = (r_8_i_fu_817_p3 - mul_ln69_reg_1404);

assign tmp31_i_fu_467_p2 = (sub_ln69_4_fu_462_p2 + select_ln138_reg_1181);

assign tmp_26_fu_517_p4 = {{sub_ln1364_fu_512_p2[64:39]}};

assign tmp_28_fu_559_p4 = {{sub_ln1364_9_fu_554_p2[64:39]}};

assign tmp_31_fu_601_p4 = {{sub_ln1364_11_fu_596_p2[64:39]}};

assign tmp_34_fu_643_p4 = {{sub_ln1364_13_fu_638_p2[64:39]}};

assign tmp_36_fu_947_p3 = or_ln171_fu_932_p2[32'd20];

assign tmp_3_fu_1003_p3 = {{add_ln324_3_fu_998_p2}, {2'd0}};

assign trunc_ln1497_2_fu_684_p1 = select_ln1364_12_fu_631_p3[20:0];

assign trunc_ln1497_fu_680_p1 = select_ln1364_14_fu_673_p3[20:0];

assign trunc_ln324_1_fu_1020_p4 = {{add_ln324_4_fu_1015_p2[63:2]}};

assign trunc_ln3_fu_1058_p4 = {{add_ln324_2_fu_1053_p2[63:2]}};

assign trunc_ln69_4_fu_721_p4 = {{sub_ln1347_fu_717_p2[43:12]}};

assign xor_ln890_2_fu_960_p2 = (icmp_ln890_2_fu_955_p2 ^ 1'd1);

assign xor_ln890_fu_941_p2 = (icmp_ln890_fu_936_p2 ^ 1'd1);

assign zext_ln167_1_fu_990_p1 = x_V_reg_248_pp0_iter5_reg;

assign zext_ln167_fu_986_p1 = x_V_reg_248_pp0_iter5_reg;

assign zext_ln534_fu_841_p1 = mapchip_width_V_reg_1105;

always @ (posedge ap_clk) begin
    shl_ln_reg_1142[11:0] <= 12'b000000000000;
    zext_ln534_reg_1439[52:32] <= 21'b000000000000000000000;
end

endmodule //affine_scale_dstin_loop_proc
