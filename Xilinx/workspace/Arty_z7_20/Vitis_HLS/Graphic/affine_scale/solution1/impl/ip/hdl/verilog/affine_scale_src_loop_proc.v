// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module affine_scale_src_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mapchip_draw_xsize_dout,
        mapchip_draw_xsize_empty_n,
        mapchip_draw_xsize_read,
        mapchip_maxwidth_dout,
        mapchip_maxwidth_empty_n,
        mapchip_maxwidth_read,
        d_dout,
        d_empty_n,
        d_read,
        a_dout,
        a_empty_n,
        a_read,
        c_dout,
        c_empty_n,
        c_read,
        b_dout,
        b_empty_n,
        b_read,
        m_dout,
        m_empty_n,
        m_read,
        trunc_ln69_dout,
        trunc_ln69_empty_n,
        trunc_ln69_read,
        mapchip_maxheight_dout,
        mapchip_maxheight_empty_n,
        mapchip_maxheight_read,
        n_dout,
        n_empty_n,
        n_read,
        src_V1_address0,
        src_V1_ce0,
        src_V1_we0,
        src_V1_d0,
        id_dout,
        id_empty_n,
        id_read,
        ystart_pos_dout,
        ystart_pos_empty_n,
        ystart_pos_read,
        xstart_pos_dout,
        xstart_pos_empty_n,
        xstart_pos_read,
        srcin_dout,
        srcin_empty_n,
        srcin_read,
        m_axi_src_AWVALID,
        m_axi_src_AWREADY,
        m_axi_src_AWADDR,
        m_axi_src_AWID,
        m_axi_src_AWLEN,
        m_axi_src_AWSIZE,
        m_axi_src_AWBURST,
        m_axi_src_AWLOCK,
        m_axi_src_AWCACHE,
        m_axi_src_AWPROT,
        m_axi_src_AWQOS,
        m_axi_src_AWREGION,
        m_axi_src_AWUSER,
        m_axi_src_WVALID,
        m_axi_src_WREADY,
        m_axi_src_WDATA,
        m_axi_src_WSTRB,
        m_axi_src_WLAST,
        m_axi_src_WID,
        m_axi_src_WUSER,
        m_axi_src_ARVALID,
        m_axi_src_ARREADY,
        m_axi_src_ARADDR,
        m_axi_src_ARID,
        m_axi_src_ARLEN,
        m_axi_src_ARSIZE,
        m_axi_src_ARBURST,
        m_axi_src_ARLOCK,
        m_axi_src_ARCACHE,
        m_axi_src_ARPROT,
        m_axi_src_ARQOS,
        m_axi_src_ARREGION,
        m_axi_src_ARUSER,
        m_axi_src_RVALID,
        m_axi_src_RREADY,
        m_axi_src_RDATA,
        m_axi_src_RLAST,
        m_axi_src_RID,
        m_axi_src_RUSER,
        m_axi_src_RRESP,
        m_axi_src_BVALID,
        m_axi_src_BREADY,
        m_axi_src_BRESP,
        m_axi_src_BID,
        m_axi_src_BUSER,
        mapchip_draw_xsize_out_din,
        mapchip_draw_xsize_out_full_n,
        mapchip_draw_xsize_out_write,
        trunc_ln69_out_din,
        trunc_ln69_out_full_n,
        trunc_ln69_out_write
);

parameter    ap_ST_fsm_state1 = 49'd1;
parameter    ap_ST_fsm_state2 = 49'd2;
parameter    ap_ST_fsm_state3 = 49'd4;
parameter    ap_ST_fsm_state4 = 49'd8;
parameter    ap_ST_fsm_state5 = 49'd16;
parameter    ap_ST_fsm_state6 = 49'd32;
parameter    ap_ST_fsm_state7 = 49'd64;
parameter    ap_ST_fsm_state8 = 49'd128;
parameter    ap_ST_fsm_state9 = 49'd256;
parameter    ap_ST_fsm_state10 = 49'd512;
parameter    ap_ST_fsm_state11 = 49'd1024;
parameter    ap_ST_fsm_state12 = 49'd2048;
parameter    ap_ST_fsm_state13 = 49'd4096;
parameter    ap_ST_fsm_state14 = 49'd8192;
parameter    ap_ST_fsm_state15 = 49'd16384;
parameter    ap_ST_fsm_state16 = 49'd32768;
parameter    ap_ST_fsm_state17 = 49'd65536;
parameter    ap_ST_fsm_state18 = 49'd131072;
parameter    ap_ST_fsm_state19 = 49'd262144;
parameter    ap_ST_fsm_state20 = 49'd524288;
parameter    ap_ST_fsm_state21 = 49'd1048576;
parameter    ap_ST_fsm_state22 = 49'd2097152;
parameter    ap_ST_fsm_state23 = 49'd4194304;
parameter    ap_ST_fsm_state24 = 49'd8388608;
parameter    ap_ST_fsm_state25 = 49'd16777216;
parameter    ap_ST_fsm_state26 = 49'd33554432;
parameter    ap_ST_fsm_state27 = 49'd67108864;
parameter    ap_ST_fsm_state28 = 49'd134217728;
parameter    ap_ST_fsm_state29 = 49'd268435456;
parameter    ap_ST_fsm_state30 = 49'd536870912;
parameter    ap_ST_fsm_state31 = 49'd1073741824;
parameter    ap_ST_fsm_state32 = 49'd2147483648;
parameter    ap_ST_fsm_state33 = 49'd4294967296;
parameter    ap_ST_fsm_state34 = 49'd8589934592;
parameter    ap_ST_fsm_state35 = 49'd17179869184;
parameter    ap_ST_fsm_state36 = 49'd34359738368;
parameter    ap_ST_fsm_state37 = 49'd68719476736;
parameter    ap_ST_fsm_state38 = 49'd137438953472;
parameter    ap_ST_fsm_state39 = 49'd274877906944;
parameter    ap_ST_fsm_state40 = 49'd549755813888;
parameter    ap_ST_fsm_state41 = 49'd1099511627776;
parameter    ap_ST_fsm_state42 = 49'd2199023255552;
parameter    ap_ST_fsm_state43 = 49'd4398046511104;
parameter    ap_ST_fsm_state44 = 49'd8796093022208;
parameter    ap_ST_fsm_state45 = 49'd17592186044416;
parameter    ap_ST_fsm_state46 = 49'd35184372088832;
parameter    ap_ST_fsm_state47 = 49'd70368744177664;
parameter    ap_ST_fsm_pp0_stage0 = 49'd140737488355328;
parameter    ap_ST_fsm_state64 = 49'd281474976710656;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] mapchip_draw_xsize_dout;
input   mapchip_draw_xsize_empty_n;
output   mapchip_draw_xsize_read;
input  [31:0] mapchip_maxwidth_dout;
input   mapchip_maxwidth_empty_n;
output   mapchip_maxwidth_read;
input  [19:0] d_dout;
input   d_empty_n;
output   d_read;
input  [19:0] a_dout;
input   a_empty_n;
output   a_read;
input  [19:0] c_dout;
input   c_empty_n;
output   c_read;
input  [19:0] b_dout;
input   b_empty_n;
output   b_read;
input  [31:0] m_dout;
input   m_empty_n;
output   m_read;
input  [31:0] trunc_ln69_dout;
input   trunc_ln69_empty_n;
output   trunc_ln69_read;
input  [31:0] mapchip_maxheight_dout;
input   mapchip_maxheight_empty_n;
output   mapchip_maxheight_read;
input  [31:0] n_dout;
input   n_empty_n;
output   n_read;
output  [9:0] src_V1_address0;
output   src_V1_ce0;
output   src_V1_we0;
output  [31:0] src_V1_d0;
input  [31:0] id_dout;
input   id_empty_n;
output   id_read;
input  [31:0] ystart_pos_dout;
input   ystart_pos_empty_n;
output   ystart_pos_read;
input  [31:0] xstart_pos_dout;
input   xstart_pos_empty_n;
output   xstart_pos_read;
input  [63:0] srcin_dout;
input   srcin_empty_n;
output   srcin_read;
output   m_axi_src_AWVALID;
input   m_axi_src_AWREADY;
output  [63:0] m_axi_src_AWADDR;
output  [0:0] m_axi_src_AWID;
output  [31:0] m_axi_src_AWLEN;
output  [2:0] m_axi_src_AWSIZE;
output  [1:0] m_axi_src_AWBURST;
output  [1:0] m_axi_src_AWLOCK;
output  [3:0] m_axi_src_AWCACHE;
output  [2:0] m_axi_src_AWPROT;
output  [3:0] m_axi_src_AWQOS;
output  [3:0] m_axi_src_AWREGION;
output  [0:0] m_axi_src_AWUSER;
output   m_axi_src_WVALID;
input   m_axi_src_WREADY;
output  [31:0] m_axi_src_WDATA;
output  [3:0] m_axi_src_WSTRB;
output   m_axi_src_WLAST;
output  [0:0] m_axi_src_WID;
output  [0:0] m_axi_src_WUSER;
output   m_axi_src_ARVALID;
input   m_axi_src_ARREADY;
output  [63:0] m_axi_src_ARADDR;
output  [0:0] m_axi_src_ARID;
output  [31:0] m_axi_src_ARLEN;
output  [2:0] m_axi_src_ARSIZE;
output  [1:0] m_axi_src_ARBURST;
output  [1:0] m_axi_src_ARLOCK;
output  [3:0] m_axi_src_ARCACHE;
output  [2:0] m_axi_src_ARPROT;
output  [3:0] m_axi_src_ARQOS;
output  [3:0] m_axi_src_ARREGION;
output  [0:0] m_axi_src_ARUSER;
input   m_axi_src_RVALID;
output   m_axi_src_RREADY;
input  [31:0] m_axi_src_RDATA;
input   m_axi_src_RLAST;
input  [0:0] m_axi_src_RID;
input  [0:0] m_axi_src_RUSER;
input  [1:0] m_axi_src_RRESP;
input   m_axi_src_BVALID;
output   m_axi_src_BREADY;
input  [1:0] m_axi_src_BRESP;
input  [0:0] m_axi_src_BID;
input  [0:0] m_axi_src_BUSER;
output  [31:0] mapchip_draw_xsize_out_din;
input   mapchip_draw_xsize_out_full_n;
output   mapchip_draw_xsize_out_write;
output  [31:0] trunc_ln69_out_din;
input   trunc_ln69_out_full_n;
output   trunc_ln69_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mapchip_draw_xsize_read;
reg mapchip_maxwidth_read;
reg d_read;
reg a_read;
reg c_read;
reg b_read;
reg m_read;
reg trunc_ln69_read;
reg mapchip_maxheight_read;
reg n_read;
reg src_V1_ce0;
reg src_V1_we0;
reg id_read;
reg ystart_pos_read;
reg xstart_pos_read;
reg srcin_read;
reg m_axi_src_ARVALID;
reg m_axi_src_RREADY;
reg mapchip_draw_xsize_out_write;
reg trunc_ln69_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [48:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mapchip_draw_xsize_blk_n;
reg    mapchip_maxwidth_blk_n;
reg    d_blk_n;
reg    a_blk_n;
reg    c_blk_n;
reg    b_blk_n;
reg    m_blk_n;
reg    trunc_ln69_blk_n;
reg    mapchip_maxheight_blk_n;
reg    n_blk_n;
reg    id_blk_n;
reg    ystart_pos_blk_n;
reg    xstart_pos_blk_n;
reg    srcin_blk_n;
reg    src_blk_n_AR;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_2_reg_1463;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter6_reg;
reg   [0:0] or_ln157_2_reg_1502;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter6_reg;
reg    src_blk_n_R;
reg    ap_enable_reg_pp0_iter14;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter13_reg;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter13_reg;
reg    mapchip_draw_xsize_out_blk_n;
reg    trunc_ln69_out_blk_n;
reg   [31:0] x_V_reg_272;
reg   [31:0] mapchip_draw_xsize_read_reg_1077;
reg  signed [31:0] mapchip_width_V_reg_1082;
reg   [19:0] a_read_reg_1089;
reg   [19:0] c_read_reg_1094;
reg   [19:0] b_read_reg_1099;
reg   [31:0] m_read_reg_1104;
reg   [31:0] trunc_ln69_read_reg_1110;
reg  signed [31:0] mapchip_height_V_reg_1115;
reg  signed [31:0] id_read_reg_1121;
reg   [31:0] ystart_pos_read_reg_1126;
reg   [31:0] xstart_pos_read_reg_1131;
reg   [63:0] srcin_read_reg_1136;
reg   [30:0] p_cast_i_reg_1141;
wire  signed [31:0] shl_ln_fu_305_p3;
reg  signed [31:0] shl_ln_reg_1146;
reg   [0:0] tmp_2_reg_1151;
reg   [0:0] tmp_13_reg_1157;
reg   [0:0] tmp_16_reg_1163;
reg   [0:0] tmp_19_reg_1169;
reg   [19:0] tmp_9_reg_1175;
reg   [30:0] shr_i_i_reg_1180;
wire   [31:0] select_ln138_fu_377_p3;
reg   [31:0] select_ln138_reg_1185;
reg   [19:0] tmp_s_reg_1190;
wire    ap_CS_fsm_state2;
wire  signed [31:0] select_ln133_fu_466_p3;
reg  signed [31:0] select_ln133_reg_1215;
wire  signed [31:0] tmp31_i_fu_481_p2;
reg  signed [31:0] tmp31_i_reg_1221;
wire   [64:0] grp_fu_398_p2;
reg   [64:0] mul_ln1364_reg_1227;
wire    ap_CS_fsm_state3;
reg   [25:0] tmp_reg_1232;
wire   [64:0] grp_fu_415_p2;
reg   [64:0] mul_ln1364_1_reg_1237;
reg   [25:0] tmp_15_reg_1242;
wire   [64:0] grp_fu_432_p2;
reg   [64:0] mul_ln1364_2_reg_1247;
reg   [25:0] tmp_18_reg_1252;
wire   [64:0] grp_fu_449_p2;
reg   [64:0] mul_ln1364_3_reg_1257;
reg   [25:0] tmp_21_reg_1262;
wire   [31:0] grp_fu_486_p2;
reg   [31:0] mul_ln208_reg_1267;
wire  signed [31:0] select_ln1364_1_fu_565_p3;
reg  signed [31:0] select_ln1364_1_reg_1272;
wire    ap_CS_fsm_state4;
wire  signed [31:0] select_ln1364_3_fu_607_p3;
reg  signed [31:0] select_ln1364_3_reg_1278;
wire  signed [31:0] select_ln1364_5_fu_649_p3;
reg  signed [31:0] select_ln1364_5_reg_1284;
wire  signed [31:0] select_ln1364_7_fu_691_p3;
reg  signed [31:0] select_ln1364_7_reg_1289;
wire   [20:0] trunc_ln1497_fu_698_p1;
reg   [20:0] trunc_ln1497_reg_1294;
wire   [20:0] trunc_ln1497_1_fu_702_p1;
reg   [20:0] trunc_ln1497_1_reg_1299;
wire  signed [31:0] tmp_i_fu_706_p2;
reg  signed [31:0] tmp_i_reg_1304;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_734_p2;
reg   [31:0] tmp30_i_reg_1329;
wire    ap_CS_fsm_state6;
wire   [43:0] grp_fu_716_p2;
reg   [43:0] mul_ln215_reg_1334;
wire    ap_CS_fsm_state7;
wire   [43:0] grp_fu_728_p2;
reg   [43:0] mul_ln1347_reg_1339;
wire   [31:0] add_ln208_fu_738_p2;
reg   [31:0] add_ln208_reg_1344;
wire    ap_CS_fsm_state8;
wire  signed [31:0] trunc_ln69_1_fu_751_p4;
wire  signed [32:0] sext_ln1364_fu_780_p1;
wire  signed [31:0] grp_fu_761_p2;
reg  signed [31:0] ixa_V_reg_1381;
wire    ap_CS_fsm_state43;
wire  signed [31:0] grp_fu_814_p2;
reg  signed [31:0] sdiv_ln1364_3_reg_1387;
wire   [31:0] grp_fu_784_p2;
reg   [31:0] sdiv_ln1364_1_reg_1392;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_803_p2;
reg   [31:0] sdiv_ln1364_2_reg_1397;
wire    ap_CS_fsm_state45;
wire  signed [31:0] ixc_V_fu_832_p1;
reg  signed [31:0] ixc_V_reg_1407;
wire   [31:0] grp_fu_820_p2;
reg   [31:0] mul_ln69_reg_1413;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_827_p2;
reg   [31:0] tmp32_i_reg_1418;
wire   [31:0] grp_fu_835_p2;
reg   [31:0] mul_ln69_1_reg_1423;
wire   [31:0] grp_fu_840_p2;
reg   [31:0] tmp34_i_reg_1428;
wire  signed [31:0] shr_i_i_i_fu_844_p1;
reg  signed [31:0] shr_i_i_i_reg_1433;
wire    ap_CS_fsm_state47;
wire   [31:0] sub_ln69_fu_854_p2;
reg   [31:0] sub_ln69_reg_1438;
wire   [31:0] sub_ln69_2_fu_866_p2;
reg   [31:0] sub_ln69_2_reg_1443;
wire   [33:0] lhs_V_3_i_fu_871_p1;
reg   [33:0] lhs_V_3_i_reg_1448;
wire   [52:0] zext_ln534_fu_874_p1;
reg   [52:0] zext_ln534_reg_1453;
wire   [31:0] add_ln691_fu_877_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state48_pp0_stage0_iter0;
wire    ap_block_state49_pp0_stage0_iter1;
wire    ap_block_state50_pp0_stage0_iter2;
wire    ap_block_state51_pp0_stage0_iter3;
wire    ap_block_state52_pp0_stage0_iter4;
wire    ap_block_state53_pp0_stage0_iter5;
wire    ap_block_state54_pp0_stage0_iter6;
wire    ap_block_state55_pp0_stage0_iter7;
reg    ap_predicate_op403_readreq_state55;
reg    ap_block_state55_io;
wire    ap_block_state56_pp0_stage0_iter8;
wire    ap_block_state57_pp0_stage0_iter9;
wire    ap_block_state58_pp0_stage0_iter10;
wire    ap_block_state59_pp0_stage0_iter11;
wire    ap_block_state60_pp0_stage0_iter12;
wire    ap_block_state61_pp0_stage0_iter13;
reg    ap_predicate_op410_read_state62;
reg    ap_block_state62_pp0_stage0_iter14;
wire    ap_block_state63_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_2_fu_883_p2;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter1_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter2_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter3_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter4_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter5_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter7_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter8_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter9_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter10_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter11_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter12_reg;
reg   [0:0] icmp_ln878_2_reg_1463_pp0_iter14_reg;
wire  signed [31:0] affine_x_fu_893_p2;
reg  signed [31:0] affine_x_reg_1467;
reg   [9:0] src_V1_addr_reg_1473;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter1_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter2_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter3_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter4_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter5_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter6_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter7_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter8_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter9_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter10_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter11_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter12_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter13_reg;
reg   [9:0] src_V1_addr_reg_1473_pp0_iter14_reg;
wire   [31:0] grp_fu_898_p2;
reg   [31:0] mul_ln69_2_reg_1478;
wire   [31:0] grp_fu_902_p2;
reg   [31:0] mul_ln69_3_reg_1483;
reg  signed [20:0] rhs_reg_1488;
reg  signed [20:0] rhs_reg_1488_pp0_iter4_reg;
reg  signed [20:0] trunc_ln1497_3_reg_1495;
wire   [0:0] or_ln157_2_fu_1010_p2;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter5_reg;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter7_reg;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter8_reg;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter9_reg;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter10_reg;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter11_reg;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter12_reg;
reg   [0:0] or_ln157_2_reg_1502_pp0_iter14_reg;
wire   [33:0] ret_2_fu_1027_p2;
reg   [33:0] ret_2_reg_1511;
wire   [52:0] grp_fu_1019_p2;
reg   [52:0] mul_ln534_reg_1516;
reg   [63:0] src_addr_reg_1521;
reg   [31:0] src_addr_read_reg_1527;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state48;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter15;
reg   [31:0] ap_phi_mux_storemerge27_i_i_phi_fu_287_p4;
reg   [31:0] ap_phi_reg_pp0_iter15_storemerge27_i_i_reg_283;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter2_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter3_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter4_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter6_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter7_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter8_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter9_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter10_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter11_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter12_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter13_storemerge27_i_i_reg_283;
reg   [31:0] ap_phi_reg_pp0_iter14_storemerge27_i_i_reg_283;
wire   [63:0] zext_ln153_fu_888_p1;
wire  signed [63:0] sext_ln324_1_fu_1067_p1;
reg    ap_block_state1;
wire  signed [31:0] p_cast_i_fu_295_p1;
wire  signed [31:0] tmp_9_fu_345_p1;
wire  signed [31:0] shr_i_i_fu_355_p1;
wire   [0:0] icmp_ln878_1_fu_365_p2;
wire   [31:0] add_ln692_1_fu_371_p2;
wire  signed [31:0] tmp_s_fu_385_p1;
wire   [33:0] grp_fu_398_p1;
wire  signed [31:0] shl_ln1497_2_fu_404_p3;
wire   [33:0] grp_fu_415_p1;
wire  signed [31:0] shl_ln1497_3_fu_421_p3;
wire   [33:0] grp_fu_432_p1;
wire  signed [31:0] shl_ln1497_4_fu_438_p3;
wire   [33:0] grp_fu_449_p1;
wire   [0:0] icmp_ln878_fu_455_p2;
wire   [31:0] add_ln692_fu_461_p2;
wire   [31:0] shr_i_i_cast_fu_473_p1;
wire   [31:0] sub_ln69_1_fu_476_p2;
wire   [64:0] sub_ln1364_fu_530_p2;
wire   [25:0] tmp_11_fu_535_p4;
wire  signed [31:0] sext_ln1364_2_fu_545_p1;
wire  signed [31:0] sext_ln1364_3_fu_549_p1;
wire   [31:0] select_ln1364_fu_552_p3;
wire   [31:0] sub_ln1364_1_fu_559_p2;
wire   [64:0] sub_ln1364_2_fu_572_p2;
wire   [25:0] tmp_14_fu_577_p4;
wire  signed [31:0] sext_ln1364_5_fu_587_p1;
wire  signed [31:0] sext_ln1364_6_fu_591_p1;
wire   [31:0] select_ln1364_2_fu_594_p3;
wire   [31:0] sub_ln1364_3_fu_601_p2;
wire   [64:0] sub_ln1364_4_fu_614_p2;
wire   [25:0] tmp_17_fu_619_p4;
wire  signed [31:0] sext_ln1364_8_fu_629_p1;
wire  signed [31:0] sext_ln1364_9_fu_633_p1;
wire   [31:0] select_ln1364_4_fu_636_p3;
wire   [31:0] sub_ln1364_5_fu_643_p2;
wire   [64:0] sub_ln1364_6_fu_656_p2;
wire   [25:0] tmp_20_fu_661_p4;
wire  signed [31:0] sext_ln1364_11_fu_671_p1;
wire  signed [31:0] sext_ln1364_12_fu_675_p1;
wire   [31:0] select_ln1364_6_fu_678_p3;
wire   [31:0] sub_ln1364_7_fu_685_p2;
wire  signed [27:0] grp_fu_716_p0;
wire  signed [27:0] grp_fu_716_p1;
wire  signed [27:0] grp_fu_728_p0;
wire  signed [27:0] grp_fu_728_p1;
wire   [43:0] sub_ln1347_fu_747_p2;
wire   [31:0] grp_fu_761_p0;
wire  signed [31:0] grp_fu_761_p1;
wire   [20:0] sub_ln1497_fu_767_p2;
wire   [32:0] grp_fu_784_p0;
wire  signed [31:0] grp_fu_784_p1;
wire   [20:0] sub_ln1497_1_fu_790_p2;
wire   [32:0] grp_fu_803_p0;
wire  signed [31:0] grp_fu_803_p1;
wire   [31:0] grp_fu_814_p0;
wire  signed [31:0] grp_fu_814_p1;
wire  signed [31:0] grp_fu_827_p1;
wire  signed [31:0] grp_fu_835_p0;
wire   [31:0] r_8_i_fu_847_p3;
wire   [31:0] r_9_i_fu_859_p3;
wire   [31:0] add_ln69_fu_906_p2;
wire   [31:0] rx_fu_910_p2;
wire   [31:0] add_ln69_2_fu_919_p2;
wire   [31:0] ry_V_fu_923_p2;
wire  signed [32:0] sext_ln215_2_fu_915_p1;
wire   [32:0] ret_fu_932_p2;
wire  signed [32:0] sext_ln215_3_fu_928_p1;
wire   [32:0] ret_1_fu_948_p2;
wire  signed [31:0] sext_ln69_fu_964_p1;
wire   [0:0] icmp_ln890_fu_974_p2;
wire   [20:0] or_ln157_fu_970_p2;
wire  signed [31:0] sext_ln69_1_fu_967_p1;
wire   [0:0] icmp_ln890_1_fu_993_p2;
wire   [0:0] xor_ln890_fu_979_p2;
wire   [0:0] xor_ln890_1_fu_998_p2;
wire   [0:0] or_ln157_1_fu_1004_p2;
wire   [0:0] tmp_22_fu_985_p3;
wire   [31:0] grp_fu_1019_p0;
wire  signed [33:0] sext_ln215_4_fu_1024_p1;
wire  signed [52:0] sext_ln534_fu_1032_p1;
wire   [52:0] add_ln324_fu_1035_p2;
wire   [54:0] tmp_1_fu_1040_p3;
wire  signed [63:0] sext_ln324_fu_1048_p1;
wire   [63:0] add_ln324_1_fu_1052_p2;
wire   [61:0] trunc_ln1_fu_1057_p4;
reg    grp_fu_761_ap_start;
wire    grp_fu_761_ap_done;
reg    grp_fu_784_ap_start;
wire    grp_fu_784_ap_done;
reg    grp_fu_803_ap_start;
wire    grp_fu_803_ap_done;
reg    grp_fu_814_ap_start;
wire    grp_fu_814_ap_done;
reg    grp_fu_898_ce;
reg    grp_fu_902_ce;
reg    grp_fu_1019_ce;
wire    ap_CS_fsm_state64;
reg   [48:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 49'd1;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

affine_scale_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln_reg_1146),
    .din1(grp_fu_398_p1),
    .ce(1'b1),
    .dout(grp_fu_398_p2)
);

affine_scale_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln1497_2_fu_404_p3),
    .din1(grp_fu_415_p1),
    .ce(1'b1),
    .dout(grp_fu_415_p2)
);

affine_scale_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln1497_3_fu_421_p3),
    .din1(grp_fu_432_p1),
    .ce(1'b1),
    .dout(grp_fu_432_p2)
);

affine_scale_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln1497_4_fu_438_p3),
    .din1(grp_fu_449_p1),
    .ce(1'b1),
    .dout(grp_fu_449_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(id_read_reg_1121),
    .din1(mapchip_height_V_reg_1115),
    .ce(1'b1),
    .dout(grp_fu_486_p2)
);

affine_scale_mul_28s_28s_44_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 44 ))
mul_28s_28s_44_3_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_716_p0),
    .din1(grp_fu_716_p1),
    .ce(1'b1),
    .dout(grp_fu_716_p2)
);

affine_scale_mul_28s_28s_44_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 44 ))
mul_28s_28s_44_3_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_728_p0),
    .din1(grp_fu_728_p1),
    .ce(1'b1),
    .dout(grp_fu_728_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mapchip_width_V_reg_1082),
    .din1(tmp_i_reg_1304),
    .ce(1'b1),
    .dout(grp_fu_734_p2)
);

affine_scale_sdiv_32ns_32s_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32s_32_36_seq_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_761_ap_start),
    .done(grp_fu_761_ap_done),
    .din0(grp_fu_761_p0),
    .din1(grp_fu_761_p1),
    .ce(1'b1),
    .dout(grp_fu_761_p2)
);

affine_scale_sdiv_33ns_32s_32_37_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 37 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_33ns_32s_32_37_seq_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_784_ap_start),
    .done(grp_fu_784_ap_done),
    .din0(grp_fu_784_p0),
    .din1(grp_fu_784_p1),
    .ce(1'b1),
    .dout(grp_fu_784_p2)
);

affine_scale_sdiv_33ns_32s_32_37_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 37 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_33ns_32s_32_37_seq_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_803_ap_start),
    .done(grp_fu_803_ap_done),
    .din0(grp_fu_803_p0),
    .din1(grp_fu_803_p1),
    .ce(1'b1),
    .dout(grp_fu_803_p2)
);

affine_scale_sdiv_32ns_32s_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32s_32_36_seq_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_814_ap_start),
    .done(grp_fu_814_ap_done),
    .din0(grp_fu_814_p0),
    .din1(grp_fu_814_p1),
    .ce(1'b1),
    .dout(grp_fu_814_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ixa_V_reg_1381),
    .din1(select_ln133_reg_1215),
    .ce(1'b1),
    .dout(grp_fu_820_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp31_i_reg_1221),
    .din1(grp_fu_827_p1),
    .ce(1'b1),
    .dout(grp_fu_827_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_835_p0),
    .din1(select_ln133_reg_1215),
    .ce(1'b1),
    .dout(grp_fu_835_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp31_i_reg_1221),
    .din1(sdiv_ln1364_3_reg_1387),
    .ce(1'b1),
    .dout(grp_fu_840_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(affine_x_reg_1467),
    .din1(ixa_V_reg_1381),
    .ce(grp_fu_898_ce),
    .dout(grp_fu_898_p2)
);

affine_scale_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(affine_x_reg_1467),
    .din1(ixc_V_reg_1407),
    .ce(grp_fu_902_ce),
    .dout(grp_fu_902_p2)
);

affine_scale_mul_32ns_21s_53_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 21 ),
    .dout_WIDTH( 53 ))
mul_32ns_21s_53_2_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1019_p0),
    .din1(trunc_ln1497_3_reg_1495),
    .ce(grp_fu_1019_ce),
    .dout(grp_fu_1019_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state48) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state48)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state48);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((or_ln157_2_fu_1010_p2 == 1'd1) & (icmp_ln878_2_reg_1463_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter4_storemerge27_i_i_reg_283;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        x_V_reg_272 <= 32'd0;
    end else if (((icmp_ln878_2_fu_883_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_reg_272 <= add_ln691_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a_read_reg_1089 <= a_dout;
        b_read_reg_1099 <= b_dout;
        c_read_reg_1094 <= c_dout;
        id_read_reg_1121 <= id_dout;
        m_read_reg_1104 <= m_dout;
        mapchip_draw_xsize_read_reg_1077 <= mapchip_draw_xsize_dout;
        mapchip_height_V_reg_1115 <= mapchip_maxheight_dout;
        mapchip_width_V_reg_1082 <= mapchip_maxwidth_dout;
        p_cast_i_reg_1141 <= {{p_cast_i_fu_295_p1[31:1]}};
        select_ln138_reg_1185 <= select_ln138_fu_377_p3;
        shl_ln_reg_1146[31 : 12] <= shl_ln_fu_305_p3[31 : 12];
        shr_i_i_reg_1180 <= {{shr_i_i_fu_355_p1[31:1]}};
        srcin_read_reg_1136 <= srcin_dout;
        tmp_13_reg_1157 <= a_dout[32'd19];
        tmp_16_reg_1163 <= c_dout[32'd19];
        tmp_19_reg_1169 <= b_dout[32'd19];
        tmp_2_reg_1151 <= d_dout[32'd19];
        tmp_9_reg_1175 <= {{tmp_9_fu_345_p1[20:1]}};
        tmp_s_reg_1190 <= {{tmp_s_fu_385_p1[20:1]}};
        trunc_ln69_read_reg_1110 <= trunc_ln69_dout;
        xstart_pos_read_reg_1131 <= xstart_pos_dout;
        ystart_pos_read_reg_1126 <= ystart_pos_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln208_reg_1344 <= add_ln208_fu_738_p2;
        mul_ln1347_reg_1339 <= grp_fu_728_p2;
        mul_ln215_reg_1334 <= grp_fu_716_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_fu_883_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        affine_x_reg_1467 <= affine_x_fu_893_p2;
        src_V1_addr_reg_1473 <= zext_ln153_fu_888_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter10_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter9_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter11_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter10_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter12_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter11_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter13_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter12_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter14_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter13_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter15_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter14_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter0_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter1_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter2_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter3_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter6_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_phi_reg_pp0_iter8_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter7_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter8_storemerge27_i_i_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln878_2_reg_1463 <= icmp_ln878_2_fu_883_p2;
        icmp_ln878_2_reg_1463_pp0_iter1_reg <= icmp_ln878_2_reg_1463;
        src_V1_addr_reg_1473_pp0_iter1_reg <= src_V1_addr_reg_1473;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln878_2_reg_1463_pp0_iter10_reg <= icmp_ln878_2_reg_1463_pp0_iter9_reg;
        icmp_ln878_2_reg_1463_pp0_iter11_reg <= icmp_ln878_2_reg_1463_pp0_iter10_reg;
        icmp_ln878_2_reg_1463_pp0_iter12_reg <= icmp_ln878_2_reg_1463_pp0_iter11_reg;
        icmp_ln878_2_reg_1463_pp0_iter13_reg <= icmp_ln878_2_reg_1463_pp0_iter12_reg;
        icmp_ln878_2_reg_1463_pp0_iter14_reg <= icmp_ln878_2_reg_1463_pp0_iter13_reg;
        icmp_ln878_2_reg_1463_pp0_iter2_reg <= icmp_ln878_2_reg_1463_pp0_iter1_reg;
        icmp_ln878_2_reg_1463_pp0_iter3_reg <= icmp_ln878_2_reg_1463_pp0_iter2_reg;
        icmp_ln878_2_reg_1463_pp0_iter4_reg <= icmp_ln878_2_reg_1463_pp0_iter3_reg;
        icmp_ln878_2_reg_1463_pp0_iter5_reg <= icmp_ln878_2_reg_1463_pp0_iter4_reg;
        icmp_ln878_2_reg_1463_pp0_iter6_reg <= icmp_ln878_2_reg_1463_pp0_iter5_reg;
        icmp_ln878_2_reg_1463_pp0_iter7_reg <= icmp_ln878_2_reg_1463_pp0_iter6_reg;
        icmp_ln878_2_reg_1463_pp0_iter8_reg <= icmp_ln878_2_reg_1463_pp0_iter7_reg;
        icmp_ln878_2_reg_1463_pp0_iter9_reg <= icmp_ln878_2_reg_1463_pp0_iter8_reg;
        or_ln157_2_reg_1502_pp0_iter10_reg <= or_ln157_2_reg_1502_pp0_iter9_reg;
        or_ln157_2_reg_1502_pp0_iter11_reg <= or_ln157_2_reg_1502_pp0_iter10_reg;
        or_ln157_2_reg_1502_pp0_iter12_reg <= or_ln157_2_reg_1502_pp0_iter11_reg;
        or_ln157_2_reg_1502_pp0_iter13_reg <= or_ln157_2_reg_1502_pp0_iter12_reg;
        or_ln157_2_reg_1502_pp0_iter14_reg <= or_ln157_2_reg_1502_pp0_iter13_reg;
        or_ln157_2_reg_1502_pp0_iter5_reg <= or_ln157_2_reg_1502;
        or_ln157_2_reg_1502_pp0_iter6_reg <= or_ln157_2_reg_1502_pp0_iter5_reg;
        or_ln157_2_reg_1502_pp0_iter7_reg <= or_ln157_2_reg_1502_pp0_iter6_reg;
        or_ln157_2_reg_1502_pp0_iter8_reg <= or_ln157_2_reg_1502_pp0_iter7_reg;
        or_ln157_2_reg_1502_pp0_iter9_reg <= or_ln157_2_reg_1502_pp0_iter8_reg;
        rhs_reg_1488_pp0_iter4_reg <= rhs_reg_1488;
        src_V1_addr_reg_1473_pp0_iter10_reg <= src_V1_addr_reg_1473_pp0_iter9_reg;
        src_V1_addr_reg_1473_pp0_iter11_reg <= src_V1_addr_reg_1473_pp0_iter10_reg;
        src_V1_addr_reg_1473_pp0_iter12_reg <= src_V1_addr_reg_1473_pp0_iter11_reg;
        src_V1_addr_reg_1473_pp0_iter13_reg <= src_V1_addr_reg_1473_pp0_iter12_reg;
        src_V1_addr_reg_1473_pp0_iter14_reg <= src_V1_addr_reg_1473_pp0_iter13_reg;
        src_V1_addr_reg_1473_pp0_iter2_reg <= src_V1_addr_reg_1473_pp0_iter1_reg;
        src_V1_addr_reg_1473_pp0_iter3_reg <= src_V1_addr_reg_1473_pp0_iter2_reg;
        src_V1_addr_reg_1473_pp0_iter4_reg <= src_V1_addr_reg_1473_pp0_iter3_reg;
        src_V1_addr_reg_1473_pp0_iter5_reg <= src_V1_addr_reg_1473_pp0_iter4_reg;
        src_V1_addr_reg_1473_pp0_iter6_reg <= src_V1_addr_reg_1473_pp0_iter5_reg;
        src_V1_addr_reg_1473_pp0_iter7_reg <= src_V1_addr_reg_1473_pp0_iter6_reg;
        src_V1_addr_reg_1473_pp0_iter8_reg <= src_V1_addr_reg_1473_pp0_iter7_reg;
        src_V1_addr_reg_1473_pp0_iter9_reg <= src_V1_addr_reg_1473_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ixa_V_reg_1381 <= grp_fu_761_p2;
        sdiv_ln1364_3_reg_1387 <= grp_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ixc_V_reg_1407 <= ixc_V_fu_832_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        lhs_V_3_i_reg_1448[31 : 0] <= lhs_V_3_i_fu_871_p1[31 : 0];
        shr_i_i_i_reg_1433 <= shr_i_i_i_fu_844_p1;
        sub_ln69_2_reg_1443 <= sub_ln69_2_fu_866_p2;
        sub_ln69_reg_1438 <= sub_ln69_fu_854_p2;
        zext_ln534_reg_1453[31 : 0] <= zext_ln534_fu_874_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln1364_1_reg_1237 <= grp_fu_415_p2;
        mul_ln1364_2_reg_1247 <= grp_fu_432_p2;
        mul_ln1364_3_reg_1257 <= grp_fu_449_p2;
        mul_ln1364_reg_1227 <= grp_fu_398_p2;
        mul_ln208_reg_1267 <= grp_fu_486_p2;
        tmp_15_reg_1242 <= {{grp_fu_415_p2[64:39]}};
        tmp_18_reg_1252 <= {{grp_fu_432_p2[64:39]}};
        tmp_21_reg_1262 <= {{grp_fu_449_p2[64:39]}};
        tmp_reg_1232 <= {{grp_fu_398_p2[64:39]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_reg_1463_pp0_iter4_reg == 1'd0) & (or_ln157_2_reg_1502 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln534_reg_1516 <= grp_fu_1019_p2;
        ret_2_reg_1511 <= ret_2_fu_1027_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        mul_ln69_1_reg_1423 <= grp_fu_835_p2;
        mul_ln69_reg_1413 <= grp_fu_820_p2;
        tmp32_i_reg_1418 <= grp_fu_827_p2;
        tmp34_i_reg_1428 <= grp_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_reg_1463_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln69_2_reg_1478 <= grp_fu_898_p2;
        mul_ln69_3_reg_1483 <= grp_fu_902_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_reg_1463_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln157_2_reg_1502 <= or_ln157_2_fu_1010_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_reg_1463_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rhs_reg_1488 <= {{ret_fu_932_p2[32:12]}};
        trunc_ln1497_3_reg_1495 <= {{ret_1_fu_948_p2[32:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        sdiv_ln1364_1_reg_1392 <= grp_fu_784_p2;
        sdiv_ln1364_2_reg_1397 <= grp_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln133_reg_1215 <= select_ln133_fu_466_p3;
        tmp31_i_reg_1221 <= tmp31_i_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln1364_1_reg_1272 <= select_ln1364_1_fu_565_p3;
        select_ln1364_3_reg_1278 <= select_ln1364_3_fu_607_p3;
        select_ln1364_5_reg_1284 <= select_ln1364_5_fu_649_p3;
        select_ln1364_7_reg_1289 <= select_ln1364_7_fu_691_p3;
        tmp_i_reg_1304 <= tmp_i_fu_706_p2;
        trunc_ln1497_1_reg_1299 <= trunc_ln1497_1_fu_702_p1;
        trunc_ln1497_reg_1294 <= trunc_ln1497_fu_698_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op410_read_state62 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_addr_read_reg_1527 <= m_axi_src_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln157_2_reg_1502_pp0_iter5_reg == 1'd0) & (icmp_ln878_2_reg_1463_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_addr_reg_1521 <= sext_ln324_1_fu_1067_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp30_i_reg_1329 <= grp_fu_734_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_blk_n = a_empty_n;
    end else begin
        a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_read = 1'b1;
    end else begin
        a_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_2_fu_883_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state48 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state48 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln157_2_reg_1502_pp0_iter14_reg == 1'd0) & (icmp_ln878_2_reg_1463_pp0_iter14_reg == 1'd0))) begin
        ap_phi_mux_storemerge27_i_i_phi_fu_287_p4 = src_addr_read_reg_1527;
    end else begin
        ap_phi_mux_storemerge27_i_i_phi_fu_287_p4 = ap_phi_reg_pp0_iter15_storemerge27_i_i_reg_283;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_blk_n = b_empty_n;
    end else begin
        b_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_read = 1'b1;
    end else begin
        b_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_blk_n = c_empty_n;
    end else begin
        c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read = 1'b1;
    end else begin
        c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_blk_n = d_empty_n;
    end else begin
        d_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_read = 1'b1;
    end else begin
        d_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1019_ce = 1'b1;
    end else begin
        grp_fu_1019_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_761_ap_start = 1'b1;
    end else begin
        grp_fu_761_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_784_ap_start = 1'b1;
    end else begin
        grp_fu_784_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_803_ap_start = 1'b1;
    end else begin
        grp_fu_803_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_814_ap_start = 1'b1;
    end else begin
        grp_fu_814_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_898_ce = 1'b1;
    end else begin
        grp_fu_898_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_902_ce = 1'b1;
    end else begin
        grp_fu_902_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        id_blk_n = id_empty_n;
    end else begin
        id_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        id_read = 1'b1;
    end else begin
        id_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op403_readreq_state55 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        m_axi_src_ARVALID = 1'b1;
    end else begin
        m_axi_src_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op410_read_state62 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_src_RREADY = 1'b1;
    end else begin
        m_axi_src_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_blk_n = m_empty_n;
    end else begin
        m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_read = 1'b1;
    end else begin
        m_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_blk_n = mapchip_draw_xsize_empty_n;
    end else begin
        mapchip_draw_xsize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_out_blk_n = mapchip_draw_xsize_out_full_n;
    end else begin
        mapchip_draw_xsize_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_out_write = 1'b1;
    end else begin
        mapchip_draw_xsize_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_read = 1'b1;
    end else begin
        mapchip_draw_xsize_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxheight_blk_n = mapchip_maxheight_empty_n;
    end else begin
        mapchip_maxheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxheight_read = 1'b1;
    end else begin
        mapchip_maxheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxwidth_blk_n = mapchip_maxwidth_empty_n;
    end else begin
        mapchip_maxwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_maxwidth_read = 1'b1;
    end else begin
        mapchip_maxwidth_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_blk_n = n_empty_n;
    end else begin
        n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read = 1'b1;
    end else begin
        n_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V1_ce0 = 1'b1;
    end else begin
        src_V1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln878_2_reg_1463_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V1_we0 = 1'b1;
    end else begin
        src_V1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln157_2_reg_1502_pp0_iter6_reg == 1'd0) & (icmp_ln878_2_reg_1463_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        src_blk_n_AR = m_axi_src_ARREADY;
    end else begin
        src_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln157_2_reg_1502_pp0_iter13_reg == 1'd0) & (icmp_ln878_2_reg_1463_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        src_blk_n_R = m_axi_src_RVALID;
    end else begin
        src_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcin_blk_n = srcin_empty_n;
    end else begin
        srcin_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcin_read = 1'b1;
    end else begin
        srcin_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln69_blk_n = trunc_ln69_empty_n;
    end else begin
        trunc_ln69_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln69_out_blk_n = trunc_ln69_out_full_n;
    end else begin
        trunc_ln69_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln69_out_write = 1'b1;
    end else begin
        trunc_ln69_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln69_read = 1'b1;
    end else begin
        trunc_ln69_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        xstart_pos_blk_n = xstart_pos_empty_n;
    end else begin
        xstart_pos_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        xstart_pos_read = 1'b1;
    end else begin
        xstart_pos_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ystart_pos_blk_n = ystart_pos_empty_n;
    end else begin
        ystart_pos_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ystart_pos_read = 1'b1;
    end else begin
        ystart_pos_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_2_fu_883_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_2_fu_883_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln208_fu_738_p2 = (xstart_pos_read_reg_1131 + tmp30_i_reg_1329);

assign add_ln324_1_fu_1052_p2 = ($signed(srcin_read_reg_1136) + $signed(sext_ln324_fu_1048_p1));

assign add_ln324_fu_1035_p2 = ($signed(mul_ln534_reg_1516) + $signed(sext_ln534_fu_1032_p1));

assign add_ln691_fu_877_p2 = (x_V_reg_272 + 32'd1);

assign add_ln692_1_fu_371_p2 = ($signed(n_dout) + $signed(32'd4294967295));

assign add_ln692_fu_461_p2 = ($signed(m_read_reg_1104) + $signed(32'd4294967295));

assign add_ln69_2_fu_919_p2 = (tmp34_i_reg_1428 + mul_ln69_3_reg_1483);

assign add_ln69_fu_906_p2 = (tmp32_i_reg_1418 + mul_ln69_2_reg_1478);

assign affine_x_fu_893_p2 = ($signed(x_V_reg_272) - $signed(shr_i_i_i_reg_1433));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op410_read_state62 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b1) & (m_axi_src_RVALID == 1'b0)) | ((1'b1 == ap_block_state55_io) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op410_read_state62 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b1) & (m_axi_src_RVALID == 1'b0)) | ((1'b1 == ap_block_state55_io) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((m_empty_n == 1'b0) | (b_empty_n == 1'b0) | (c_empty_n == 1'b0) | (d_empty_n == 1'b0) | (mapchip_maxwidth_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == a_empty_n) | (trunc_ln69_out_full_n == 1'b0) | (mapchip_draw_xsize_out_full_n == 1'b0) | (srcin_empty_n == 1'b0) | (xstart_pos_empty_n == 1'b0) | (ystart_pos_empty_n == 1'b0) | (id_empty_n == 1'b0) | (n_empty_n == 1'b0) | (mapchip_maxheight_empty_n == 1'b0) | (trunc_ln69_empty_n == 1'b0));
end

assign ap_block_state48_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state55_io = ((ap_predicate_op403_readreq_state55 == 1'b1) & (m_axi_src_ARREADY == 1'b0));
end

assign ap_block_state55_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state62_pp0_stage0_iter14 = ((ap_predicate_op410_read_state62 == 1'b1) & (m_axi_src_RVALID == 1'b0));
end

assign ap_block_state63_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge27_i_i_reg_283 = 'bx;

always @ (*) begin
    ap_predicate_op403_readreq_state55 = ((or_ln157_2_reg_1502_pp0_iter6_reg == 1'd0) & (icmp_ln878_2_reg_1463_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op410_read_state62 = ((or_ln157_2_reg_1502_pp0_iter13_reg == 1'd0) & (icmp_ln878_2_reg_1463_pp0_iter13_reg == 1'd0));
end

assign grp_fu_1019_p0 = zext_ln534_reg_1453;

assign grp_fu_398_p1 = 65'd5497558139;

assign grp_fu_415_p1 = 65'd5497558139;

assign grp_fu_432_p1 = 65'd5497558139;

assign grp_fu_449_p1 = 65'd5497558139;

assign grp_fu_716_p0 = select_ln1364_1_reg_1272;

assign grp_fu_716_p1 = select_ln1364_3_reg_1278;

assign grp_fu_728_p0 = select_ln1364_5_reg_1284;

assign grp_fu_728_p1 = select_ln1364_7_reg_1289;

assign grp_fu_761_p0 = select_ln1364_1_reg_1272 << 32'd12;

assign grp_fu_761_p1 = {{sub_ln1347_fu_747_p2[43:12]}};

assign grp_fu_784_p0 = {{sub_ln1497_fu_767_p2}, {12'd0}};

assign grp_fu_784_p1 = sext_ln1364_fu_780_p1;

assign grp_fu_803_p0 = {{sub_ln1497_1_fu_790_p2}, {12'd0}};

assign grp_fu_803_p1 = sext_ln1364_fu_780_p1;

assign grp_fu_814_p0 = select_ln1364_3_reg_1278 << 32'd12;

assign grp_fu_814_p1 = {{sub_ln1347_fu_747_p2[43:12]}};

assign grp_fu_827_p1 = sdiv_ln1364_1_reg_1392[31:0];

assign grp_fu_835_p0 = sdiv_ln1364_2_reg_1397[31:0];

assign icmp_ln878_1_fu_365_p2 = (($signed(shl_ln_fu_305_p3) < $signed(32'd4294967197)) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_883_p2 = ((x_V_reg_272 == mapchip_draw_xsize_read_reg_1077) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_455_p2 = (($signed(shl_ln1497_2_fu_404_p3) < $signed(32'd4294967197)) ? 1'b1 : 1'b0);

assign icmp_ln890_1_fu_993_p2 = ((sext_ln69_1_fu_967_p1 < mapchip_height_V_reg_1115) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_974_p2 = ((sext_ln69_fu_964_p1 < mapchip_width_V_reg_1082) ? 1'b1 : 1'b0);

assign ixc_V_fu_832_p1 = sdiv_ln1364_2_reg_1397[31:0];

assign lhs_V_3_i_fu_871_p1 = add_ln208_reg_1344;

assign m_axi_src_ARADDR = src_addr_reg_1521;

assign m_axi_src_ARBURST = 2'd0;

assign m_axi_src_ARCACHE = 4'd0;

assign m_axi_src_ARID = 1'd0;

assign m_axi_src_ARLEN = 32'd1;

assign m_axi_src_ARLOCK = 2'd0;

assign m_axi_src_ARPROT = 3'd0;

assign m_axi_src_ARQOS = 4'd0;

assign m_axi_src_ARREGION = 4'd0;

assign m_axi_src_ARSIZE = 3'd0;

assign m_axi_src_ARUSER = 1'd0;

assign m_axi_src_AWADDR = 64'd0;

assign m_axi_src_AWBURST = 2'd0;

assign m_axi_src_AWCACHE = 4'd0;

assign m_axi_src_AWID = 1'd0;

assign m_axi_src_AWLEN = 32'd0;

assign m_axi_src_AWLOCK = 2'd0;

assign m_axi_src_AWPROT = 3'd0;

assign m_axi_src_AWQOS = 4'd0;

assign m_axi_src_AWREGION = 4'd0;

assign m_axi_src_AWSIZE = 3'd0;

assign m_axi_src_AWUSER = 1'd0;

assign m_axi_src_AWVALID = 1'b0;

assign m_axi_src_BREADY = 1'b0;

assign m_axi_src_WDATA = 32'd0;

assign m_axi_src_WID = 1'd0;

assign m_axi_src_WLAST = 1'b0;

assign m_axi_src_WSTRB = 4'd0;

assign m_axi_src_WUSER = 1'd0;

assign m_axi_src_WVALID = 1'b0;

assign mapchip_draw_xsize_out_din = mapchip_draw_xsize_dout;

assign or_ln157_1_fu_1004_p2 = (xor_ln890_fu_979_p2 | xor_ln890_1_fu_998_p2);

assign or_ln157_2_fu_1010_p2 = (tmp_22_fu_985_p3 | or_ln157_1_fu_1004_p2);

assign or_ln157_fu_970_p2 = (trunc_ln1497_3_reg_1495 | rhs_reg_1488);

assign p_cast_i_fu_295_p1 = mapchip_maxwidth_dout;

assign r_8_i_fu_847_p3 = {{tmp_9_reg_1175}, {12'd0}};

assign r_9_i_fu_859_p3 = {{tmp_s_reg_1190}, {12'd0}};

assign ret_1_fu_948_p2 = ($signed(sext_ln215_3_fu_928_p1) + $signed(33'd2048));

assign ret_2_fu_1027_p2 = ($signed(lhs_V_3_i_reg_1448) + $signed(sext_ln215_4_fu_1024_p1));

assign ret_fu_932_p2 = ($signed(sext_ln215_2_fu_915_p1) + $signed(33'd2048));

assign rx_fu_910_p2 = (add_ln69_fu_906_p2 + sub_ln69_reg_1438);

assign ry_V_fu_923_p2 = (add_ln69_2_fu_919_p2 + sub_ln69_2_reg_1443);

assign select_ln133_fu_466_p3 = ((icmp_ln878_fu_455_p2[0:0] == 1'b1) ? add_ln692_fu_461_p2 : m_read_reg_1104);

assign select_ln1364_1_fu_565_p3 = ((tmp_2_reg_1151[0:0] == 1'b1) ? sub_ln1364_1_fu_559_p2 : sext_ln1364_3_fu_549_p1);

assign select_ln1364_2_fu_594_p3 = ((tmp_13_reg_1157[0:0] == 1'b1) ? sext_ln1364_5_fu_587_p1 : sext_ln1364_6_fu_591_p1);

assign select_ln1364_3_fu_607_p3 = ((tmp_13_reg_1157[0:0] == 1'b1) ? sub_ln1364_3_fu_601_p2 : sext_ln1364_6_fu_591_p1);

assign select_ln1364_4_fu_636_p3 = ((tmp_16_reg_1163[0:0] == 1'b1) ? sext_ln1364_8_fu_629_p1 : sext_ln1364_9_fu_633_p1);

assign select_ln1364_5_fu_649_p3 = ((tmp_16_reg_1163[0:0] == 1'b1) ? sub_ln1364_5_fu_643_p2 : sext_ln1364_9_fu_633_p1);

assign select_ln1364_6_fu_678_p3 = ((tmp_19_reg_1169[0:0] == 1'b1) ? sext_ln1364_11_fu_671_p1 : sext_ln1364_12_fu_675_p1);

assign select_ln1364_7_fu_691_p3 = ((tmp_19_reg_1169[0:0] == 1'b1) ? sub_ln1364_7_fu_685_p2 : sext_ln1364_12_fu_675_p1);

assign select_ln1364_fu_552_p3 = ((tmp_2_reg_1151[0:0] == 1'b1) ? sext_ln1364_2_fu_545_p1 : sext_ln1364_3_fu_549_p1);

assign select_ln138_fu_377_p3 = ((icmp_ln878_1_fu_365_p2[0:0] == 1'b1) ? add_ln692_1_fu_371_p2 : n_dout);

assign sext_ln1364_11_fu_671_p1 = $signed(tmp_20_fu_661_p4);

assign sext_ln1364_12_fu_675_p1 = $signed(tmp_21_reg_1262);

assign sext_ln1364_2_fu_545_p1 = $signed(tmp_11_fu_535_p4);

assign sext_ln1364_3_fu_549_p1 = $signed(tmp_reg_1232);

assign sext_ln1364_5_fu_587_p1 = $signed(tmp_14_fu_577_p4);

assign sext_ln1364_6_fu_591_p1 = $signed(tmp_15_reg_1242);

assign sext_ln1364_8_fu_629_p1 = $signed(tmp_17_fu_619_p4);

assign sext_ln1364_9_fu_633_p1 = $signed(tmp_18_reg_1252);

assign sext_ln1364_fu_780_p1 = trunc_ln69_1_fu_751_p4;

assign sext_ln215_2_fu_915_p1 = $signed(rx_fu_910_p2);

assign sext_ln215_3_fu_928_p1 = $signed(ry_V_fu_923_p2);

assign sext_ln215_4_fu_1024_p1 = rhs_reg_1488_pp0_iter4_reg;

assign sext_ln324_1_fu_1067_p1 = $signed(trunc_ln1_fu_1057_p4);

assign sext_ln324_fu_1048_p1 = $signed(tmp_1_fu_1040_p3);

assign sext_ln534_fu_1032_p1 = $signed(ret_2_reg_1511);

assign sext_ln69_1_fu_967_p1 = trunc_ln1497_3_reg_1495;

assign sext_ln69_fu_964_p1 = rhs_reg_1488;

assign shl_ln1497_2_fu_404_p3 = {{a_read_reg_1089}, {12'd0}};

assign shl_ln1497_3_fu_421_p3 = {{c_read_reg_1094}, {12'd0}};

assign shl_ln1497_4_fu_438_p3 = {{b_read_reg_1099}, {12'd0}};

assign shl_ln_fu_305_p3 = {{d_dout}, {12'd0}};

assign shr_i_i_cast_fu_473_p1 = shr_i_i_reg_1180;

assign shr_i_i_fu_355_p1 = mapchip_maxheight_dout;

assign shr_i_i_i_fu_844_p1 = $signed(p_cast_i_reg_1141);

assign src_V1_address0 = src_V1_addr_reg_1473_pp0_iter14_reg;

assign src_V1_d0 = ap_phi_mux_storemerge27_i_i_phi_fu_287_p4;

assign sub_ln1347_fu_747_p2 = (mul_ln215_reg_1334 - mul_ln1347_reg_1339);

assign sub_ln1364_1_fu_559_p2 = (32'd0 - select_ln1364_fu_552_p3);

assign sub_ln1364_2_fu_572_p2 = (65'd0 - mul_ln1364_1_reg_1237);

assign sub_ln1364_3_fu_601_p2 = (32'd0 - select_ln1364_2_fu_594_p3);

assign sub_ln1364_4_fu_614_p2 = (65'd0 - mul_ln1364_2_reg_1247);

assign sub_ln1364_5_fu_643_p2 = (32'd0 - select_ln1364_4_fu_636_p3);

assign sub_ln1364_6_fu_656_p2 = (65'd0 - mul_ln1364_3_reg_1257);

assign sub_ln1364_7_fu_685_p2 = (32'd0 - select_ln1364_6_fu_678_p3);

assign sub_ln1364_fu_530_p2 = (65'd0 - mul_ln1364_reg_1227);

assign sub_ln1497_1_fu_790_p2 = (21'd0 - trunc_ln1497_1_reg_1299);

assign sub_ln1497_fu_767_p2 = (21'd0 - trunc_ln1497_reg_1294);

assign sub_ln69_1_fu_476_p2 = (trunc_ln69_read_reg_1110 - shr_i_i_cast_fu_473_p1);

assign sub_ln69_2_fu_866_p2 = (r_9_i_fu_859_p3 - mul_ln69_1_reg_1423);

assign sub_ln69_fu_854_p2 = (r_8_i_fu_847_p3 - mul_ln69_reg_1413);

assign tmp31_i_fu_481_p2 = (sub_ln69_1_fu_476_p2 + select_ln138_reg_1185);

assign tmp_11_fu_535_p4 = {{sub_ln1364_fu_530_p2[64:39]}};

assign tmp_14_fu_577_p4 = {{sub_ln1364_2_fu_572_p2[64:39]}};

assign tmp_17_fu_619_p4 = {{sub_ln1364_4_fu_614_p2[64:39]}};

assign tmp_1_fu_1040_p3 = {{add_ln324_fu_1035_p2}, {2'd0}};

assign tmp_20_fu_661_p4 = {{sub_ln1364_6_fu_656_p2[64:39]}};

assign tmp_22_fu_985_p3 = or_ln157_fu_970_p2[32'd20];

assign tmp_9_fu_345_p1 = mapchip_maxwidth_dout;

assign tmp_i_fu_706_p2 = (ystart_pos_read_reg_1126 + mul_ln208_reg_1267);

assign tmp_s_fu_385_p1 = mapchip_maxheight_dout;

assign trunc_ln1497_1_fu_702_p1 = select_ln1364_5_fu_649_p3[20:0];

assign trunc_ln1497_fu_698_p1 = select_ln1364_7_fu_691_p3[20:0];

assign trunc_ln1_fu_1057_p4 = {{add_ln324_1_fu_1052_p2[63:2]}};

assign trunc_ln69_1_fu_751_p4 = {{sub_ln1347_fu_747_p2[43:12]}};

assign trunc_ln69_out_din = trunc_ln69_dout;

assign xor_ln890_1_fu_998_p2 = (icmp_ln890_1_fu_993_p2 ^ 1'd1);

assign xor_ln890_fu_979_p2 = (icmp_ln890_fu_974_p2 ^ 1'd1);

assign zext_ln153_fu_888_p1 = x_V_reg_272;

assign zext_ln534_fu_874_p1 = $unsigned(mapchip_width_V_reg_1082);

always @ (posedge ap_clk) begin
    shl_ln_reg_1146[11:0] <= 12'b000000000000;
    lhs_V_3_i_reg_1448[33:32] <= 2'b00;
    zext_ln534_reg_1453[52:32] <= 21'b000000000000000000000;
end

endmodule //affine_scale_src_loop_proc
