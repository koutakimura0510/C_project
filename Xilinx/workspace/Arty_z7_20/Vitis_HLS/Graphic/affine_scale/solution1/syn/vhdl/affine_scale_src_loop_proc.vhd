-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity affine_scale_src_loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mapchip_draw_xsize_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapchip_draw_xsize_empty_n : IN STD_LOGIC;
    mapchip_draw_xsize_read : OUT STD_LOGIC;
    mapchip_maxwidth_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapchip_maxwidth_empty_n : IN STD_LOGIC;
    mapchip_maxwidth_read : OUT STD_LOGIC;
    d_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    d_empty_n : IN STD_LOGIC;
    d_read : OUT STD_LOGIC;
    a_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    a_empty_n : IN STD_LOGIC;
    a_read : OUT STD_LOGIC;
    c_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    c_empty_n : IN STD_LOGIC;
    c_read : OUT STD_LOGIC;
    b_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    b_empty_n : IN STD_LOGIC;
    b_read : OUT STD_LOGIC;
    m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    m_empty_n : IN STD_LOGIC;
    m_read : OUT STD_LOGIC;
    trunc_ln69_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln69_empty_n : IN STD_LOGIC;
    trunc_ln69_read : OUT STD_LOGIC;
    mapchip_maxheight_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapchip_maxheight_empty_n : IN STD_LOGIC;
    mapchip_maxheight_read : OUT STD_LOGIC;
    n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    n_empty_n : IN STD_LOGIC;
    n_read : OUT STD_LOGIC;
    src_V1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_V1_ce0 : OUT STD_LOGIC;
    src_V1_we0 : OUT STD_LOGIC;
    src_V1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    id_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    id_empty_n : IN STD_LOGIC;
    id_read : OUT STD_LOGIC;
    ystart_pos_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ystart_pos_empty_n : IN STD_LOGIC;
    ystart_pos_read : OUT STD_LOGIC;
    xstart_pos_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    xstart_pos_empty_n : IN STD_LOGIC;
    xstart_pos_read : OUT STD_LOGIC;
    srcin_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    srcin_empty_n : IN STD_LOGIC;
    srcin_read : OUT STD_LOGIC;
    m_axi_src_AWVALID : OUT STD_LOGIC;
    m_axi_src_AWREADY : IN STD_LOGIC;
    m_axi_src_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_src_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_WVALID : OUT STD_LOGIC;
    m_axi_src_WREADY : IN STD_LOGIC;
    m_axi_src_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_WLAST : OUT STD_LOGIC;
    m_axi_src_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_ARVALID : OUT STD_LOGIC;
    m_axi_src_ARREADY : IN STD_LOGIC;
    m_axi_src_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_src_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RVALID : IN STD_LOGIC;
    m_axi_src_RREADY : OUT STD_LOGIC;
    m_axi_src_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_RLAST : IN STD_LOGIC;
    m_axi_src_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BVALID : IN STD_LOGIC;
    m_axi_src_BREADY : OUT STD_LOGIC;
    m_axi_src_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mapchip_draw_xsize_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mapchip_draw_xsize_out_full_n : IN STD_LOGIC;
    mapchip_draw_xsize_out_write : OUT STD_LOGIC;
    trunc_ln69_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln69_out_full_n : IN STD_LOGIC;
    trunc_ln69_out_write : OUT STD_LOGIC );
end;


architecture behav of affine_scale_src_loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (48 downto 0) := "0000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (48 downto 0) := "0000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (48 downto 0) := "0000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (48 downto 0) := "0000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (48 downto 0) := "0000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (48 downto 0) := "0000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (48 downto 0) := "0001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (48 downto 0) := "0010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (48 downto 0) := "0100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (48 downto 0) := "1000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_FFFFFF9D : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110011101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv33_800 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mapchip_draw_xsize_blk_n : STD_LOGIC;
    signal mapchip_maxwidth_blk_n : STD_LOGIC;
    signal d_blk_n : STD_LOGIC;
    signal a_blk_n : STD_LOGIC;
    signal c_blk_n : STD_LOGIC;
    signal b_blk_n : STD_LOGIC;
    signal m_blk_n : STD_LOGIC;
    signal trunc_ln69_blk_n : STD_LOGIC;
    signal mapchip_maxheight_blk_n : STD_LOGIC;
    signal n_blk_n : STD_LOGIC;
    signal id_blk_n : STD_LOGIC;
    signal ystart_pos_blk_n : STD_LOGIC;
    signal xstart_pos_blk_n : STD_LOGIC;
    signal srcin_blk_n : STD_LOGIC;
    signal src_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln878_2_reg_1463 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal src_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal icmp_ln878_2_reg_1463_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mapchip_draw_xsize_out_blk_n : STD_LOGIC;
    signal trunc_ln69_out_blk_n : STD_LOGIC;
    signal x_V_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_draw_xsize_read_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_width_V_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_read_reg_1089 : STD_LOGIC_VECTOR (19 downto 0);
    signal c_read_reg_1094 : STD_LOGIC_VECTOR (19 downto 0);
    signal b_read_reg_1099 : STD_LOGIC_VECTOR (19 downto 0);
    signal m_read_reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_read_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_height_V_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_read_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ystart_pos_read_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal xstart_pos_read_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcin_read_reg_1136 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_i_reg_1141 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1175 : STD_LOGIC_VECTOR (19 downto 0);
    signal shr_i_i_reg_1180 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln138_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1190 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln133_fu_466_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln133_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp31_i_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp31_i_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1364_reg_1227 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_reg_1232 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1364_1_reg_1237 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_15_reg_1242 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1364_2_reg_1247 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_18_reg_1252 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1364_3_reg_1257 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_21_reg_1262 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln208_reg_1267 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_1_fu_565_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_1_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln1364_3_fu_607_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_3_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_5_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_5_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_7_fu_691_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_7_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1497_fu_698_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1497_reg_1294 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1497_1_fu_702_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1497_1_reg_1299 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_i_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp30_i_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_716_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln215_reg_1334 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_728_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln1347_reg_1339 : STD_LOGIC_VECTOR (43 downto 0);
    signal add_ln208_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln208_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln69_1_fu_751_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1364_fu_780_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ixa_V_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sdiv_ln1364_3_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sdiv_ln1364_1_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sdiv_ln1364_2_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ixc_V_fu_832_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ixc_V_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln69_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_827_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_i_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln69_1_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp34_i_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal shr_i_i_i_fu_844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shr_i_i_i_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal sub_ln69_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_reg_1438 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_2_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_2_reg_1443 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_3_i_fu_871_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal lhs_V_3_i_reg_1448 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln534_fu_874_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln534_reg_1453 : STD_LOGIC_VECTOR (52 downto 0);
    signal add_ln691_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state48_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter7 : BOOLEAN;
    signal ap_predicate_op403_readreq_state55 : BOOLEAN;
    signal ap_block_state55_io : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter13 : BOOLEAN;
    signal ap_predicate_op410_read_state62 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln878_2_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_2_reg_1463_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal affine_x_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal affine_x_reg_1467 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V1_addr_reg_1473 : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal src_V1_addr_reg_1473_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_898_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln69_2_reg_1478 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_902_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln69_3_reg_1483 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_reg_1488 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_reg_1488_pp0_iter4_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1497_3_reg_1495 : STD_LOGIC_VECTOR (20 downto 0);
    signal or_ln157_2_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_2_reg_1502_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_2_fu_1027_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_2_reg_1511 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_1019_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal mul_ln534_reg_1516 : STD_LOGIC_VECTOR (52 downto 0);
    signal src_addr_reg_1521 : STD_LOGIC_VECTOR (63 downto 0);
    signal src_addr_read_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state48 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_phi_mux_storemerge27_i_i_phi_fu_287_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_storemerge27_i_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln153_fu_888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln324_1_fu_1067_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_cast_i_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shr_i_i_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln878_1_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln692_1_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln1497_2_fu_404_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_415_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln1497_3_fu_421_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_432_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln1497_4_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln878_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln692_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shr_i_i_cast_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_1_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1364_fu_530_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_11_fu_535_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1364_2_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1364_3_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_fu_552_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1364_1_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1364_2_fu_572_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_14_fu_577_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1364_5_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1364_6_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_2_fu_594_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1364_3_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1364_4_fu_614_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_17_fu_619_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1364_8_fu_629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1364_9_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_4_fu_636_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1364_5_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1364_6_fu_656_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_20_fu_661_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1364_11_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1364_12_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1364_6_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1364_7_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_716_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_716_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_728_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_728_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln1347_fu_747_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1497_fu_767_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_784_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_784_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1497_1_fu_790_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_803_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_814_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_814_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_827_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_835_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_8_i_fu_847_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_9_i_fu_859_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rx_fu_910_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_2_fu_919_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ry_V_fu_923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_2_fu_915_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_fu_932_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_3_fu_928_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_1_fu_948_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln69_fu_964_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln890_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_fu_970_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln69_1_fu_967_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln890_1_fu_993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln890_1_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln157_1_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_985_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1019_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_4_fu_1024_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln534_fu_1032_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal add_ln324_fu_1035_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_1_fu_1040_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln324_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln324_1_fu_1052_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_1057_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_761_ap_start : STD_LOGIC;
    signal grp_fu_761_ap_done : STD_LOGIC;
    signal grp_fu_784_ap_start : STD_LOGIC;
    signal grp_fu_784_ap_done : STD_LOGIC;
    signal grp_fu_803_ap_start : STD_LOGIC;
    signal grp_fu_803_ap_done : STD_LOGIC;
    signal grp_fu_814_ap_start : STD_LOGIC;
    signal grp_fu_814_ap_done : STD_LOGIC;
    signal grp_fu_898_ce : STD_LOGIC;
    signal grp_fu_902_ce : STD_LOGIC;
    signal grp_fu_1019_ce : STD_LOGIC;
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component affine_scale_mul_32s_34ns_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component affine_scale_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component affine_scale_mul_28s_28s_44_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component affine_scale_sdiv_32ns_32s_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component affine_scale_sdiv_33ns_32s_32_37_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component affine_scale_mul_32ns_21s_53_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;



begin
    mul_32s_34ns_65_2_1_U48 : component affine_scale_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln_reg_1146,
        din1 => grp_fu_398_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_398_p2);

    mul_32s_34ns_65_2_1_U49 : component affine_scale_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln1497_2_fu_404_p3,
        din1 => grp_fu_415_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_415_p2);

    mul_32s_34ns_65_2_1_U50 : component affine_scale_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln1497_3_fu_421_p3,
        din1 => grp_fu_432_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_432_p2);

    mul_32s_34ns_65_2_1_U51 : component affine_scale_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln1497_4_fu_438_p3,
        din1 => grp_fu_449_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p2);

    mul_32s_32s_32_2_1_U52 : component affine_scale_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => id_read_reg_1121,
        din1 => mapchip_height_V_reg_1115,
        ce => ap_const_logic_1,
        dout => grp_fu_486_p2);

    mul_28s_28s_44_3_1_U53 : component affine_scale_mul_28s_28s_44_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_716_p0,
        din1 => grp_fu_716_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_716_p2);

    mul_28s_28s_44_3_1_U54 : component affine_scale_mul_28s_28s_44_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_728_p0,
        din1 => grp_fu_728_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_728_p2);

    mul_32s_32s_32_2_1_U55 : component affine_scale_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mapchip_width_V_reg_1082,
        din1 => tmp_i_reg_1304,
        ce => ap_const_logic_1,
        dout => grp_fu_734_p2);

    sdiv_32ns_32s_32_36_seq_1_U56 : component affine_scale_sdiv_32ns_32s_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_761_ap_start,
        done => grp_fu_761_ap_done,
        din0 => grp_fu_761_p0,
        din1 => grp_fu_761_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_761_p2);

    sdiv_33ns_32s_32_37_seq_1_U57 : component affine_scale_sdiv_33ns_32s_32_37_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 37,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_784_ap_start,
        done => grp_fu_784_ap_done,
        din0 => grp_fu_784_p0,
        din1 => grp_fu_784_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_784_p2);

    sdiv_33ns_32s_32_37_seq_1_U58 : component affine_scale_sdiv_33ns_32s_32_37_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 37,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_803_ap_start,
        done => grp_fu_803_ap_done,
        din0 => grp_fu_803_p0,
        din1 => grp_fu_803_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_803_p2);

    sdiv_32ns_32s_32_36_seq_1_U59 : component affine_scale_sdiv_32ns_32s_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_814_ap_start,
        done => grp_fu_814_ap_done,
        din0 => grp_fu_814_p0,
        din1 => grp_fu_814_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_814_p2);

    mul_32s_32s_32_2_1_U60 : component affine_scale_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ixa_V_reg_1381,
        din1 => select_ln133_reg_1215,
        ce => ap_const_logic_1,
        dout => grp_fu_820_p2);

    mul_32s_32s_32_2_1_U61 : component affine_scale_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp31_i_reg_1221,
        din1 => grp_fu_827_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_827_p2);

    mul_32s_32s_32_2_1_U62 : component affine_scale_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_835_p0,
        din1 => select_ln133_reg_1215,
        ce => ap_const_logic_1,
        dout => grp_fu_835_p2);

    mul_32s_32s_32_2_1_U63 : component affine_scale_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp31_i_reg_1221,
        din1 => sdiv_ln1364_3_reg_1387,
        ce => ap_const_logic_1,
        dout => grp_fu_840_p2);

    mul_32s_32s_32_2_1_U64 : component affine_scale_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => affine_x_reg_1467,
        din1 => ixa_V_reg_1381,
        ce => grp_fu_898_ce,
        dout => grp_fu_898_p2);

    mul_32s_32s_32_2_1_U65 : component affine_scale_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => affine_x_reg_1467,
        din1 => ixc_V_reg_1407,
        ce => grp_fu_902_ce,
        dout => grp_fu_902_p2);

    mul_32ns_21s_53_2_1_U66 : component affine_scale_mul_32ns_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1019_p0,
        din1 => trunc_ln1497_3_reg_1495,
        ce => grp_fu_1019_ce,
        dout => grp_fu_1019_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state48) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state48)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state48);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((or_ln157_2_fu_1010_p2 = ap_const_lv1_1) and (icmp_ln878_2_reg_1463_pp0_iter3_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter4_storemerge27_i_i_reg_283;
                end if;
            end if; 
        end if;
    end process;

    x_V_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                x_V_reg_272 <= ap_const_lv32_0;
            elsif (((icmp_ln878_2_fu_883_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_V_reg_272 <= add_ln691_fu_877_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                a_read_reg_1089 <= a_dout;
                b_read_reg_1099 <= b_dout;
                c_read_reg_1094 <= c_dout;
                id_read_reg_1121 <= id_dout;
                m_read_reg_1104 <= m_dout;
                mapchip_draw_xsize_read_reg_1077 <= mapchip_draw_xsize_dout;
                mapchip_height_V_reg_1115 <= mapchip_maxheight_dout;
                mapchip_width_V_reg_1082 <= mapchip_maxwidth_dout;
                p_cast_i_reg_1141 <= p_cast_i_fu_295_p1(31 downto 1);
                select_ln138_reg_1185 <= select_ln138_fu_377_p3;
                    shl_ln_reg_1146(31 downto 12) <= shl_ln_fu_305_p3(31 downto 12);
                shr_i_i_reg_1180 <= shr_i_i_fu_355_p1(31 downto 1);
                srcin_read_reg_1136 <= srcin_dout;
                tmp_13_reg_1157 <= a_dout(19 downto 19);
                tmp_16_reg_1163 <= c_dout(19 downto 19);
                tmp_19_reg_1169 <= b_dout(19 downto 19);
                tmp_2_reg_1151 <= d_dout(19 downto 19);
                tmp_9_reg_1175 <= tmp_9_fu_345_p1(20 downto 1);
                tmp_s_reg_1190 <= tmp_s_fu_385_p1(20 downto 1);
                trunc_ln69_read_reg_1110 <= trunc_ln69_dout;
                xstart_pos_read_reg_1131 <= xstart_pos_dout;
                ystart_pos_read_reg_1126 <= ystart_pos_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln208_reg_1344 <= add_ln208_fu_738_p2;
                mul_ln1347_reg_1339 <= grp_fu_728_p2;
                mul_ln215_reg_1334 <= grp_fu_716_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_2_fu_883_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                affine_x_reg_1467 <= affine_x_fu_893_p2;
                src_V1_addr_reg_1473 <= zext_ln153_fu_888_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter9_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter10_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter11_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter12_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter13_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter14_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter0_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter1_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter2_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter3_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter5_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter6_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter8_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter7_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_storemerge27_i_i_reg_283 <= ap_phi_reg_pp0_iter8_storemerge27_i_i_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln878_2_reg_1463 <= icmp_ln878_2_fu_883_p2;
                icmp_ln878_2_reg_1463_pp0_iter1_reg <= icmp_ln878_2_reg_1463;
                src_V1_addr_reg_1473_pp0_iter1_reg <= src_V1_addr_reg_1473;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln878_2_reg_1463_pp0_iter10_reg <= icmp_ln878_2_reg_1463_pp0_iter9_reg;
                icmp_ln878_2_reg_1463_pp0_iter11_reg <= icmp_ln878_2_reg_1463_pp0_iter10_reg;
                icmp_ln878_2_reg_1463_pp0_iter12_reg <= icmp_ln878_2_reg_1463_pp0_iter11_reg;
                icmp_ln878_2_reg_1463_pp0_iter13_reg <= icmp_ln878_2_reg_1463_pp0_iter12_reg;
                icmp_ln878_2_reg_1463_pp0_iter14_reg <= icmp_ln878_2_reg_1463_pp0_iter13_reg;
                icmp_ln878_2_reg_1463_pp0_iter2_reg <= icmp_ln878_2_reg_1463_pp0_iter1_reg;
                icmp_ln878_2_reg_1463_pp0_iter3_reg <= icmp_ln878_2_reg_1463_pp0_iter2_reg;
                icmp_ln878_2_reg_1463_pp0_iter4_reg <= icmp_ln878_2_reg_1463_pp0_iter3_reg;
                icmp_ln878_2_reg_1463_pp0_iter5_reg <= icmp_ln878_2_reg_1463_pp0_iter4_reg;
                icmp_ln878_2_reg_1463_pp0_iter6_reg <= icmp_ln878_2_reg_1463_pp0_iter5_reg;
                icmp_ln878_2_reg_1463_pp0_iter7_reg <= icmp_ln878_2_reg_1463_pp0_iter6_reg;
                icmp_ln878_2_reg_1463_pp0_iter8_reg <= icmp_ln878_2_reg_1463_pp0_iter7_reg;
                icmp_ln878_2_reg_1463_pp0_iter9_reg <= icmp_ln878_2_reg_1463_pp0_iter8_reg;
                or_ln157_2_reg_1502_pp0_iter10_reg <= or_ln157_2_reg_1502_pp0_iter9_reg;
                or_ln157_2_reg_1502_pp0_iter11_reg <= or_ln157_2_reg_1502_pp0_iter10_reg;
                or_ln157_2_reg_1502_pp0_iter12_reg <= or_ln157_2_reg_1502_pp0_iter11_reg;
                or_ln157_2_reg_1502_pp0_iter13_reg <= or_ln157_2_reg_1502_pp0_iter12_reg;
                or_ln157_2_reg_1502_pp0_iter14_reg <= or_ln157_2_reg_1502_pp0_iter13_reg;
                or_ln157_2_reg_1502_pp0_iter5_reg <= or_ln157_2_reg_1502;
                or_ln157_2_reg_1502_pp0_iter6_reg <= or_ln157_2_reg_1502_pp0_iter5_reg;
                or_ln157_2_reg_1502_pp0_iter7_reg <= or_ln157_2_reg_1502_pp0_iter6_reg;
                or_ln157_2_reg_1502_pp0_iter8_reg <= or_ln157_2_reg_1502_pp0_iter7_reg;
                or_ln157_2_reg_1502_pp0_iter9_reg <= or_ln157_2_reg_1502_pp0_iter8_reg;
                rhs_reg_1488_pp0_iter4_reg <= rhs_reg_1488;
                src_V1_addr_reg_1473_pp0_iter10_reg <= src_V1_addr_reg_1473_pp0_iter9_reg;
                src_V1_addr_reg_1473_pp0_iter11_reg <= src_V1_addr_reg_1473_pp0_iter10_reg;
                src_V1_addr_reg_1473_pp0_iter12_reg <= src_V1_addr_reg_1473_pp0_iter11_reg;
                src_V1_addr_reg_1473_pp0_iter13_reg <= src_V1_addr_reg_1473_pp0_iter12_reg;
                src_V1_addr_reg_1473_pp0_iter14_reg <= src_V1_addr_reg_1473_pp0_iter13_reg;
                src_V1_addr_reg_1473_pp0_iter2_reg <= src_V1_addr_reg_1473_pp0_iter1_reg;
                src_V1_addr_reg_1473_pp0_iter3_reg <= src_V1_addr_reg_1473_pp0_iter2_reg;
                src_V1_addr_reg_1473_pp0_iter4_reg <= src_V1_addr_reg_1473_pp0_iter3_reg;
                src_V1_addr_reg_1473_pp0_iter5_reg <= src_V1_addr_reg_1473_pp0_iter4_reg;
                src_V1_addr_reg_1473_pp0_iter6_reg <= src_V1_addr_reg_1473_pp0_iter5_reg;
                src_V1_addr_reg_1473_pp0_iter7_reg <= src_V1_addr_reg_1473_pp0_iter6_reg;
                src_V1_addr_reg_1473_pp0_iter8_reg <= src_V1_addr_reg_1473_pp0_iter7_reg;
                src_V1_addr_reg_1473_pp0_iter9_reg <= src_V1_addr_reg_1473_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                ixa_V_reg_1381 <= grp_fu_761_p2;
                sdiv_ln1364_3_reg_1387 <= grp_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                ixc_V_reg_1407 <= ixc_V_fu_832_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                    lhs_V_3_i_reg_1448(31 downto 0) <= lhs_V_3_i_fu_871_p1(31 downto 0);
                shr_i_i_i_reg_1433 <= shr_i_i_i_fu_844_p1;
                sub_ln69_2_reg_1443 <= sub_ln69_2_fu_866_p2;
                sub_ln69_reg_1438 <= sub_ln69_fu_854_p2;
                    zext_ln534_reg_1453(31 downto 0) <= zext_ln534_fu_874_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln1364_1_reg_1237 <= grp_fu_415_p2;
                mul_ln1364_2_reg_1247 <= grp_fu_432_p2;
                mul_ln1364_3_reg_1257 <= grp_fu_449_p2;
                mul_ln1364_reg_1227 <= grp_fu_398_p2;
                mul_ln208_reg_1267 <= grp_fu_486_p2;
                tmp_15_reg_1242 <= grp_fu_415_p2(64 downto 39);
                tmp_18_reg_1252 <= grp_fu_432_p2(64 downto 39);
                tmp_21_reg_1262 <= grp_fu_449_p2(64 downto 39);
                tmp_reg_1232 <= grp_fu_398_p2(64 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_2_reg_1463_pp0_iter4_reg = ap_const_lv1_0) and (or_ln157_2_reg_1502 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln534_reg_1516 <= grp_fu_1019_p2;
                ret_2_reg_1511 <= ret_2_fu_1027_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                mul_ln69_1_reg_1423 <= grp_fu_835_p2;
                mul_ln69_reg_1413 <= grp_fu_820_p2;
                tmp32_i_reg_1418 <= grp_fu_827_p2;
                tmp34_i_reg_1428 <= grp_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_2_reg_1463_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln69_2_reg_1478 <= grp_fu_898_p2;
                mul_ln69_3_reg_1483 <= grp_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_2_reg_1463_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln157_2_reg_1502 <= or_ln157_2_fu_1010_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_2_reg_1463_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                rhs_reg_1488 <= ret_fu_932_p2(32 downto 12);
                trunc_ln1497_3_reg_1495 <= ret_1_fu_948_p2(32 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                sdiv_ln1364_1_reg_1392 <= grp_fu_784_p2;
                sdiv_ln1364_2_reg_1397 <= grp_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln133_reg_1215 <= select_ln133_fu_466_p3;
                tmp31_i_reg_1221 <= tmp31_i_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln1364_1_reg_1272 <= select_ln1364_1_fu_565_p3;
                select_ln1364_3_reg_1278 <= select_ln1364_3_fu_607_p3;
                select_ln1364_5_reg_1284 <= select_ln1364_5_fu_649_p3;
                select_ln1364_7_reg_1289 <= select_ln1364_7_fu_691_p3;
                tmp_i_reg_1304 <= tmp_i_fu_706_p2;
                trunc_ln1497_1_reg_1299 <= trunc_ln1497_1_fu_702_p1;
                trunc_ln1497_reg_1294 <= trunc_ln1497_fu_698_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op410_read_state62 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_addr_read_reg_1527 <= m_axi_src_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln157_2_reg_1502_pp0_iter5_reg = ap_const_lv1_0) and (icmp_ln878_2_reg_1463_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_addr_reg_1521 <= sext_ln324_1_fu_1067_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp30_i_reg_1329 <= grp_fu_734_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1146(11 downto 0) <= "000000000000";
    lhs_V_3_i_reg_1448(33 downto 32) <= "00";
    zext_ln534_reg_1453(52 downto 32) <= "000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter0, icmp_ln878_2_fu_883_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln878_2_fu_883_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln878_2_fu_883_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, a_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            a_blk_n <= a_empty_n;
        else 
            a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    a_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            a_read <= ap_const_logic_1;
        else 
            a_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln208_fu_738_p2 <= std_logic_vector(unsigned(xstart_pos_read_reg_1131) + unsigned(tmp30_i_reg_1329));
    add_ln324_1_fu_1052_p2 <= std_logic_vector(unsigned(srcin_read_reg_1136) + unsigned(sext_ln324_fu_1048_p1));
    add_ln324_fu_1035_p2 <= std_logic_vector(unsigned(mul_ln534_reg_1516) + unsigned(sext_ln534_fu_1032_p1));
    add_ln691_fu_877_p2 <= std_logic_vector(unsigned(x_V_reg_272) + unsigned(ap_const_lv32_1));
    add_ln692_1_fu_371_p2 <= std_logic_vector(unsigned(n_dout) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln692_fu_461_p2 <= std_logic_vector(unsigned(m_read_reg_1104) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln69_2_fu_919_p2 <= std_logic_vector(unsigned(tmp34_i_reg_1428) + unsigned(mul_ln69_3_reg_1483));
    add_ln69_fu_906_p2 <= std_logic_vector(unsigned(tmp32_i_reg_1418) + unsigned(mul_ln69_2_reg_1478));
    affine_x_fu_893_p2 <= std_logic_vector(unsigned(x_V_reg_272) - unsigned(shr_i_i_i_reg_1433));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state64 <= ap_CS_fsm(48);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_src_RVALID, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter14, ap_block_state55_io, ap_predicate_op410_read_state62)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_predicate_op410_read_state62 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_src_RVALID = ap_const_logic_0)) or ((ap_const_boolean_1 = ap_block_state55_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_src_RVALID, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter14, ap_block_state55_io, ap_predicate_op410_read_state62)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_predicate_op410_read_state62 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (m_axi_src_RVALID = ap_const_logic_0)) or ((ap_const_boolean_1 = ap_block_state55_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
                ap_block_state1 <= ((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0));
    end process;

        ap_block_state48_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state55_io_assign_proc : process(m_axi_src_ARREADY, ap_predicate_op403_readreq_state55)
    begin
                ap_block_state55_io <= ((ap_predicate_op403_readreq_state55 = ap_const_boolean_1) and (m_axi_src_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state55_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state62_pp0_stage0_iter14_assign_proc : process(m_axi_src_RVALID, ap_predicate_op410_read_state62)
    begin
                ap_block_state62_pp0_stage0_iter14 <= ((ap_predicate_op410_read_state62 = ap_const_boolean_1) and (m_axi_src_RVALID = ap_const_logic_0));
    end process;

        ap_block_state63_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state48_assign_proc : process(icmp_ln878_2_fu_883_p2)
    begin
        if ((icmp_ln878_2_fu_883_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge27_i_i_phi_fu_287_p4_assign_proc : process(icmp_ln878_2_reg_1463_pp0_iter14_reg, or_ln157_2_reg_1502_pp0_iter14_reg, src_addr_read_reg_1527, ap_phi_reg_pp0_iter15_storemerge27_i_i_reg_283)
    begin
        if (((or_ln157_2_reg_1502_pp0_iter14_reg = ap_const_lv1_0) and (icmp_ln878_2_reg_1463_pp0_iter14_reg = ap_const_lv1_0))) then 
            ap_phi_mux_storemerge27_i_i_phi_fu_287_p4 <= src_addr_read_reg_1527;
        else 
            ap_phi_mux_storemerge27_i_i_phi_fu_287_p4 <= ap_phi_reg_pp0_iter15_storemerge27_i_i_reg_283;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge27_i_i_reg_283 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op403_readreq_state55_assign_proc : process(icmp_ln878_2_reg_1463_pp0_iter6_reg, or_ln157_2_reg_1502_pp0_iter6_reg)
    begin
                ap_predicate_op403_readreq_state55 <= ((or_ln157_2_reg_1502_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln878_2_reg_1463_pp0_iter6_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op410_read_state62_assign_proc : process(icmp_ln878_2_reg_1463_pp0_iter13_reg, or_ln157_2_reg_1502_pp0_iter13_reg)
    begin
                ap_predicate_op410_read_state62 <= ((or_ln157_2_reg_1502_pp0_iter13_reg = ap_const_lv1_0) and (icmp_ln878_2_reg_1463_pp0_iter13_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, b_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_blk_n <= b_empty_n;
        else 
            b_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    b_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_read <= ap_const_logic_1;
        else 
            b_read <= ap_const_logic_0;
        end if; 
    end process;


    c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, c_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_blk_n <= c_empty_n;
        else 
            c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_read <= ap_const_logic_1;
        else 
            c_read <= ap_const_logic_0;
        end if; 
    end process;


    d_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, d_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_blk_n <= d_empty_n;
        else 
            d_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_read <= ap_const_logic_1;
        else 
            d_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1019_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1019_ce <= ap_const_logic_1;
        else 
            grp_fu_1019_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1019_p0 <= zext_ln534_reg_1453(32 - 1 downto 0);
    grp_fu_398_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_415_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_432_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_449_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_716_p0 <= select_ln1364_1_reg_1272(28 - 1 downto 0);
    grp_fu_716_p1 <= select_ln1364_3_reg_1278(28 - 1 downto 0);
    grp_fu_728_p0 <= select_ln1364_5_reg_1284(28 - 1 downto 0);
    grp_fu_728_p1 <= select_ln1364_7_reg_1289(28 - 1 downto 0);

    grp_fu_761_ap_start_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_761_ap_start <= ap_const_logic_1;
        else 
            grp_fu_761_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_761_p0 <= std_logic_vector(shift_left(unsigned(select_ln1364_1_reg_1272),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    grp_fu_761_p1 <= sub_ln1347_fu_747_p2(43 downto 12);

    grp_fu_784_ap_start_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_784_ap_start <= ap_const_logic_1;
        else 
            grp_fu_784_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_784_p0 <= (sub_ln1497_fu_767_p2 & ap_const_lv12_0);
    grp_fu_784_p1 <= sext_ln1364_fu_780_p1(32 - 1 downto 0);

    grp_fu_803_ap_start_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_803_ap_start <= ap_const_logic_1;
        else 
            grp_fu_803_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_803_p0 <= (sub_ln1497_1_fu_790_p2 & ap_const_lv12_0);
    grp_fu_803_p1 <= sext_ln1364_fu_780_p1(32 - 1 downto 0);

    grp_fu_814_ap_start_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_814_ap_start <= ap_const_logic_1;
        else 
            grp_fu_814_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_814_p0 <= std_logic_vector(shift_left(unsigned(select_ln1364_3_reg_1278),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    grp_fu_814_p1 <= sub_ln1347_fu_747_p2(43 downto 12);
    grp_fu_827_p1 <= sdiv_ln1364_1_reg_1392(32 - 1 downto 0);
    grp_fu_835_p0 <= sdiv_ln1364_2_reg_1397(32 - 1 downto 0);

    grp_fu_898_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_898_ce <= ap_const_logic_1;
        else 
            grp_fu_898_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_902_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_902_ce <= ap_const_logic_1;
        else 
            grp_fu_902_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln878_1_fu_365_p2 <= "1" when (signed(shl_ln_fu_305_p3) < signed(ap_const_lv32_FFFFFF9D)) else "0";
    icmp_ln878_2_fu_883_p2 <= "1" when (x_V_reg_272 = mapchip_draw_xsize_read_reg_1077) else "0";
    icmp_ln878_fu_455_p2 <= "1" when (signed(shl_ln1497_2_fu_404_p3) < signed(ap_const_lv32_FFFFFF9D)) else "0";
    icmp_ln890_1_fu_993_p2 <= "1" when (unsigned(sext_ln69_1_fu_967_p1) < unsigned(mapchip_height_V_reg_1115)) else "0";
    icmp_ln890_fu_974_p2 <= "1" when (unsigned(sext_ln69_fu_964_p1) < unsigned(mapchip_width_V_reg_1082)) else "0";

    id_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            id_blk_n <= id_empty_n;
        else 
            id_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    id_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            id_read <= ap_const_logic_1;
        else 
            id_read <= ap_const_logic_0;
        end if; 
    end process;

    ixc_V_fu_832_p1 <= sdiv_ln1364_2_reg_1397(32 - 1 downto 0);
    lhs_V_3_i_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_reg_1344),34));
    m_axi_src_ARADDR <= src_addr_reg_1521;
    m_axi_src_ARBURST <= ap_const_lv2_0;
    m_axi_src_ARCACHE <= ap_const_lv4_0;
    m_axi_src_ARID <= ap_const_lv1_0;
    m_axi_src_ARLEN <= ap_const_lv32_1;
    m_axi_src_ARLOCK <= ap_const_lv2_0;
    m_axi_src_ARPROT <= ap_const_lv3_0;
    m_axi_src_ARQOS <= ap_const_lv4_0;
    m_axi_src_ARREGION <= ap_const_lv4_0;
    m_axi_src_ARSIZE <= ap_const_lv3_0;
    m_axi_src_ARUSER <= ap_const_lv1_0;

    m_axi_src_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter7, ap_predicate_op403_readreq_state55, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op403_readreq_state55 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            m_axi_src_ARVALID <= ap_const_logic_1;
        else 
            m_axi_src_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_AWADDR <= ap_const_lv64_0;
    m_axi_src_AWBURST <= ap_const_lv2_0;
    m_axi_src_AWCACHE <= ap_const_lv4_0;
    m_axi_src_AWID <= ap_const_lv1_0;
    m_axi_src_AWLEN <= ap_const_lv32_0;
    m_axi_src_AWLOCK <= ap_const_lv2_0;
    m_axi_src_AWPROT <= ap_const_lv3_0;
    m_axi_src_AWQOS <= ap_const_lv4_0;
    m_axi_src_AWREGION <= ap_const_lv4_0;
    m_axi_src_AWSIZE <= ap_const_lv3_0;
    m_axi_src_AWUSER <= ap_const_lv1_0;
    m_axi_src_AWVALID <= ap_const_logic_0;
    m_axi_src_BREADY <= ap_const_logic_0;

    m_axi_src_RREADY_assign_proc : process(ap_enable_reg_pp0_iter14, ap_predicate_op410_read_state62, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op410_read_state62 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_src_RREADY <= ap_const_logic_1;
        else 
            m_axi_src_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_WDATA <= ap_const_lv32_0;
    m_axi_src_WID <= ap_const_lv1_0;
    m_axi_src_WLAST <= ap_const_logic_0;
    m_axi_src_WSTRB <= ap_const_lv4_0;
    m_axi_src_WUSER <= ap_const_lv1_0;
    m_axi_src_WVALID <= ap_const_logic_0;

    m_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_blk_n <= m_empty_n;
        else 
            m_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    m_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_read <= ap_const_logic_1;
        else 
            m_read <= ap_const_logic_0;
        end if; 
    end process;


    mapchip_draw_xsize_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_blk_n <= mapchip_draw_xsize_empty_n;
        else 
            mapchip_draw_xsize_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapchip_draw_xsize_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_out_blk_n <= mapchip_draw_xsize_out_full_n;
        else 
            mapchip_draw_xsize_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mapchip_draw_xsize_out_din <= mapchip_draw_xsize_dout;

    mapchip_draw_xsize_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_out_write <= ap_const_logic_1;
        else 
            mapchip_draw_xsize_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mapchip_draw_xsize_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_read <= ap_const_logic_1;
        else 
            mapchip_draw_xsize_read <= ap_const_logic_0;
        end if; 
    end process;


    mapchip_maxheight_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_maxheight_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_maxheight_blk_n <= mapchip_maxheight_empty_n;
        else 
            mapchip_maxheight_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapchip_maxheight_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_maxheight_read <= ap_const_logic_1;
        else 
            mapchip_maxheight_read <= ap_const_logic_0;
        end if; 
    end process;


    mapchip_maxwidth_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_maxwidth_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_maxwidth_blk_n <= mapchip_maxwidth_empty_n;
        else 
            mapchip_maxwidth_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapchip_maxwidth_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_maxwidth_read <= ap_const_logic_1;
        else 
            mapchip_maxwidth_read <= ap_const_logic_0;
        end if; 
    end process;


    n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_blk_n <= n_empty_n;
        else 
            n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_read <= ap_const_logic_1;
        else 
            n_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln157_1_fu_1004_p2 <= (xor_ln890_fu_979_p2 or xor_ln890_1_fu_998_p2);
    or_ln157_2_fu_1010_p2 <= (tmp_22_fu_985_p3 or or_ln157_1_fu_1004_p2);
    or_ln157_fu_970_p2 <= (trunc_ln1497_3_reg_1495 or rhs_reg_1488);
    p_cast_i_fu_295_p1 <= mapchip_maxwidth_dout;
    r_8_i_fu_847_p3 <= (tmp_9_reg_1175 & ap_const_lv12_0);
    r_9_i_fu_859_p3 <= (tmp_s_reg_1190 & ap_const_lv12_0);
    ret_1_fu_948_p2 <= std_logic_vector(signed(sext_ln215_3_fu_928_p1) + signed(ap_const_lv33_800));
    ret_2_fu_1027_p2 <= std_logic_vector(unsigned(lhs_V_3_i_reg_1448) + unsigned(sext_ln215_4_fu_1024_p1));
    ret_fu_932_p2 <= std_logic_vector(signed(sext_ln215_2_fu_915_p1) + signed(ap_const_lv33_800));
    rx_fu_910_p2 <= std_logic_vector(unsigned(add_ln69_fu_906_p2) + unsigned(sub_ln69_reg_1438));
    ry_V_fu_923_p2 <= std_logic_vector(unsigned(add_ln69_2_fu_919_p2) + unsigned(sub_ln69_2_reg_1443));
    select_ln133_fu_466_p3 <= 
        add_ln692_fu_461_p2 when (icmp_ln878_fu_455_p2(0) = '1') else 
        m_read_reg_1104;
    select_ln1364_1_fu_565_p3 <= 
        sub_ln1364_1_fu_559_p2 when (tmp_2_reg_1151(0) = '1') else 
        sext_ln1364_3_fu_549_p1;
    select_ln1364_2_fu_594_p3 <= 
        sext_ln1364_5_fu_587_p1 when (tmp_13_reg_1157(0) = '1') else 
        sext_ln1364_6_fu_591_p1;
    select_ln1364_3_fu_607_p3 <= 
        sub_ln1364_3_fu_601_p2 when (tmp_13_reg_1157(0) = '1') else 
        sext_ln1364_6_fu_591_p1;
    select_ln1364_4_fu_636_p3 <= 
        sext_ln1364_8_fu_629_p1 when (tmp_16_reg_1163(0) = '1') else 
        sext_ln1364_9_fu_633_p1;
    select_ln1364_5_fu_649_p3 <= 
        sub_ln1364_5_fu_643_p2 when (tmp_16_reg_1163(0) = '1') else 
        sext_ln1364_9_fu_633_p1;
    select_ln1364_6_fu_678_p3 <= 
        sext_ln1364_11_fu_671_p1 when (tmp_19_reg_1169(0) = '1') else 
        sext_ln1364_12_fu_675_p1;
    select_ln1364_7_fu_691_p3 <= 
        sub_ln1364_7_fu_685_p2 when (tmp_19_reg_1169(0) = '1') else 
        sext_ln1364_12_fu_675_p1;
    select_ln1364_fu_552_p3 <= 
        sext_ln1364_2_fu_545_p1 when (tmp_2_reg_1151(0) = '1') else 
        sext_ln1364_3_fu_549_p1;
    select_ln138_fu_377_p3 <= 
        add_ln692_1_fu_371_p2 when (icmp_ln878_1_fu_365_p2(0) = '1') else 
        n_dout;
        sext_ln1364_11_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_661_p4),32));

        sext_ln1364_12_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_reg_1262),32));

        sext_ln1364_2_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_535_p4),32));

        sext_ln1364_3_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_1232),32));

        sext_ln1364_5_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_577_p4),32));

        sext_ln1364_6_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_reg_1242),32));

        sext_ln1364_8_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_619_p4),32));

        sext_ln1364_9_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_reg_1252),32));

        sext_ln1364_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln69_1_fu_751_p4),33));

        sext_ln215_2_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rx_fu_910_p2),33));

        sext_ln215_3_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ry_V_fu_923_p2),33));

        sext_ln215_4_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_reg_1488_pp0_iter4_reg),34));

        sext_ln324_1_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_1057_p4),64));

        sext_ln324_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_1040_p3),64));

        sext_ln534_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_2_reg_1511),53));

        sext_ln69_1_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1497_3_reg_1495),32));

        sext_ln69_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_reg_1488),32));

    shl_ln1497_2_fu_404_p3 <= (a_read_reg_1089 & ap_const_lv12_0);
    shl_ln1497_3_fu_421_p3 <= (c_read_reg_1094 & ap_const_lv12_0);
    shl_ln1497_4_fu_438_p3 <= (b_read_reg_1099 & ap_const_lv12_0);
    shl_ln_fu_305_p3 <= (d_dout & ap_const_lv12_0);
    shr_i_i_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shr_i_i_reg_1180),32));
    shr_i_i_fu_355_p1 <= mapchip_maxheight_dout;
        shr_i_i_i_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_i_reg_1141),32));

    src_V1_address0 <= src_V1_addr_reg_1473_pp0_iter14_reg;

    src_V1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_V1_ce0 <= ap_const_logic_1;
        else 
            src_V1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src_V1_d0 <= ap_phi_mux_storemerge27_i_i_phi_fu_287_p4;

    src_V1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln878_2_reg_1463_pp0_iter14_reg, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln878_2_reg_1463_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_V1_we0 <= ap_const_logic_1;
        else 
            src_V1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    src_blk_n_AR_assign_proc : process(m_axi_src_ARREADY, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, icmp_ln878_2_reg_1463_pp0_iter6_reg, or_ln157_2_reg_1502_pp0_iter6_reg)
    begin
        if (((or_ln157_2_reg_1502_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln878_2_reg_1463_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            src_blk_n_AR <= m_axi_src_ARREADY;
        else 
            src_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    src_blk_n_R_assign_proc : process(m_axi_src_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, icmp_ln878_2_reg_1463_pp0_iter13_reg, or_ln157_2_reg_1502_pp0_iter13_reg)
    begin
        if (((or_ln157_2_reg_1502_pp0_iter13_reg = ap_const_lv1_0) and (icmp_ln878_2_reg_1463_pp0_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_blk_n_R <= m_axi_src_RVALID;
        else 
            src_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    srcin_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, srcin_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcin_blk_n <= srcin_empty_n;
        else 
            srcin_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcin_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcin_read <= ap_const_logic_1;
        else 
            srcin_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1347_fu_747_p2 <= std_logic_vector(unsigned(mul_ln215_reg_1334) - unsigned(mul_ln1347_reg_1339));
    sub_ln1364_1_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1364_fu_552_p3));
    sub_ln1364_2_fu_572_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1364_1_reg_1237));
    sub_ln1364_3_fu_601_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1364_2_fu_594_p3));
    sub_ln1364_4_fu_614_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1364_2_reg_1247));
    sub_ln1364_5_fu_643_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1364_4_fu_636_p3));
    sub_ln1364_6_fu_656_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1364_3_reg_1257));
    sub_ln1364_7_fu_685_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1364_6_fu_678_p3));
    sub_ln1364_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1364_reg_1227));
    sub_ln1497_1_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(trunc_ln1497_1_reg_1299));
    sub_ln1497_fu_767_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(trunc_ln1497_reg_1294));
    sub_ln69_1_fu_476_p2 <= std_logic_vector(unsigned(trunc_ln69_read_reg_1110) - unsigned(shr_i_i_cast_fu_473_p1));
    sub_ln69_2_fu_866_p2 <= std_logic_vector(unsigned(r_9_i_fu_859_p3) - unsigned(mul_ln69_1_reg_1423));
    sub_ln69_fu_854_p2 <= std_logic_vector(unsigned(r_8_i_fu_847_p3) - unsigned(mul_ln69_reg_1413));
    tmp31_i_fu_481_p2 <= std_logic_vector(unsigned(sub_ln69_1_fu_476_p2) + unsigned(select_ln138_reg_1185));
    tmp_11_fu_535_p4 <= sub_ln1364_fu_530_p2(64 downto 39);
    tmp_14_fu_577_p4 <= sub_ln1364_2_fu_572_p2(64 downto 39);
    tmp_17_fu_619_p4 <= sub_ln1364_4_fu_614_p2(64 downto 39);
    tmp_1_fu_1040_p3 <= (add_ln324_fu_1035_p2 & ap_const_lv2_0);
    tmp_20_fu_661_p4 <= sub_ln1364_6_fu_656_p2(64 downto 39);
    tmp_22_fu_985_p3 <= or_ln157_fu_970_p2(20 downto 20);
    tmp_9_fu_345_p1 <= mapchip_maxwidth_dout;
    tmp_i_fu_706_p2 <= std_logic_vector(unsigned(ystart_pos_read_reg_1126) + unsigned(mul_ln208_reg_1267));
    tmp_s_fu_385_p1 <= mapchip_maxheight_dout;
    trunc_ln1497_1_fu_702_p1 <= select_ln1364_5_fu_649_p3(21 - 1 downto 0);
    trunc_ln1497_fu_698_p1 <= select_ln1364_7_fu_691_p3(21 - 1 downto 0);
    trunc_ln1_fu_1057_p4 <= add_ln324_1_fu_1052_p2(63 downto 2);
    trunc_ln69_1_fu_751_p4 <= sub_ln1347_fu_747_p2(43 downto 12);

    trunc_ln69_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln69_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln69_blk_n <= trunc_ln69_empty_n;
        else 
            trunc_ln69_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    trunc_ln69_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, trunc_ln69_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln69_out_blk_n <= trunc_ln69_out_full_n;
        else 
            trunc_ln69_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    trunc_ln69_out_din <= trunc_ln69_dout;

    trunc_ln69_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln69_out_write <= ap_const_logic_1;
        else 
            trunc_ln69_out_write <= ap_const_logic_0;
        end if; 
    end process;


    trunc_ln69_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            trunc_ln69_read <= ap_const_logic_1;
        else 
            trunc_ln69_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln890_1_fu_998_p2 <= (icmp_ln890_1_fu_993_p2 xor ap_const_lv1_1);
    xor_ln890_fu_979_p2 <= (icmp_ln890_fu_974_p2 xor ap_const_lv1_1);

    xstart_pos_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xstart_pos_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xstart_pos_blk_n <= xstart_pos_empty_n;
        else 
            xstart_pos_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xstart_pos_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xstart_pos_read <= ap_const_logic_1;
        else 
            xstart_pos_read <= ap_const_logic_0;
        end if; 
    end process;


    ystart_pos_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ystart_pos_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ystart_pos_blk_n <= ystart_pos_empty_n;
        else 
            ystart_pos_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ystart_pos_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, mapchip_maxwidth_empty_n, d_empty_n, a_empty_n, c_empty_n, b_empty_n, m_empty_n, trunc_ln69_empty_n, mapchip_maxheight_empty_n, n_empty_n, id_empty_n, ystart_pos_empty_n, xstart_pos_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, trunc_ln69_out_full_n)
    begin
        if ((not(((m_empty_n = ap_const_logic_0) or (b_empty_n = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (d_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = a_empty_n) or (trunc_ln69_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0) or (srcin_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (trunc_ln69_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ystart_pos_read <= ap_const_logic_1;
        else 
            ystart_pos_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln153_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_reg_272),64));
    zext_ln534_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mapchip_width_V_reg_1082),53));
end behav;
