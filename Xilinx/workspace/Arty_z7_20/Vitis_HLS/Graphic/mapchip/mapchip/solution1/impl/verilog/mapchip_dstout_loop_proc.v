// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mapchip_dstout_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mapchip_draw_xsize_dout,
        mapchip_draw_xsize_empty_n,
        mapchip_draw_xsize_read,
        y_dout,
        y_empty_n,
        y_read,
        frame_size_dout,
        frame_size_empty_n,
        frame_size_read,
        dstout_dout,
        dstout_empty_n,
        dstout_read,
        m_axi_dst_AWVALID,
        m_axi_dst_AWREADY,
        m_axi_dst_AWADDR,
        m_axi_dst_AWID,
        m_axi_dst_AWLEN,
        m_axi_dst_AWSIZE,
        m_axi_dst_AWBURST,
        m_axi_dst_AWLOCK,
        m_axi_dst_AWCACHE,
        m_axi_dst_AWPROT,
        m_axi_dst_AWQOS,
        m_axi_dst_AWREGION,
        m_axi_dst_AWUSER,
        m_axi_dst_WVALID,
        m_axi_dst_WREADY,
        m_axi_dst_WDATA,
        m_axi_dst_WSTRB,
        m_axi_dst_WLAST,
        m_axi_dst_WID,
        m_axi_dst_WUSER,
        m_axi_dst_ARVALID,
        m_axi_dst_ARREADY,
        m_axi_dst_ARADDR,
        m_axi_dst_ARID,
        m_axi_dst_ARLEN,
        m_axi_dst_ARSIZE,
        m_axi_dst_ARBURST,
        m_axi_dst_ARLOCK,
        m_axi_dst_ARCACHE,
        m_axi_dst_ARPROT,
        m_axi_dst_ARQOS,
        m_axi_dst_ARREGION,
        m_axi_dst_ARUSER,
        m_axi_dst_RVALID,
        m_axi_dst_RREADY,
        m_axi_dst_RDATA,
        m_axi_dst_RLAST,
        m_axi_dst_RID,
        m_axi_dst_RUSER,
        m_axi_dst_RRESP,
        m_axi_dst_BVALID,
        m_axi_dst_BREADY,
        m_axi_dst_BRESP,
        m_axi_dst_BID,
        m_axi_dst_BUSER,
        src_V1_address0,
        src_V1_ce0,
        src_V1_q0,
        dst_V2_address0,
        dst_V2_ce0,
        dst_V2_q0,
        crip_dout,
        crip_empty_n,
        crip_read,
        alpha_dout,
        alpha_empty_n,
        alpha_read
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_pp0_stage0 = 11'd32;
parameter    ap_ST_fsm_state15 = 11'd64;
parameter    ap_ST_fsm_state16 = 11'd128;
parameter    ap_ST_fsm_state17 = 11'd256;
parameter    ap_ST_fsm_state18 = 11'd512;
parameter    ap_ST_fsm_state19 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] mapchip_draw_xsize_dout;
input   mapchip_draw_xsize_empty_n;
output   mapchip_draw_xsize_read;
input  [31:0] y_dout;
input   y_empty_n;
output   y_read;
input  [31:0] frame_size_dout;
input   frame_size_empty_n;
output   frame_size_read;
input  [63:0] dstout_dout;
input   dstout_empty_n;
output   dstout_read;
output   m_axi_dst_AWVALID;
input   m_axi_dst_AWREADY;
output  [63:0] m_axi_dst_AWADDR;
output  [0:0] m_axi_dst_AWID;
output  [31:0] m_axi_dst_AWLEN;
output  [2:0] m_axi_dst_AWSIZE;
output  [1:0] m_axi_dst_AWBURST;
output  [1:0] m_axi_dst_AWLOCK;
output  [3:0] m_axi_dst_AWCACHE;
output  [2:0] m_axi_dst_AWPROT;
output  [3:0] m_axi_dst_AWQOS;
output  [3:0] m_axi_dst_AWREGION;
output  [0:0] m_axi_dst_AWUSER;
output   m_axi_dst_WVALID;
input   m_axi_dst_WREADY;
output  [31:0] m_axi_dst_WDATA;
output  [3:0] m_axi_dst_WSTRB;
output   m_axi_dst_WLAST;
output  [0:0] m_axi_dst_WID;
output  [0:0] m_axi_dst_WUSER;
output   m_axi_dst_ARVALID;
input   m_axi_dst_ARREADY;
output  [63:0] m_axi_dst_ARADDR;
output  [0:0] m_axi_dst_ARID;
output  [31:0] m_axi_dst_ARLEN;
output  [2:0] m_axi_dst_ARSIZE;
output  [1:0] m_axi_dst_ARBURST;
output  [1:0] m_axi_dst_ARLOCK;
output  [3:0] m_axi_dst_ARCACHE;
output  [2:0] m_axi_dst_ARPROT;
output  [3:0] m_axi_dst_ARQOS;
output  [3:0] m_axi_dst_ARREGION;
output  [0:0] m_axi_dst_ARUSER;
input   m_axi_dst_RVALID;
output   m_axi_dst_RREADY;
input  [31:0] m_axi_dst_RDATA;
input   m_axi_dst_RLAST;
input  [0:0] m_axi_dst_RID;
input  [0:0] m_axi_dst_RUSER;
input  [1:0] m_axi_dst_RRESP;
input   m_axi_dst_BVALID;
output   m_axi_dst_BREADY;
input  [1:0] m_axi_dst_BRESP;
input  [0:0] m_axi_dst_BID;
input  [0:0] m_axi_dst_BUSER;
output  [9:0] src_V1_address0;
output   src_V1_ce0;
input  [23:0] src_V1_q0;
output  [9:0] dst_V2_address0;
output   dst_V2_ce0;
input  [31:0] dst_V2_q0;
input  [23:0] crip_dout;
input   crip_empty_n;
output   crip_read;
input  [7:0] alpha_dout;
input   alpha_empty_n;
output   alpha_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mapchip_draw_xsize_read;
reg y_read;
reg frame_size_read;
reg dstout_read;
reg m_axi_dst_AWVALID;
reg m_axi_dst_WVALID;
reg m_axi_dst_BREADY;
reg src_V1_ce0;
reg dst_V2_ce0;
reg crip_read;
reg alpha_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mapchip_draw_xsize_blk_n;
reg    y_blk_n;
reg    frame_size_blk_n;
reg    dstout_blk_n;
reg    dst_blk_n_AW;
wire    ap_CS_fsm_state5;
reg    dst_blk_n_W;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_reg_602;
reg   [0:0] icmp_ln878_reg_602_pp0_iter7_reg;
reg    dst_blk_n_B;
wire    ap_CS_fsm_state19;
reg    crip_blk_n;
reg    alpha_blk_n;
reg   [31:0] x_reg_185;
reg   [31:0] mapchip_draw_xsize_read_reg_520;
reg   [31:0] y_read_reg_526;
reg   [31:0] frame_size_read_reg_531;
reg   [63:0] dstout_read_reg_536;
reg   [7:0] alpha_read_reg_541;
reg   [7:0] crip_r_reg_547;
reg   [7:0] crip_b_reg_552;
wire   [7:0] crip_g_fu_226_p1;
reg   [7:0] crip_g_reg_557;
wire    ap_CS_fsm_state2;
wire   [61:0] grp_fu_236_p2;
reg   [61:0] mul_i_i70_i_reg_572;
wire    ap_CS_fsm_state3;
reg   [63:0] dst_addr_reg_577;
wire    ap_CS_fsm_state4;
wire   [15:0] alpha_cast_i_fu_274_p1;
reg   [15:0] alpha_cast_i_reg_583;
wire   [15:0] zext_ln71_1_fu_282_p1;
reg   [15:0] zext_ln71_1_reg_590;
wire   [31:0] add_ln83_fu_286_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state12_pp0_stage0_iter6;
wire    ap_block_state13_pp0_stage0_iter7;
wire    ap_block_state14_pp0_stage0_iter8;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_292_p2;
reg   [0:0] icmp_ln878_reg_602_pp0_iter1_reg;
reg   [0:0] icmp_ln878_reg_602_pp0_iter2_reg;
reg   [0:0] icmp_ln878_reg_602_pp0_iter3_reg;
reg   [0:0] icmp_ln878_reg_602_pp0_iter4_reg;
reg   [0:0] icmp_ln878_reg_602_pp0_iter5_reg;
reg   [0:0] icmp_ln878_reg_602_pp0_iter6_reg;
wire   [63:0] zext_ln83_fu_297_p1;
reg   [63:0] zext_ln83_reg_606;
wire   [0:0] and_ln29_1_fu_347_p2;
reg   [0:0] and_ln29_1_reg_621;
reg   [0:0] and_ln29_1_reg_621_pp0_iter2_reg;
reg   [0:0] and_ln29_1_reg_621_pp0_iter3_reg;
reg   [0:0] and_ln29_1_reg_621_pp0_iter4_reg;
reg   [0:0] and_ln29_1_reg_621_pp0_iter5_reg;
reg   [0:0] and_ln29_1_reg_621_pp0_iter6_reg;
reg   [31:0] dst_V_reg_640;
wire   [7:0] dst_g_V_2_fu_365_p1;
reg   [7:0] dst_g_V_2_reg_647;
wire   [31:0] zext_ln27_fu_471_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire   [31:0] ap_phi_reg_pp0_iter0_color_V_1_reg_196;
reg   [31:0] ap_phi_reg_pp0_iter1_color_V_1_reg_196;
reg   [31:0] ap_phi_reg_pp0_iter2_color_V_1_reg_196;
reg   [31:0] ap_phi_reg_pp0_iter3_color_V_1_reg_196;
reg   [31:0] ap_phi_reg_pp0_iter4_color_V_1_reg_196;
reg   [31:0] ap_phi_reg_pp0_iter5_color_V_1_reg_196;
reg   [31:0] ap_phi_reg_pp0_iter6_color_V_1_reg_196;
reg   [31:0] ap_phi_reg_pp0_iter7_color_V_1_reg_196;
reg   [31:0] ap_phi_reg_pp0_iter8_color_V_1_reg_196;
wire  signed [63:0] sext_ln329_fu_264_p1;
wire    ap_block_pp0_stage0_01001;
reg    ap_block_state1;
wire   [31:0] grp_fu_236_p0;
wire   [31:0] grp_fu_236_p1;
wire   [63:0] shl_ln329_1_fu_242_p3;
wire   [63:0] add_ln329_fu_249_p2;
wire   [61:0] trunc_ln329_1_fu_254_p4;
wire   [7:0] empty_fu_277_p2;
wire   [7:0] src_r_V_fu_306_p4;
wire   [7:0] src_b_V_fu_316_p4;
wire   [7:0] src_g_V_fu_302_p1;
wire   [0:0] icmp_ln870_1_fu_331_p2;
wire   [0:0] icmp_ln870_2_fu_336_p2;
wire   [0:0] and_ln29_fu_341_p2;
wire   [0:0] icmp_ln870_fu_326_p2;
wire   [7:0] trunc_ln_fu_369_p4;
wire   [7:0] r_fu_382_p4;
wire   [7:0] ret_9_fu_395_p0;
wire   [7:0] ret_9_fu_395_p1;
wire   [15:0] ret_9_fu_395_p2;
wire   [7:0] ret_11_fu_404_p0;
wire   [7:0] ret_11_fu_404_p1;
wire   [15:0] ret_11_fu_404_p2;
wire   [7:0] ret_13_fu_416_p0;
wire   [7:0] ret_13_fu_416_p1;
wire   [15:0] ret_13_fu_416_p2;
wire   [16:0] grp_fu_475_p3;
wire   [16:0] grp_fu_483_p3;
wire   [16:0] grp_fu_491_p3;
wire   [34:0] grp_fu_499_p2;
wire   [34:0] grp_fu_506_p2;
wire   [34:0] grp_fu_513_p2;
wire   [7:0] dst_r_V_fu_434_p4;
wire   [7:0] dst_b_V_fu_443_p4;
wire   [7:0] dst_g_V_fu_452_p4;
wire   [23:0] color_V_fu_461_p4;
wire   [7:0] grp_fu_475_p0;
wire   [7:0] grp_fu_475_p1;
wire   [15:0] grp_fu_475_p2;
wire   [7:0] grp_fu_483_p0;
wire   [7:0] grp_fu_483_p1;
wire   [15:0] grp_fu_483_p2;
wire   [7:0] grp_fu_491_p0;
wire   [7:0] grp_fu_491_p1;
wire   [15:0] grp_fu_491_p2;
wire   [16:0] grp_fu_499_p0;
wire   [18:0] grp_fu_499_p1;
wire   [16:0] grp_fu_506_p0;
wire   [18:0] grp_fu_506_p1;
wire   [16:0] grp_fu_513_p0;
wire   [18:0] grp_fu_513_p1;
reg    grp_fu_475_ce;
reg    grp_fu_483_ce;
reg    grp_fu_491_ce;
reg    grp_fu_499_ce;
reg    grp_fu_506_ce;
reg    grp_fu_513_ce;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [61:0] grp_fu_236_p00;
wire   [61:0] grp_fu_236_p10;
wire   [15:0] grp_fu_475_p00;
wire   [16:0] grp_fu_475_p20;
wire   [15:0] grp_fu_483_p00;
wire   [16:0] grp_fu_483_p20;
wire   [15:0] grp_fu_491_p00;
wire   [16:0] grp_fu_491_p20;
wire   [34:0] grp_fu_499_p00;
wire   [34:0] grp_fu_506_p00;
wire   [34:0] grp_fu_513_p00;
wire   [15:0] ret_11_fu_404_p00;
wire   [15:0] ret_13_fu_416_p00;
wire   [15:0] ret_9_fu_395_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

mapchip_mul_32ns_32ns_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_32ns_32ns_62_2_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_236_p0),
    .din1(grp_fu_236_p1),
    .ce(1'b1),
    .dout(grp_fu_236_p2)
);

mapchip_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U55(
    .din0(ret_9_fu_395_p0),
    .din1(ret_9_fu_395_p1),
    .dout(ret_9_fu_395_p2)
);

mapchip_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U56(
    .din0(ret_11_fu_404_p0),
    .din1(ret_11_fu_404_p1),
    .dout(ret_11_fu_404_p2)
);

mapchip_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U57(
    .din0(ret_13_fu_416_p0),
    .din1(ret_13_fu_416_p1),
    .dout(ret_13_fu_416_p2)
);

mapchip_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_475_p0),
    .din1(grp_fu_475_p1),
    .din2(grp_fu_475_p2),
    .ce(grp_fu_475_ce),
    .dout(grp_fu_475_p3)
);

mapchip_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_483_p0),
    .din1(grp_fu_483_p1),
    .din2(grp_fu_483_p2),
    .ce(grp_fu_483_ce),
    .dout(grp_fu_483_p3)
);

mapchip_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_491_p0),
    .din1(grp_fu_491_p1),
    .din2(grp_fu_491_p2),
    .ce(grp_fu_491_ce),
    .dout(grp_fu_491_p3)
);

mapchip_mul_mul_17ns_19ns_35_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_mul_17ns_19ns_35_4_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_499_p0),
    .din1(grp_fu_499_p1),
    .ce(grp_fu_499_ce),
    .dout(grp_fu_499_p2)
);

mapchip_mul_mul_17ns_19ns_35_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_mul_17ns_19ns_35_4_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_506_p0),
    .din1(grp_fu_506_p1),
    .ce(grp_fu_506_ce),
    .dout(grp_fu_506_p2)
);

mapchip_mul_mul_17ns_19ns_35_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_mul_17ns_19ns_35_4_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_513_p0),
    .din1(grp_fu_513_p1),
    .ce(grp_fu_513_ce),
    .dout(grp_fu_513_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((1'd1 == and_ln29_1_reg_621) & (icmp_ln878_reg_602_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_color_V_1_reg_196 <= dst_V2_q0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_color_V_1_reg_196 <= ap_phi_reg_pp0_iter2_color_V_1_reg_196;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln878_reg_602_pp0_iter6_reg == 1'd0) & (1'd0 == and_ln29_1_reg_621_pp0_iter6_reg))) begin
            ap_phi_reg_pp0_iter8_color_V_1_reg_196 <= zext_ln27_fu_471_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter8_color_V_1_reg_196 <= ap_phi_reg_pp0_iter7_color_V_1_reg_196;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        x_reg_185 <= 32'd0;
    end else if (((icmp_ln878_fu_292_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_185 <= add_ln83_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        alpha_cast_i_reg_583[7 : 0] <= alpha_cast_i_fu_274_p1[7 : 0];
        zext_ln71_1_reg_590[7 : 0] <= zext_ln71_1_fu_282_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        alpha_read_reg_541 <= alpha_dout;
        crip_b_reg_552 <= {{crip_dout[15:8]}};
        crip_g_reg_557 <= crip_g_fu_226_p1;
        crip_r_reg_547 <= {{crip_dout[23:16]}};
        dstout_read_reg_536 <= dstout_dout;
        frame_size_read_reg_531 <= frame_size_dout;
        mapchip_draw_xsize_read_reg_520 <= mapchip_draw_xsize_dout;
        y_read_reg_526 <= y_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_602 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln29_1_reg_621 <= and_ln29_1_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln29_1_reg_621_pp0_iter2_reg <= and_ln29_1_reg_621;
        and_ln29_1_reg_621_pp0_iter3_reg <= and_ln29_1_reg_621_pp0_iter2_reg;
        and_ln29_1_reg_621_pp0_iter4_reg <= and_ln29_1_reg_621_pp0_iter3_reg;
        and_ln29_1_reg_621_pp0_iter5_reg <= and_ln29_1_reg_621_pp0_iter4_reg;
        and_ln29_1_reg_621_pp0_iter6_reg <= and_ln29_1_reg_621_pp0_iter5_reg;
        icmp_ln878_reg_602_pp0_iter2_reg <= icmp_ln878_reg_602_pp0_iter1_reg;
        icmp_ln878_reg_602_pp0_iter3_reg <= icmp_ln878_reg_602_pp0_iter2_reg;
        icmp_ln878_reg_602_pp0_iter4_reg <= icmp_ln878_reg_602_pp0_iter3_reg;
        icmp_ln878_reg_602_pp0_iter5_reg <= icmp_ln878_reg_602_pp0_iter4_reg;
        icmp_ln878_reg_602_pp0_iter6_reg <= icmp_ln878_reg_602_pp0_iter5_reg;
        icmp_ln878_reg_602_pp0_iter7_reg <= icmp_ln878_reg_602_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_color_V_1_reg_196 <= ap_phi_reg_pp0_iter0_color_V_1_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_color_V_1_reg_196 <= ap_phi_reg_pp0_iter1_color_V_1_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_color_V_1_reg_196 <= ap_phi_reg_pp0_iter3_color_V_1_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_color_V_1_reg_196 <= ap_phi_reg_pp0_iter4_color_V_1_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_color_V_1_reg_196 <= ap_phi_reg_pp0_iter5_color_V_1_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_color_V_1_reg_196 <= ap_phi_reg_pp0_iter6_color_V_1_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_reg_602_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_V_reg_640 <= dst_V2_q0;
        dst_g_V_2_reg_647 <= dst_g_V_2_fu_365_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_addr_reg_577 <= sext_ln329_fu_264_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_reg_602 <= icmp_ln878_fu_292_p2;
        icmp_ln878_reg_602_pp0_iter1_reg <= icmp_ln878_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_i_i70_i_reg_572 <= grp_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln83_reg_606[31 : 0] <= zext_ln83_fu_297_p1[31 : 0];
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_blk_n = alpha_empty_n;
    end else begin
        alpha_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (crip_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_read = 1'b1;
    end else begin
        alpha_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_292_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        crip_blk_n = crip_empty_n;
    end else begin
        crip_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (crip_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        crip_read = 1'b1;
    end else begin
        crip_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_V2_ce0 = 1'b1;
    end else begin
        dst_V2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_blk_n_AW = m_axi_dst_AWREADY;
    end else begin
        dst_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        dst_blk_n_B = m_axi_dst_BVALID;
    end else begin
        dst_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_602_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        dst_blk_n_W = m_axi_dst_WREADY;
    end else begin
        dst_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstout_blk_n = dstout_empty_n;
    end else begin
        dstout_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (crip_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstout_read = 1'b1;
    end else begin
        dstout_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_size_blk_n = frame_size_empty_n;
    end else begin
        frame_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (crip_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_size_read = 1'b1;
    end else begin
        frame_size_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_475_ce = 1'b1;
    end else begin
        grp_fu_475_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_483_ce = 1'b1;
    end else begin
        grp_fu_483_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_491_ce = 1'b1;
    end else begin
        grp_fu_491_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_499_ce = 1'b1;
    end else begin
        grp_fu_499_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_506_ce = 1'b1;
    end else begin
        grp_fu_506_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_513_ce = 1'b1;
    end else begin
        grp_fu_513_ce = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_dst_AWVALID = 1'b1;
    end else begin
        m_axi_dst_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        m_axi_dst_BREADY = 1'b1;
    end else begin
        m_axi_dst_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_602_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        m_axi_dst_WVALID = 1'b1;
    end else begin
        m_axi_dst_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_blk_n = mapchip_draw_xsize_empty_n;
    end else begin
        mapchip_draw_xsize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (crip_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mapchip_draw_xsize_read = 1'b1;
    end else begin
        mapchip_draw_xsize_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V1_ce0 = 1'b1;
    end else begin
        src_V1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_blk_n = y_empty_n;
    end else begin
        y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (crip_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_read = 1'b1;
    end else begin
        y_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((dstout_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (crip_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_292_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_292_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln329_fu_249_p2 = (dstout_read_reg_536 + shl_ln329_1_fu_242_p3);

assign add_ln83_fu_286_p2 = (x_reg_185 + 32'd1);

assign alpha_cast_i_fu_274_p1 = alpha_read_reg_541;

assign and_ln29_1_fu_347_p2 = (icmp_ln870_fu_326_p2 & and_ln29_fu_341_p2);

assign and_ln29_fu_341_p2 = (icmp_ln870_2_fu_336_p2 & icmp_ln870_1_fu_331_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((dstout_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_empty_n == 1'b0) | (mapchip_draw_xsize_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (crip_empty_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((m_axi_dst_WREADY == 1'b0) & (icmp_ln878_reg_602_pp0_iter7_reg == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_color_V_1_reg_196 = 'bx;

assign color_V_fu_461_p4 = {{{dst_r_V_fu_434_p4}, {dst_b_V_fu_443_p4}}, {dst_g_V_fu_452_p4}};

assign crip_g_fu_226_p1 = crip_dout[7:0];

assign dst_V2_address0 = zext_ln83_reg_606;

assign dst_b_V_fu_443_p4 = {{grp_fu_506_p2[32:25]}};

assign dst_g_V_2_fu_365_p1 = dst_V2_q0[7:0];

assign dst_g_V_fu_452_p4 = {{grp_fu_513_p2[32:25]}};

assign dst_r_V_fu_434_p4 = {{grp_fu_499_p2[32:25]}};

assign empty_fu_277_p2 = (8'd255 ^ alpha_read_reg_541);

assign grp_fu_236_p0 = grp_fu_236_p00;

assign grp_fu_236_p00 = y_read_reg_526;

assign grp_fu_236_p1 = grp_fu_236_p10;

assign grp_fu_236_p10 = frame_size_read_reg_531;

assign grp_fu_475_p0 = grp_fu_475_p00;

assign grp_fu_475_p00 = src_r_V_fu_306_p4;

assign grp_fu_475_p1 = alpha_cast_i_reg_583;

assign grp_fu_475_p2 = grp_fu_475_p20;

assign grp_fu_475_p20 = ret_9_fu_395_p2;

assign grp_fu_483_p0 = grp_fu_483_p00;

assign grp_fu_483_p00 = src_b_V_fu_316_p4;

assign grp_fu_483_p1 = alpha_cast_i_reg_583;

assign grp_fu_483_p2 = grp_fu_483_p20;

assign grp_fu_483_p20 = ret_11_fu_404_p2;

assign grp_fu_491_p0 = grp_fu_491_p00;

assign grp_fu_491_p00 = src_g_V_fu_302_p1;

assign grp_fu_491_p1 = alpha_cast_i_reg_583;

assign grp_fu_491_p2 = grp_fu_491_p20;

assign grp_fu_491_p20 = ret_13_fu_416_p2;

assign grp_fu_499_p0 = grp_fu_499_p00;

assign grp_fu_499_p00 = grp_fu_475_p3;

assign grp_fu_499_p1 = 35'd131587;

assign grp_fu_506_p0 = grp_fu_506_p00;

assign grp_fu_506_p00 = grp_fu_483_p3;

assign grp_fu_506_p1 = 35'd131587;

assign grp_fu_513_p0 = grp_fu_513_p00;

assign grp_fu_513_p00 = grp_fu_491_p3;

assign grp_fu_513_p1 = 35'd131587;

assign icmp_ln870_1_fu_331_p2 = ((crip_b_reg_552 == src_b_V_fu_316_p4) ? 1'b1 : 1'b0);

assign icmp_ln870_2_fu_336_p2 = ((crip_g_reg_557 == src_g_V_fu_302_p1) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_326_p2 = ((crip_r_reg_547 == src_r_V_fu_306_p4) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_292_p2 = ((x_reg_185 == mapchip_draw_xsize_read_reg_520) ? 1'b1 : 1'b0);

assign m_axi_dst_ARADDR = 64'd0;

assign m_axi_dst_ARBURST = 2'd0;

assign m_axi_dst_ARCACHE = 4'd0;

assign m_axi_dst_ARID = 1'd0;

assign m_axi_dst_ARLEN = 32'd0;

assign m_axi_dst_ARLOCK = 2'd0;

assign m_axi_dst_ARPROT = 3'd0;

assign m_axi_dst_ARQOS = 4'd0;

assign m_axi_dst_ARREGION = 4'd0;

assign m_axi_dst_ARSIZE = 3'd0;

assign m_axi_dst_ARUSER = 1'd0;

assign m_axi_dst_ARVALID = 1'b0;

assign m_axi_dst_AWADDR = dst_addr_reg_577;

assign m_axi_dst_AWBURST = 2'd0;

assign m_axi_dst_AWCACHE = 4'd0;

assign m_axi_dst_AWID = 1'd0;

assign m_axi_dst_AWLEN = mapchip_draw_xsize_read_reg_520;

assign m_axi_dst_AWLOCK = 2'd0;

assign m_axi_dst_AWPROT = 3'd0;

assign m_axi_dst_AWQOS = 4'd0;

assign m_axi_dst_AWREGION = 4'd0;

assign m_axi_dst_AWSIZE = 3'd0;

assign m_axi_dst_AWUSER = 1'd0;

assign m_axi_dst_RREADY = 1'b0;

assign m_axi_dst_WDATA = ap_phi_reg_pp0_iter8_color_V_1_reg_196;

assign m_axi_dst_WID = 1'd0;

assign m_axi_dst_WLAST = 1'b0;

assign m_axi_dst_WSTRB = 4'd15;

assign m_axi_dst_WUSER = 1'd0;

assign r_fu_382_p4 = {{dst_V_reg_640[15:8]}};

assign ret_11_fu_404_p0 = ret_11_fu_404_p00;

assign ret_11_fu_404_p00 = r_fu_382_p4;

assign ret_11_fu_404_p1 = zext_ln71_1_reg_590;

assign ret_13_fu_416_p0 = ret_13_fu_416_p00;

assign ret_13_fu_416_p00 = dst_g_V_2_reg_647;

assign ret_13_fu_416_p1 = zext_ln71_1_reg_590;

assign ret_9_fu_395_p0 = ret_9_fu_395_p00;

assign ret_9_fu_395_p00 = trunc_ln_fu_369_p4;

assign ret_9_fu_395_p1 = zext_ln71_1_reg_590;

assign sext_ln329_fu_264_p1 = $signed(trunc_ln329_1_fu_254_p4);

assign shl_ln329_1_fu_242_p3 = {{mul_i_i70_i_reg_572}, {2'd0}};

assign src_V1_address0 = zext_ln83_fu_297_p1;

assign src_b_V_fu_316_p4 = {{src_V1_q0[15:8]}};

assign src_g_V_fu_302_p1 = src_V1_q0[7:0];

assign src_r_V_fu_306_p4 = {{src_V1_q0[23:16]}};

assign trunc_ln329_1_fu_254_p4 = {{add_ln329_fu_249_p2[63:2]}};

assign trunc_ln_fu_369_p4 = {{dst_V_reg_640[23:16]}};

assign zext_ln27_fu_471_p1 = color_V_fu_461_p4;

assign zext_ln71_1_fu_282_p1 = empty_fu_277_p2;

assign zext_ln83_fu_297_p1 = x_reg_185;

always @ (posedge ap_clk) begin
    alpha_cast_i_reg_583[15:8] <= 8'b00000000;
    zext_ln71_1_reg_590[15:8] <= 8'b00000000;
    zext_ln83_reg_606[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //mapchip_dstout_loop_proc
