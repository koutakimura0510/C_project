// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mapchip_src_loop_proc5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        y,
        srcin,
        m_axi_src_AWVALID,
        m_axi_src_AWREADY,
        m_axi_src_AWADDR,
        m_axi_src_AWID,
        m_axi_src_AWLEN,
        m_axi_src_AWSIZE,
        m_axi_src_AWBURST,
        m_axi_src_AWLOCK,
        m_axi_src_AWCACHE,
        m_axi_src_AWPROT,
        m_axi_src_AWQOS,
        m_axi_src_AWREGION,
        m_axi_src_AWUSER,
        m_axi_src_WVALID,
        m_axi_src_WREADY,
        m_axi_src_WDATA,
        m_axi_src_WSTRB,
        m_axi_src_WLAST,
        m_axi_src_WID,
        m_axi_src_WUSER,
        m_axi_src_ARVALID,
        m_axi_src_ARREADY,
        m_axi_src_ARADDR,
        m_axi_src_ARID,
        m_axi_src_ARLEN,
        m_axi_src_ARSIZE,
        m_axi_src_ARBURST,
        m_axi_src_ARLOCK,
        m_axi_src_ARCACHE,
        m_axi_src_ARPROT,
        m_axi_src_ARQOS,
        m_axi_src_ARREGION,
        m_axi_src_ARUSER,
        m_axi_src_RVALID,
        m_axi_src_RREADY,
        m_axi_src_RDATA,
        m_axi_src_RLAST,
        m_axi_src_RID,
        m_axi_src_RUSER,
        m_axi_src_RRESP,
        m_axi_src_BVALID,
        m_axi_src_BREADY,
        m_axi_src_BRESP,
        m_axi_src_BID,
        m_axi_src_BUSER,
        src_V_address0,
        src_V_ce0,
        src_V_we0,
        src_V_d0,
        alpha,
        dstout,
        y_c_din,
        y_c_full_n,
        y_c_write,
        alpha_c_din,
        alpha_c_full_n,
        alpha_c_write,
        dstout_c_din,
        dstout_c_full_n,
        dstout_c_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [6:0] y;
input  [63:0] srcin;
output   m_axi_src_AWVALID;
input   m_axi_src_AWREADY;
output  [63:0] m_axi_src_AWADDR;
output  [0:0] m_axi_src_AWID;
output  [31:0] m_axi_src_AWLEN;
output  [2:0] m_axi_src_AWSIZE;
output  [1:0] m_axi_src_AWBURST;
output  [1:0] m_axi_src_AWLOCK;
output  [3:0] m_axi_src_AWCACHE;
output  [2:0] m_axi_src_AWPROT;
output  [3:0] m_axi_src_AWQOS;
output  [3:0] m_axi_src_AWREGION;
output  [0:0] m_axi_src_AWUSER;
output   m_axi_src_WVALID;
input   m_axi_src_WREADY;
output  [31:0] m_axi_src_WDATA;
output  [3:0] m_axi_src_WSTRB;
output   m_axi_src_WLAST;
output  [0:0] m_axi_src_WID;
output  [0:0] m_axi_src_WUSER;
output   m_axi_src_ARVALID;
input   m_axi_src_ARREADY;
output  [63:0] m_axi_src_ARADDR;
output  [0:0] m_axi_src_ARID;
output  [31:0] m_axi_src_ARLEN;
output  [2:0] m_axi_src_ARSIZE;
output  [1:0] m_axi_src_ARBURST;
output  [1:0] m_axi_src_ARLOCK;
output  [3:0] m_axi_src_ARCACHE;
output  [2:0] m_axi_src_ARPROT;
output  [3:0] m_axi_src_ARQOS;
output  [3:0] m_axi_src_ARREGION;
output  [0:0] m_axi_src_ARUSER;
input   m_axi_src_RVALID;
output   m_axi_src_RREADY;
input  [31:0] m_axi_src_RDATA;
input   m_axi_src_RLAST;
input  [0:0] m_axi_src_RID;
input  [0:0] m_axi_src_RUSER;
input  [1:0] m_axi_src_RRESP;
input   m_axi_src_BVALID;
output   m_axi_src_BREADY;
input  [1:0] m_axi_src_BRESP;
input  [0:0] m_axi_src_BID;
input  [0:0] m_axi_src_BUSER;
output  [5:0] src_V_address0;
output   src_V_ce0;
output   src_V_we0;
output  [23:0] src_V_d0;
input  [7:0] alpha;
input  [63:0] dstout;
output  [5:0] y_c_din;
input   y_c_full_n;
output   y_c_write;
output  [7:0] alpha_c_din;
input   alpha_c_full_n;
output   alpha_c_write;
output  [63:0] dstout_c_din;
input   dstout_c_full_n;
output   dstout_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_src_ARVALID;
reg m_axi_src_RREADY;
reg src_V_ce0;
reg src_V_we0;
reg y_c_write;
reg alpha_c_write;
reg dstout_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    src_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln42_reg_249;
reg    y_c_blk_n;
reg    alpha_c_blk_n;
reg    dstout_c_blk_n;
reg   [6:0] x_reg_162;
reg   [6:0] x_reg_162_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] src_addr_reg_238;
wire   [6:0] add_ln42_fu_217_p2;
reg   [6:0] add_ln42_reg_244;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln42_fu_223_p2;
reg   [0:0] icmp_ln42_reg_249_pp0_iter1_reg;
wire   [23:0] trunc_ln324_fu_229_p1;
reg   [23:0] trunc_ln324_reg_253;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg   [6:0] ap_phi_mux_x_phi_fu_166_p4;
wire   [63:0] zext_ln42_fu_233_p1;
wire  signed [63:0] sext_ln324_fu_207_p1;
reg    ap_block_state1;
wire   [5:0] empty_fu_174_p1;
wire   [13:0] shl_ln324_1_i_fu_179_p3;
wire   [63:0] zext_ln324_fu_187_p1;
wire   [63:0] add_ln324_fu_191_p2;
wire   [61:0] trunc_ln324_2_i_fu_197_p4;
wire    ap_CS_fsm_state12;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_reg_162 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_reg_249 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_reg_162 <= add_ln42_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln42_reg_244 <= add_ln42_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln42_reg_249 <= icmp_ln42_fu_223_p2;
        icmp_ln42_reg_249_pp0_iter1_reg <= icmp_ln42_reg_249;
        x_reg_162_pp0_iter1_reg <= x_reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        src_addr_reg_238 <= sext_ln324_fu_207_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_reg_249 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln324_reg_253 <= trunc_ln324_fu_229_p1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_c_blk_n = alpha_c_full_n;
    end else begin
        alpha_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == alpha_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (dstout_c_full_n == 1'b0) | (y_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_c_write = 1'b1;
    end else begin
        alpha_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_223_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_reg_249 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_phi_fu_166_p4 = add_ln42_reg_244;
    end else begin
        ap_phi_mux_x_phi_fu_166_p4 = x_reg_162;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstout_c_blk_n = dstout_c_full_n;
    end else begin
        dstout_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == alpha_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (dstout_c_full_n == 1'b0) | (y_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstout_c_write = 1'b1;
    end else begin
        dstout_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_src_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_src_ARVALID = 1'b1;
    end else begin
        m_axi_src_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_reg_249 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_src_RREADY = 1'b1;
    end else begin
        m_axi_src_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V_ce0 = 1'b1;
    end else begin
        src_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln42_reg_249_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V_we0 = 1'b1;
    end else begin
        src_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_blk_n_AR = m_axi_src_ARREADY;
    end else begin
        src_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_reg_249 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        src_blk_n_R = m_axi_src_RVALID;
    end else begin
        src_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_c_blk_n = y_c_full_n;
    end else begin
        y_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == alpha_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (dstout_c_full_n == 1'b0) | (y_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_c_write = 1'b1;
    end else begin
        y_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == alpha_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (dstout_c_full_n == 1'b0) | (y_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_src_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln42_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln42_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_fu_191_p2 = (zext_ln324_fu_187_p1 + srcin);

assign add_ln42_fu_217_p2 = (ap_phi_mux_x_phi_fu_166_p4 + 7'd1);

assign alpha_c_din = alpha;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_src_RVALID == 1'b0) & (icmp_ln42_reg_249 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_src_RVALID == 1'b0) & (icmp_ln42_reg_249 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == alpha_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (dstout_c_full_n == 1'b0) | (y_c_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((m_axi_src_RVALID == 1'b0) & (icmp_ln42_reg_249 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dstout_c_din = dstout;

assign empty_fu_174_p1 = y[5:0];

assign icmp_ln42_fu_223_p2 = ((ap_phi_mux_x_phi_fu_166_p4 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_src_ARADDR = src_addr_reg_238;

assign m_axi_src_ARBURST = 2'd0;

assign m_axi_src_ARCACHE = 4'd0;

assign m_axi_src_ARID = 1'd0;

assign m_axi_src_ARLEN = 32'd64;

assign m_axi_src_ARLOCK = 2'd0;

assign m_axi_src_ARPROT = 3'd0;

assign m_axi_src_ARQOS = 4'd0;

assign m_axi_src_ARREGION = 4'd0;

assign m_axi_src_ARSIZE = 3'd0;

assign m_axi_src_ARUSER = 1'd0;

assign m_axi_src_AWADDR = 64'd0;

assign m_axi_src_AWBURST = 2'd0;

assign m_axi_src_AWCACHE = 4'd0;

assign m_axi_src_AWID = 1'd0;

assign m_axi_src_AWLEN = 32'd0;

assign m_axi_src_AWLOCK = 2'd0;

assign m_axi_src_AWPROT = 3'd0;

assign m_axi_src_AWQOS = 4'd0;

assign m_axi_src_AWREGION = 4'd0;

assign m_axi_src_AWSIZE = 3'd0;

assign m_axi_src_AWUSER = 1'd0;

assign m_axi_src_AWVALID = 1'b0;

assign m_axi_src_BREADY = 1'b0;

assign m_axi_src_WDATA = 32'd0;

assign m_axi_src_WID = 1'd0;

assign m_axi_src_WLAST = 1'b0;

assign m_axi_src_WSTRB = 4'd0;

assign m_axi_src_WUSER = 1'd0;

assign m_axi_src_WVALID = 1'b0;

assign sext_ln324_fu_207_p1 = $signed(trunc_ln324_2_i_fu_197_p4);

assign shl_ln324_1_i_fu_179_p3 = {{empty_fu_174_p1}, {8'd0}};

assign src_V_address0 = zext_ln42_fu_233_p1;

assign src_V_d0 = trunc_ln324_reg_253;

assign trunc_ln324_2_i_fu_197_p4 = {{add_ln324_fu_191_p2[63:2]}};

assign trunc_ln324_fu_229_p1 = m_axi_src_RDATA[23:0];

assign y_c_din = empty_fu_174_p1;

assign zext_ln324_fu_187_p1 = shl_ln324_1_i_fu_179_p3;

assign zext_ln42_fu_233_p1 = x_reg_162_pp0_iter1_reg;

endmodule //mapchip_src_loop_proc5
