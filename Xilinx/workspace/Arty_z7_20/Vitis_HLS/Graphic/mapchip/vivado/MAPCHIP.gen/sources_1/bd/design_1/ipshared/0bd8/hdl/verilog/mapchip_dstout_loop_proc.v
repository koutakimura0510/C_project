// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mapchip_dstout_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_V1_address0,
        src_V1_ce0,
        src_V1_q0,
        alpha_dout,
        alpha_empty_n,
        alpha_read,
        y_dout,
        y_empty_n,
        y_read,
        dstout_dout,
        dstout_empty_n,
        dstout_read,
        m_axi_dst_AWVALID,
        m_axi_dst_AWREADY,
        m_axi_dst_AWADDR,
        m_axi_dst_AWID,
        m_axi_dst_AWLEN,
        m_axi_dst_AWSIZE,
        m_axi_dst_AWBURST,
        m_axi_dst_AWLOCK,
        m_axi_dst_AWCACHE,
        m_axi_dst_AWPROT,
        m_axi_dst_AWQOS,
        m_axi_dst_AWREGION,
        m_axi_dst_AWUSER,
        m_axi_dst_WVALID,
        m_axi_dst_WREADY,
        m_axi_dst_WDATA,
        m_axi_dst_WSTRB,
        m_axi_dst_WLAST,
        m_axi_dst_WID,
        m_axi_dst_WUSER,
        m_axi_dst_ARVALID,
        m_axi_dst_ARREADY,
        m_axi_dst_ARADDR,
        m_axi_dst_ARID,
        m_axi_dst_ARLEN,
        m_axi_dst_ARSIZE,
        m_axi_dst_ARBURST,
        m_axi_dst_ARLOCK,
        m_axi_dst_ARCACHE,
        m_axi_dst_ARPROT,
        m_axi_dst_ARQOS,
        m_axi_dst_ARREGION,
        m_axi_dst_ARUSER,
        m_axi_dst_RVALID,
        m_axi_dst_RREADY,
        m_axi_dst_RDATA,
        m_axi_dst_RLAST,
        m_axi_dst_RID,
        m_axi_dst_RUSER,
        m_axi_dst_RRESP,
        m_axi_dst_BVALID,
        m_axi_dst_BREADY,
        m_axi_dst_BRESP,
        m_axi_dst_BID,
        m_axi_dst_BUSER
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp0_stage0 = 9'd8;
parameter    ap_ST_fsm_state11 = 9'd16;
parameter    ap_ST_fsm_state12 = 9'd32;
parameter    ap_ST_fsm_state13 = 9'd64;
parameter    ap_ST_fsm_state14 = 9'd128;
parameter    ap_ST_fsm_state15 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] src_V1_address0;
output   src_V1_ce0;
input  [23:0] src_V1_q0;
input  [7:0] alpha_dout;
input   alpha_empty_n;
output   alpha_read;
input  [5:0] y_dout;
input   y_empty_n;
output   y_read;
input  [63:0] dstout_dout;
input   dstout_empty_n;
output   dstout_read;
output   m_axi_dst_AWVALID;
input   m_axi_dst_AWREADY;
output  [63:0] m_axi_dst_AWADDR;
output  [0:0] m_axi_dst_AWID;
output  [31:0] m_axi_dst_AWLEN;
output  [2:0] m_axi_dst_AWSIZE;
output  [1:0] m_axi_dst_AWBURST;
output  [1:0] m_axi_dst_AWLOCK;
output  [3:0] m_axi_dst_AWCACHE;
output  [2:0] m_axi_dst_AWPROT;
output  [3:0] m_axi_dst_AWQOS;
output  [3:0] m_axi_dst_AWREGION;
output  [0:0] m_axi_dst_AWUSER;
output   m_axi_dst_WVALID;
input   m_axi_dst_WREADY;
output  [31:0] m_axi_dst_WDATA;
output  [3:0] m_axi_dst_WSTRB;
output   m_axi_dst_WLAST;
output  [0:0] m_axi_dst_WID;
output  [0:0] m_axi_dst_WUSER;
output   m_axi_dst_ARVALID;
input   m_axi_dst_ARREADY;
output  [63:0] m_axi_dst_ARADDR;
output  [0:0] m_axi_dst_ARID;
output  [31:0] m_axi_dst_ARLEN;
output  [2:0] m_axi_dst_ARSIZE;
output  [1:0] m_axi_dst_ARBURST;
output  [1:0] m_axi_dst_ARLOCK;
output  [3:0] m_axi_dst_ARCACHE;
output  [2:0] m_axi_dst_ARPROT;
output  [3:0] m_axi_dst_ARQOS;
output  [3:0] m_axi_dst_ARREGION;
output  [0:0] m_axi_dst_ARUSER;
input   m_axi_dst_RVALID;
output   m_axi_dst_RREADY;
input  [31:0] m_axi_dst_RDATA;
input   m_axi_dst_RLAST;
input  [0:0] m_axi_dst_RID;
input  [0:0] m_axi_dst_RUSER;
input  [1:0] m_axi_dst_RRESP;
input   m_axi_dst_BVALID;
output   m_axi_dst_BREADY;
input  [1:0] m_axi_dst_BRESP;
input  [0:0] m_axi_dst_BID;
input  [0:0] m_axi_dst_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V1_ce0;
reg alpha_read;
reg y_read;
reg dstout_read;
reg m_axi_dst_AWVALID;
reg m_axi_dst_WVALID;
reg m_axi_dst_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    alpha_blk_n;
reg    y_blk_n;
reg    dstout_blk_n;
reg    dst_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    dst_blk_n_W;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln47_reg_415;
reg   [0:0] icmp_ln47_reg_415_pp0_iter5_reg;
reg    dst_blk_n_B;
wire    ap_CS_fsm_state15;
reg   [6:0] x_reg_155;
reg   [7:0] alpha_read_reg_381;
reg   [5:0] y_read_reg_386;
reg   [63:0] dstout_read_reg_392;
reg   [63:0] dst_addr_reg_397;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln22_fu_241_p1;
reg   [15:0] zext_ln22_reg_403;
wire   [6:0] add_ln47_fu_244_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln47_fu_250_p2;
reg   [0:0] icmp_ln47_reg_415_pp0_iter1_reg;
reg   [0:0] icmp_ln47_reg_415_pp0_iter2_reg;
reg   [0:0] icmp_ln47_reg_415_pp0_iter3_reg;
reg   [0:0] icmp_ln47_reg_415_pp0_iter4_reg;
wire   [7:0] src_g_V_fu_261_p1;
reg   [7:0] src_g_V_reg_424;
reg   [7:0] trunc_ln_reg_429;
reg   [7:0] r_reg_434;
reg   [7:0] trunc_ln2_reg_454;
reg   [7:0] trunc_ln3_reg_459;
reg   [7:0] tmp_2_reg_464;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire   [63:0] zext_ln47_1_fu_256_p1;
wire  signed [63:0] sext_ln329_fu_231_p1;
wire    ap_block_pp0_stage0_01001;
reg    ap_block_state1;
wire   [14:0] tmp_1_fu_166_p3;
wire   [12:0] tmp_3_fu_177_p3;
wire   [15:0] zext_ln47_fu_173_p1;
wire   [15:0] p_cast16_i_fu_184_p1;
wire   [15:0] add_ln49_fu_188_p2;
wire   [9:0] tmp_fu_194_p4;
wire   [17:0] shl_ln329_1_fu_204_p3;
wire   [63:0] zext_ln329_fu_212_p1;
wire   [63:0] add_ln329_fu_216_p2;
wire   [61:0] trunc_ln329_1_fu_221_p4;
wire   [7:0] mul_ln213_fu_294_p0;
wire   [7:0] mul_ln213_fu_294_p1;
wire   [7:0] mul_ln213_1_fu_299_p0;
wire   [7:0] mul_ln213_1_fu_299_p1;
wire   [7:0] mul_ln1364_fu_304_p0;
wire   [7:0] mul_ln1364_fu_304_p1;
wire   [15:0] mul_ln1364_fu_304_p2;
wire   [15:0] mul_ln213_fu_294_p2;
wire   [15:0] mul_ln213_1_fu_299_p2;
wire   [32:0] grp_fu_360_p2;
wire   [32:0] grp_fu_367_p2;
wire   [32:0] grp_fu_374_p2;
wire   [23:0] or_ln1349_1_fu_348_p4;
wire   [15:0] grp_fu_360_p0;
wire   [17:0] grp_fu_360_p1;
wire   [15:0] grp_fu_367_p0;
wire   [17:0] grp_fu_367_p1;
wire   [15:0] grp_fu_374_p0;
wire   [17:0] grp_fu_374_p1;
reg    grp_fu_360_ce;
reg    grp_fu_367_ce;
reg    grp_fu_374_ce;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [32:0] grp_fu_360_p00;
wire   [32:0] grp_fu_367_p00;
wire   [32:0] grp_fu_374_p00;
wire   [15:0] mul_ln1364_fu_304_p00;
wire   [15:0] mul_ln213_1_fu_299_p00;
wire   [15:0] mul_ln213_fu_294_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

mapchip_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U10(
    .din0(mul_ln213_fu_294_p0),
    .din1(mul_ln213_fu_294_p1),
    .dout(mul_ln213_fu_294_p2)
);

mapchip_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U11(
    .din0(mul_ln213_1_fu_299_p0),
    .din1(mul_ln213_1_fu_299_p1),
    .dout(mul_ln213_1_fu_299_p2)
);

mapchip_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U12(
    .din0(mul_ln1364_fu_304_p0),
    .din1(mul_ln1364_fu_304_p1),
    .dout(mul_ln1364_fu_304_p2)
);

mapchip_mul_mul_16ns_18ns_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_16ns_18ns_33_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_360_p0),
    .din1(grp_fu_360_p1),
    .ce(grp_fu_360_ce),
    .dout(grp_fu_360_p2)
);

mapchip_mul_mul_16ns_18ns_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_16ns_18ns_33_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_367_p0),
    .din1(grp_fu_367_p1),
    .ce(grp_fu_367_ce),
    .dout(grp_fu_367_p2)
);

mapchip_mul_mul_16ns_18ns_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_16ns_18ns_33_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_374_p0),
    .din1(grp_fu_374_p1),
    .ce(grp_fu_374_ce),
    .dout(grp_fu_374_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_155 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln47_fu_250_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_155 <= add_ln47_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        alpha_read_reg_381 <= alpha_dout;
        dstout_read_reg_392 <= dstout_dout;
        y_read_reg_386 <= y_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_addr_reg_397 <= sext_ln329_fu_231_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln47_reg_415 <= icmp_ln47_fu_250_p2;
        icmp_ln47_reg_415_pp0_iter1_reg <= icmp_ln47_reg_415;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln47_reg_415_pp0_iter2_reg <= icmp_ln47_reg_415_pp0_iter1_reg;
        icmp_ln47_reg_415_pp0_iter3_reg <= icmp_ln47_reg_415_pp0_iter2_reg;
        icmp_ln47_reg_415_pp0_iter4_reg <= icmp_ln47_reg_415_pp0_iter3_reg;
        icmp_ln47_reg_415_pp0_iter5_reg <= icmp_ln47_reg_415_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln47_reg_415 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_reg_434 <= {{src_V1_q0[15:8]}};
        src_g_V_reg_424 <= src_g_V_fu_261_p1;
        trunc_ln_reg_429 <= {{src_V1_q0[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_reg_415_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_464 <= {{grp_fu_374_p2[31:24]}};
        trunc_ln2_reg_454 <= {{grp_fu_360_p2[31:24]}};
        trunc_ln3_reg_459 <= {{grp_fu_367_p2[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln22_reg_403[7 : 0] <= zext_ln22_fu_241_p1[7 : 0];
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_blk_n = alpha_empty_n;
    end else begin
        alpha_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (y_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_read = 1'b1;
    end else begin
        alpha_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln47_fu_250_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_blk_n_AW = m_axi_dst_AWREADY;
    end else begin
        dst_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_blk_n_B = m_axi_dst_BVALID;
    end else begin
        dst_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln47_reg_415_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_blk_n_W = m_axi_dst_WREADY;
    end else begin
        dst_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstout_blk_n = dstout_empty_n;
    end else begin
        dstout_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (y_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstout_read = 1'b1;
    end else begin
        dstout_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_360_ce = 1'b1;
    end else begin
        grp_fu_360_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_367_ce = 1'b1;
    end else begin
        grp_fu_367_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_374_ce = 1'b1;
    end else begin
        grp_fu_374_ce = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_dst_AWVALID = 1'b1;
    end else begin
        m_axi_dst_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_dst_BREADY = 1'b1;
    end else begin
        m_axi_dst_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_reg_415_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        m_axi_dst_WVALID = 1'b1;
    end else begin
        m_axi_dst_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V1_ce0 = 1'b1;
    end else begin
        src_V1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_blk_n = y_empty_n;
    end else begin
        y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstout_empty_n == 1'b0) | (y_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_read = 1'b1;
    end else begin
        y_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((dstout_empty_n == 1'b0) | (y_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_dst_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln47_fu_250_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln47_fu_250_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((m_axi_dst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln329_fu_216_p2 = (dstout_read_reg_392 + zext_ln329_fu_212_p1);

assign add_ln47_fu_244_p2 = (x_reg_155 + 7'd1);

assign add_ln49_fu_188_p2 = (zext_ln47_fu_173_p1 + p_cast16_i_fu_184_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((dstout_empty_n == 1'b0) | (y_empty_n == 1'b0) | (1'b0 == alpha_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_io = ((m_axi_dst_WREADY == 1'b0) & (icmp_ln47_reg_415_pp0_iter5_reg == 1'd0));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_360_p0 = grp_fu_360_p00;

assign grp_fu_360_p00 = mul_ln1364_fu_304_p2;

assign grp_fu_360_p1 = 33'd65794;

assign grp_fu_367_p0 = grp_fu_367_p00;

assign grp_fu_367_p00 = mul_ln213_fu_294_p2;

assign grp_fu_367_p1 = 33'd65794;

assign grp_fu_374_p0 = grp_fu_374_p00;

assign grp_fu_374_p00 = mul_ln213_1_fu_299_p2;

assign grp_fu_374_p1 = 33'd65794;

assign icmp_ln47_fu_250_p2 = ((x_reg_155 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_dst_ARADDR = 64'd0;

assign m_axi_dst_ARBURST = 2'd0;

assign m_axi_dst_ARCACHE = 4'd0;

assign m_axi_dst_ARID = 1'd0;

assign m_axi_dst_ARLEN = 32'd0;

assign m_axi_dst_ARLOCK = 2'd0;

assign m_axi_dst_ARPROT = 3'd0;

assign m_axi_dst_ARQOS = 4'd0;

assign m_axi_dst_ARREGION = 4'd0;

assign m_axi_dst_ARSIZE = 3'd0;

assign m_axi_dst_ARUSER = 1'd0;

assign m_axi_dst_ARVALID = 1'b0;

assign m_axi_dst_AWADDR = dst_addr_reg_397;

assign m_axi_dst_AWBURST = 2'd0;

assign m_axi_dst_AWCACHE = 4'd0;

assign m_axi_dst_AWID = 1'd0;

assign m_axi_dst_AWLEN = 32'd64;

assign m_axi_dst_AWLOCK = 2'd0;

assign m_axi_dst_AWPROT = 3'd0;

assign m_axi_dst_AWQOS = 4'd0;

assign m_axi_dst_AWREGION = 4'd0;

assign m_axi_dst_AWSIZE = 3'd0;

assign m_axi_dst_AWUSER = 1'd0;

assign m_axi_dst_RREADY = 1'b0;

assign m_axi_dst_WDATA = or_ln1349_1_fu_348_p4;

assign m_axi_dst_WID = 1'd0;

assign m_axi_dst_WLAST = 1'b0;

assign m_axi_dst_WSTRB = 4'd15;

assign m_axi_dst_WUSER = 1'd0;

assign mul_ln1364_fu_304_p0 = mul_ln1364_fu_304_p00;

assign mul_ln1364_fu_304_p00 = src_g_V_reg_424;

assign mul_ln1364_fu_304_p1 = zext_ln22_reg_403;

assign mul_ln213_1_fu_299_p0 = mul_ln213_1_fu_299_p00;

assign mul_ln213_1_fu_299_p00 = r_reg_434;

assign mul_ln213_1_fu_299_p1 = zext_ln22_reg_403;

assign mul_ln213_fu_294_p0 = mul_ln213_fu_294_p00;

assign mul_ln213_fu_294_p00 = trunc_ln_reg_429;

assign mul_ln213_fu_294_p1 = zext_ln22_reg_403;

assign or_ln1349_1_fu_348_p4 = {{{trunc_ln3_reg_459}, {tmp_2_reg_464}}, {trunc_ln2_reg_454}};

assign p_cast16_i_fu_184_p1 = tmp_3_fu_177_p3;

assign sext_ln329_fu_231_p1 = $signed(trunc_ln329_1_fu_221_p4);

assign shl_ln329_1_fu_204_p3 = {{tmp_fu_194_p4}, {8'd0}};

assign src_V1_address0 = zext_ln47_1_fu_256_p1;

assign src_g_V_fu_261_p1 = src_V1_q0[7:0];

assign tmp_1_fu_166_p3 = {{y_read_reg_386}, {9'd0}};

assign tmp_3_fu_177_p3 = {{y_read_reg_386}, {7'd0}};

assign tmp_fu_194_p4 = {{add_ln49_fu_188_p2[15:6]}};

assign trunc_ln329_1_fu_221_p4 = {{add_ln329_fu_216_p2[63:2]}};

assign zext_ln22_fu_241_p1 = alpha_read_reg_381;

assign zext_ln329_fu_212_p1 = shl_ln329_1_fu_204_p3;

assign zext_ln47_1_fu_256_p1 = x_reg_155;

assign zext_ln47_fu_173_p1 = tmp_1_fu_166_p3;

always @ (posedge ap_clk) begin
    zext_ln22_reg_403[15:8] <= 8'b00000000;
end

endmodule //mapchip_dstout_loop_proc
