-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mapchip_color_dstout_loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mapchip_draw_xsize_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapchip_draw_xsize_empty_n : IN STD_LOGIC;
    mapchip_draw_xsize_read : OUT STD_LOGIC;
    src_V1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_V1_ce0 : OUT STD_LOGIC;
    src_V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_V2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_V2_ce0 : OUT STD_LOGIC;
    dst_V2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    com_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    com_empty_n : IN STD_LOGIC;
    com_read : OUT STD_LOGIC;
    fill_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    fill_empty_n : IN STD_LOGIC;
    fill_read : OUT STD_LOGIC;
    alpha_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    alpha_empty_n : IN STD_LOGIC;
    alpha_read : OUT STD_LOGIC;
    y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    y_empty_n : IN STD_LOGIC;
    y_read : OUT STD_LOGIC;
    frame_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    frame_size_empty_n : IN STD_LOGIC;
    frame_size_read : OUT STD_LOGIC;
    dstout_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    dstout_empty_n : IN STD_LOGIC;
    dstout_read : OUT STD_LOGIC;
    m_axi_dst_AWVALID : OUT STD_LOGIC;
    m_axi_dst_AWREADY : IN STD_LOGIC;
    m_axi_dst_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dst_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dst_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_WVALID : OUT STD_LOGIC;
    m_axi_dst_WREADY : IN STD_LOGIC;
    m_axi_dst_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dst_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_WLAST : OUT STD_LOGIC;
    m_axi_dst_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_ARVALID : OUT STD_LOGIC;
    m_axi_dst_ARREADY : IN STD_LOGIC;
    m_axi_dst_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dst_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dst_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_RVALID : IN STD_LOGIC;
    m_axi_dst_RREADY : OUT STD_LOGIC;
    m_axi_dst_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dst_RLAST : IN STD_LOGIC;
    m_axi_dst_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_BVALID : IN STD_LOGIC;
    m_axi_dst_BREADY : OUT STD_LOGIC;
    m_axi_dst_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of mapchip_color_dstout_loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv35_20203 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000001000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mapchip_draw_xsize_blk_n : STD_LOGIC;
    signal com_blk_n : STD_LOGIC;
    signal fill_blk_n : STD_LOGIC;
    signal alpha_blk_n : STD_LOGIC;
    signal y_blk_n : STD_LOGIC;
    signal frame_size_blk_n : STD_LOGIC;
    signal dstout_blk_n : STD_LOGIC;
    signal dst_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dst_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln878_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal x_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_draw_xsize_read_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_read_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_read_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_size_read_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstout_read_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal com_r_V_reg_703 : STD_LOGIC_VECTOR (7 downto 0);
    signal com_b_V_reg_708 : STD_LOGIC_VECTOR (7 downto 0);
    signal com_g_fu_232_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal com_g_reg_713 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_r_V_1_reg_718 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_b_V_1_reg_723 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_g_V_1_fu_256_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_g_V_1_reg_728 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_i_i70_i_reg_743 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal dst_addr_reg_748 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln75_fu_304_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln75_reg_754 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln87_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state20_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln878_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_766_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_336_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_785 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_785_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_r_V_3_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_r_V_3_reg_800 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_r_V_3_reg_800_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_b_V_3_fu_428_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_b_V_3_reg_805 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_b_V_3_reg_805_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_g_V_3_fu_435_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_g_V_3_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_g_V_3_reg_810_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1345_6_fu_448_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_r_V_reg_882 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_b_V_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_g_V_reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal zext_ln87_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln329_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln329_1_fu_272_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln329_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln329_1_fu_284_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal dst_g_V_3_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1345_1_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_fu_380_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_r_V_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_b_V_fu_356_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_g_V_fu_324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln870_1_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_2_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_1_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_12_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_11_fu_458_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_11_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1345_1_fu_452_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_11_fu_458_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_14_fu_471_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_14_fu_471_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_14_fu_471_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_16_fu_484_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_16_fu_484_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_16_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_608_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_599_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_590_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_617_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_fu_503_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_624_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_1_fu_516_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_2_fu_529_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_644_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_650_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_656_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_663_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_670_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal color_V_fu_578_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_590_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_590_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_599_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_608_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_608_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_617_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_617_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_624_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_624_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_631_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_631_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_638_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_638_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_644_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_644_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_650_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_650_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_656_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_656_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_663_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_663_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_670_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_670_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_590_ce : STD_LOGIC;
    signal grp_fu_599_ce : STD_LOGIC;
    signal grp_fu_608_ce : STD_LOGIC;
    signal grp_fu_617_ce : STD_LOGIC;
    signal grp_fu_624_ce : STD_LOGIC;
    signal grp_fu_631_ce : STD_LOGIC;
    signal grp_fu_638_ce : STD_LOGIC;
    signal grp_fu_644_ce : STD_LOGIC;
    signal grp_fu_650_ce : STD_LOGIC;
    signal grp_fu_656_ce : STD_LOGIC;
    signal grp_fu_663_ce : STD_LOGIC;
    signal grp_fu_670_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_266_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_266_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_590_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_590_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_599_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_599_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_608_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_608_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_617_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_624_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_631_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_638_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_644_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_650_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_656_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_663_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_670_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal ret_11_fu_458_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_14_fu_471_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_16_fu_484_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mapchip_color_mul_32ns_32ns_62_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component mapchip_color_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mapchip_color_mac_muladd_8ns_8ns_16ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component mapchip_color_mul_mul_17ns_19ns_35_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component mapchip_color_mul_mul_10ns_8ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    mul_32ns_32ns_62_2_1_U56 : component mapchip_color_mul_32ns_32ns_62_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        din1 => grp_fu_266_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    mul_8ns_8ns_16_1_1_U57 : component mapchip_color_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => ret_11_fu_458_p0,
        din1 => ret_11_fu_458_p1,
        dout => ret_11_fu_458_p2);

    mul_8ns_8ns_16_1_1_U58 : component mapchip_color_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => ret_14_fu_471_p0,
        din1 => ret_14_fu_471_p1,
        dout => ret_14_fu_471_p2);

    mul_8ns_8ns_16_1_1_U59 : component mapchip_color_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => ret_16_fu_484_p0,
        din1 => ret_16_fu_484_p1,
        dout => ret_16_fu_484_p2);

    mac_muladd_8ns_8ns_16ns_17_4_1_U60 : component mapchip_color_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_590_p0,
        din1 => grp_fu_590_p1,
        din2 => grp_fu_590_p2,
        ce => grp_fu_590_ce,
        dout => grp_fu_590_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U61 : component mapchip_color_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_599_p0,
        din1 => grp_fu_599_p1,
        din2 => grp_fu_599_p2,
        ce => grp_fu_599_ce,
        dout => grp_fu_599_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U62 : component mapchip_color_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_608_p0,
        din1 => grp_fu_608_p1,
        din2 => grp_fu_608_p2,
        ce => grp_fu_608_ce,
        dout => grp_fu_608_p3);

    mul_mul_17ns_19ns_35_4_1_U63 : component mapchip_color_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_617_p0,
        din1 => grp_fu_617_p1,
        ce => grp_fu_617_ce,
        dout => grp_fu_617_p2);

    mul_mul_17ns_19ns_35_4_1_U64 : component mapchip_color_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_624_p0,
        din1 => grp_fu_624_p1,
        ce => grp_fu_624_ce,
        dout => grp_fu_624_p2);

    mul_mul_17ns_19ns_35_4_1_U65 : component mapchip_color_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_631_p0,
        din1 => grp_fu_631_p1,
        ce => grp_fu_631_ce,
        dout => grp_fu_631_p2);

    mul_mul_10ns_8ns_17_4_1_U66 : component mapchip_color_mul_mul_10ns_8ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_638_p0,
        din1 => grp_fu_638_p1,
        ce => grp_fu_638_ce,
        dout => grp_fu_638_p2);

    mul_mul_10ns_8ns_17_4_1_U67 : component mapchip_color_mul_mul_10ns_8ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_644_p0,
        din1 => grp_fu_644_p1,
        ce => grp_fu_644_ce,
        dout => grp_fu_644_p2);

    mul_mul_10ns_8ns_17_4_1_U68 : component mapchip_color_mul_mul_10ns_8ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_650_p0,
        din1 => grp_fu_650_p1,
        ce => grp_fu_650_ce,
        dout => grp_fu_650_p2);

    mul_mul_17ns_19ns_35_4_1_U69 : component mapchip_color_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_656_p0,
        din1 => grp_fu_656_p1,
        ce => grp_fu_656_ce,
        dout => grp_fu_656_p2);

    mul_mul_17ns_19ns_35_4_1_U70 : component mapchip_color_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_663_p0,
        din1 => grp_fu_663_p1,
        ce => grp_fu_663_ce,
        dout => grp_fu_663_p2);

    mul_mul_17ns_19ns_35_4_1_U71 : component mapchip_color_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_670_p0,
        din1 => grp_fu_670_p1,
        ce => grp_fu_670_ce,
        dout => grp_fu_670_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_dst_BVALID = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((m_axi_dst_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif (((m_axi_dst_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    x_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_dst_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_reg_201 <= ap_const_lv32_0;
            elsif (((icmp_ln878_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_reg_201 <= add_ln87_fu_307_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                alpha_read_reg_683 <= alpha_dout;
                com_b_V_reg_708 <= com_dout(15 downto 8);
                com_g_reg_713 <= com_g_fu_232_p1;
                com_r_V_reg_703 <= com_dout(23 downto 16);
                dstout_read_reg_698 <= dstout_dout;
                frame_size_read_reg_693 <= frame_size_dout;
                mapchip_draw_xsize_read_reg_677 <= mapchip_draw_xsize_dout;
                src_b_V_1_reg_723 <= fill_dout(15 downto 8);
                src_g_V_1_reg_728 <= src_g_V_1_fu_256_p1;
                src_r_V_1_reg_718 <= fill_dout(23 downto 16);
                y_read_reg_688 <= y_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                dst_addr_reg_748 <= sext_ln329_fu_294_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_reg_766_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dst_b_V_reg_887 <= grp_fu_663_p2(32 downto 25);
                dst_g_V_reg_892 <= grp_fu_670_p2(32 downto 25);
                dst_r_V_reg_882 <= grp_fu_656_p2(32 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln878_reg_766 <= icmp_ln878_fu_313_p2;
                icmp_ln878_reg_766_pp0_iter1_reg <= icmp_ln878_reg_766;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln878_reg_766_pp0_iter10_reg <= icmp_ln878_reg_766_pp0_iter9_reg;
                icmp_ln878_reg_766_pp0_iter11_reg <= icmp_ln878_reg_766_pp0_iter10_reg;
                icmp_ln878_reg_766_pp0_iter12_reg <= icmp_ln878_reg_766_pp0_iter11_reg;
                icmp_ln878_reg_766_pp0_iter13_reg <= icmp_ln878_reg_766_pp0_iter12_reg;
                icmp_ln878_reg_766_pp0_iter2_reg <= icmp_ln878_reg_766_pp0_iter1_reg;
                icmp_ln878_reg_766_pp0_iter3_reg <= icmp_ln878_reg_766_pp0_iter2_reg;
                icmp_ln878_reg_766_pp0_iter4_reg <= icmp_ln878_reg_766_pp0_iter3_reg;
                icmp_ln878_reg_766_pp0_iter5_reg <= icmp_ln878_reg_766_pp0_iter4_reg;
                icmp_ln878_reg_766_pp0_iter6_reg <= icmp_ln878_reg_766_pp0_iter5_reg;
                icmp_ln878_reg_766_pp0_iter7_reg <= icmp_ln878_reg_766_pp0_iter6_reg;
                icmp_ln878_reg_766_pp0_iter8_reg <= icmp_ln878_reg_766_pp0_iter7_reg;
                icmp_ln878_reg_766_pp0_iter9_reg <= icmp_ln878_reg_766_pp0_iter8_reg;
                src_b_V_3_reg_805_pp0_iter2_reg <= src_b_V_3_reg_805;
                src_g_V_3_reg_810_pp0_iter2_reg <= src_g_V_3_reg_810;
                src_r_V_3_reg_800_pp0_iter2_reg <= src_r_V_3_reg_800;
                trunc_ln_reg_785_pp0_iter2_reg <= trunc_ln_reg_785;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_i_i70_i_reg_743 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_reg_766 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_b_V_3_reg_805 <= src_b_V_3_fu_428_p3;
                src_g_V_3_reg_810 <= src_g_V_3_fu_435_p3;
                src_r_V_3_reg_800 <= src_r_V_3_fu_421_p3;
                trunc_ln_reg_785 <= src_V1_q0(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    zext_ln75_reg_754(7 downto 0) <= zext_ln75_fu_304_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln75_reg_754(16 downto 8) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n, m_axi_dst_AWREADY, m_axi_dst_BVALID, ap_CS_fsm_state5, ap_enable_reg_pp0_iter14, ap_CS_fsm_state25, ap_enable_reg_pp0_iter0, icmp_ln878_fu_313_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((m_axi_dst_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln878_fu_313_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln878_fu_313_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_dst_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln329_fu_279_p2 <= std_logic_vector(unsigned(dstout_read_reg_698) + unsigned(shl_ln329_1_fu_272_p3));
    add_ln87_fu_307_p2 <= std_logic_vector(unsigned(x_reg_201) + unsigned(ap_const_lv32_1));

    alpha_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, alpha_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alpha_blk_n <= alpha_empty_n;
        else 
            alpha_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    alpha_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n)
    begin
        if ((not(((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alpha_read <= ap_const_logic_1;
        else 
            alpha_read <= ap_const_logic_0;
        end if; 
    end process;

    and_ln32_1_fu_415_p2 <= (icmp_ln870_fu_394_p2 and and_ln32_fu_409_p2);
    and_ln32_fu_409_p2 <= (icmp_ln870_2_fu_404_p2 and icmp_ln870_1_fu_399_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(10);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_state20_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_state20_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n)
    begin
                ap_block_state1 <= ((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_io_assign_proc : process(m_axi_dst_WREADY, icmp_ln878_reg_766_pp0_iter13_reg)
    begin
                ap_block_state20_io <= ((m_axi_dst_WREADY = ap_const_logic_0) and (icmp_ln878_reg_766_pp0_iter13_reg = ap_const_lv1_0));
    end process;

        ap_block_state20_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln878_fu_313_p2)
    begin
        if ((icmp_ln878_fu_313_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_dst_BVALID, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_dst_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_dst_BVALID, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_dst_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    color_V_fu_578_p4 <= ((dst_r_V_reg_882 & dst_b_V_reg_887) & dst_g_V_reg_892);

    com_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, com_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            com_blk_n <= com_empty_n;
        else 
            com_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    com_g_fu_232_p1 <= com_dout(8 - 1 downto 0);

    com_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n)
    begin
        if ((not(((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            com_read <= ap_const_logic_1;
        else 
            com_read <= ap_const_logic_0;
        end if; 
    end process;

    dst_V2_address0 <= zext_ln87_fu_318_p1(10 - 1 downto 0);

    dst_V2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_V2_ce0 <= ap_const_logic_1;
        else 
            dst_V2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_blk_n_AW_assign_proc : process(m_axi_dst_AWREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_blk_n_AW <= m_axi_dst_AWREADY;
        else 
            dst_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    dst_blk_n_B_assign_proc : process(m_axi_dst_BVALID, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dst_blk_n_B <= m_axi_dst_BVALID;
        else 
            dst_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    dst_blk_n_W_assign_proc : process(m_axi_dst_WREADY, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0, icmp_ln878_reg_766_pp0_iter13_reg)
    begin
        if (((icmp_ln878_reg_766_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            dst_blk_n_W <= m_axi_dst_WREADY;
        else 
            dst_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    dst_g_V_3_fu_328_p1 <= dst_V2_q0(8 - 1 downto 0);

    dstout_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, dstout_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstout_blk_n <= dstout_empty_n;
        else 
            dstout_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dstout_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n)
    begin
        if ((not(((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstout_read <= ap_const_logic_1;
        else 
            dstout_read <= ap_const_logic_0;
        end if; 
    end process;


    fill_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fill_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fill_blk_n <= fill_empty_n;
        else 
            fill_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fill_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n)
    begin
        if ((not(((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fill_read <= ap_const_logic_1;
        else 
            fill_read <= ap_const_logic_0;
        end if; 
    end process;


    frame_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, frame_size_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            frame_size_blk_n <= frame_size_empty_n;
        else 
            frame_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame_size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n)
    begin
        if ((not(((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            frame_size_read <= ap_const_logic_1;
        else 
            frame_size_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_266_p0 <= grp_fu_266_p00(32 - 1 downto 0);
    grp_fu_266_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_read_reg_688),62));
    grp_fu_266_p1 <= grp_fu_266_p10(32 - 1 downto 0);
    grp_fu_266_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(frame_size_read_reg_693),62));

    grp_fu_590_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_590_ce <= ap_const_logic_1;
        else 
            grp_fu_590_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_590_p0 <= zext_ln1345_6_fu_448_p1(8 - 1 downto 0);
    grp_fu_590_p1 <= grp_fu_590_p10(8 - 1 downto 0);
    grp_fu_590_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_g_V_3_fu_328_p1),16));
    grp_fu_590_p2 <= grp_fu_590_p20(16 - 1 downto 0);
    grp_fu_590_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_16_fu_484_p2),17));

    grp_fu_599_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_599_ce <= ap_const_logic_1;
        else 
            grp_fu_599_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_599_p0 <= grp_fu_599_p00(8 - 1 downto 0);
    grp_fu_599_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_380_p4),16));
    grp_fu_599_p1 <= zext_ln1345_6_fu_448_p1(8 - 1 downto 0);
    grp_fu_599_p2 <= grp_fu_599_p20(16 - 1 downto 0);
    grp_fu_599_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_14_fu_471_p2),17));

    grp_fu_608_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_608_ce <= ap_const_logic_1;
        else 
            grp_fu_608_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_608_p0 <= grp_fu_608_p00(8 - 1 downto 0);
    grp_fu_608_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1345_1_fu_366_p4),16));
    grp_fu_608_p1 <= zext_ln1345_6_fu_448_p1(8 - 1 downto 0);
    grp_fu_608_p2 <= grp_fu_608_p20(16 - 1 downto 0);
    grp_fu_608_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_11_fu_458_p2),17));

    grp_fu_617_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_617_ce <= ap_const_logic_1;
        else 
            grp_fu_617_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_617_p0 <= grp_fu_617_p00(17 - 1 downto 0);
    grp_fu_617_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_608_p3),35));
    grp_fu_617_p1 <= ap_const_lv35_20203(19 - 1 downto 0);

    grp_fu_624_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_624_ce <= ap_const_logic_1;
        else 
            grp_fu_624_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_624_p0 <= grp_fu_624_p00(17 - 1 downto 0);
    grp_fu_624_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_599_p3),35));
    grp_fu_624_p1 <= ap_const_lv35_20203(19 - 1 downto 0);

    grp_fu_631_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_631_ce <= ap_const_logic_1;
        else 
            grp_fu_631_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_631_p0 <= grp_fu_631_p00(17 - 1 downto 0);
    grp_fu_631_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_590_p3),35));
    grp_fu_631_p1 <= ap_const_lv35_20203(19 - 1 downto 0);

    grp_fu_638_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_638_ce <= ap_const_logic_1;
        else 
            grp_fu_638_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_638_p0 <= grp_fu_638_p00(10 - 1 downto 0);
    grp_fu_638_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_503_p4),17));
    grp_fu_638_p1 <= zext_ln75_reg_754(8 - 1 downto 0);

    grp_fu_644_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_644_ce <= ap_const_logic_1;
        else 
            grp_fu_644_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_644_p0 <= grp_fu_644_p00(10 - 1 downto 0);
    grp_fu_644_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_516_p4),17));
    grp_fu_644_p1 <= zext_ln75_reg_754(8 - 1 downto 0);

    grp_fu_650_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_650_ce <= ap_const_logic_1;
        else 
            grp_fu_650_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_650_p0 <= grp_fu_650_p00(10 - 1 downto 0);
    grp_fu_650_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_529_p4),17));
    grp_fu_650_p1 <= zext_ln75_reg_754(8 - 1 downto 0);

    grp_fu_656_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_656_ce <= ap_const_logic_1;
        else 
            grp_fu_656_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_656_p0 <= grp_fu_656_p00(17 - 1 downto 0);
    grp_fu_656_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_638_p2),35));
    grp_fu_656_p1 <= ap_const_lv35_20203(19 - 1 downto 0);

    grp_fu_663_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_663_ce <= ap_const_logic_1;
        else 
            grp_fu_663_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_663_p0 <= grp_fu_663_p00(17 - 1 downto 0);
    grp_fu_663_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_644_p2),35));
    grp_fu_663_p1 <= ap_const_lv35_20203(19 - 1 downto 0);

    grp_fu_670_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_670_ce <= ap_const_logic_1;
        else 
            grp_fu_670_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_670_p0 <= grp_fu_670_p00(17 - 1 downto 0);
    grp_fu_670_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_650_p2),35));
    grp_fu_670_p1 <= ap_const_lv35_20203(19 - 1 downto 0);
    icmp_ln870_1_fu_399_p2 <= "1" when (src_b_V_fu_356_p4 = com_b_V_reg_708) else "0";
    icmp_ln870_2_fu_404_p2 <= "1" when (src_g_V_fu_324_p1 = com_g_reg_713) else "0";
    icmp_ln870_fu_394_p2 <= "1" when (src_r_V_fu_346_p4 = com_r_V_reg_703) else "0";
    icmp_ln878_fu_313_p2 <= "1" when (x_reg_201 = mapchip_draw_xsize_read_reg_677) else "0";
    m_axi_dst_ARADDR <= ap_const_lv64_0;
    m_axi_dst_ARBURST <= ap_const_lv2_0;
    m_axi_dst_ARCACHE <= ap_const_lv4_0;
    m_axi_dst_ARID <= ap_const_lv1_0;
    m_axi_dst_ARLEN <= ap_const_lv32_0;
    m_axi_dst_ARLOCK <= ap_const_lv2_0;
    m_axi_dst_ARPROT <= ap_const_lv3_0;
    m_axi_dst_ARQOS <= ap_const_lv4_0;
    m_axi_dst_ARREGION <= ap_const_lv4_0;
    m_axi_dst_ARSIZE <= ap_const_lv3_0;
    m_axi_dst_ARUSER <= ap_const_lv1_0;
    m_axi_dst_ARVALID <= ap_const_logic_0;
    m_axi_dst_AWADDR <= dst_addr_reg_748;
    m_axi_dst_AWBURST <= ap_const_lv2_0;
    m_axi_dst_AWCACHE <= ap_const_lv4_0;
    m_axi_dst_AWID <= ap_const_lv1_0;
    m_axi_dst_AWLEN <= mapchip_draw_xsize_read_reg_677;
    m_axi_dst_AWLOCK <= ap_const_lv2_0;
    m_axi_dst_AWPROT <= ap_const_lv3_0;
    m_axi_dst_AWQOS <= ap_const_lv4_0;
    m_axi_dst_AWREGION <= ap_const_lv4_0;
    m_axi_dst_AWSIZE <= ap_const_lv3_0;
    m_axi_dst_AWUSER <= ap_const_lv1_0;

    m_axi_dst_AWVALID_assign_proc : process(m_axi_dst_AWREADY, ap_CS_fsm_state5)
    begin
        if (((m_axi_dst_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_dst_AWVALID <= ap_const_logic_1;
        else 
            m_axi_dst_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_dst_BREADY_assign_proc : process(m_axi_dst_BVALID, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (m_axi_dst_BVALID = ap_const_logic_1))) then 
            m_axi_dst_BREADY <= ap_const_logic_1;
        else 
            m_axi_dst_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dst_RREADY <= ap_const_logic_0;
    m_axi_dst_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(color_V_fu_578_p4),32));
    m_axi_dst_WID <= ap_const_lv1_0;
    m_axi_dst_WLAST <= ap_const_logic_0;
    m_axi_dst_WSTRB <= ap_const_lv4_F;
    m_axi_dst_WUSER <= ap_const_lv1_0;

    m_axi_dst_WVALID_assign_proc : process(ap_enable_reg_pp0_iter14, icmp_ln878_reg_766_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln878_reg_766_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            m_axi_dst_WVALID <= ap_const_logic_1;
        else 
            m_axi_dst_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mapchip_draw_xsize_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_blk_n <= mapchip_draw_xsize_empty_n;
        else 
            mapchip_draw_xsize_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapchip_draw_xsize_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n)
    begin
        if ((not(((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_read <= ap_const_logic_1;
        else 
            mapchip_draw_xsize_read <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_380_p4 <= dst_V2_q0(15 downto 8);
    ret_11_fu_458_p0 <= ret_11_fu_458_p00(8 - 1 downto 0);
    ret_11_fu_458_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_r_V_3_reg_800_pp0_iter2_reg),16));
    ret_11_fu_458_p1 <= zext_ln1345_1_fu_452_p1(8 - 1 downto 0);
    ret_12_fu_442_p2 <= (trunc_ln_fu_336_p4 xor ap_const_lv8_FF);
    ret_14_fu_471_p0 <= ret_14_fu_471_p00(8 - 1 downto 0);
    ret_14_fu_471_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_b_V_3_reg_805_pp0_iter2_reg),16));
    ret_14_fu_471_p1 <= zext_ln1345_1_fu_452_p1(8 - 1 downto 0);
    ret_16_fu_484_p0 <= ret_16_fu_484_p00(8 - 1 downto 0);
    ret_16_fu_484_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_g_V_3_reg_810_pp0_iter2_reg),16));
    ret_16_fu_484_p1 <= zext_ln1345_1_fu_452_p1(8 - 1 downto 0);
        sext_ln329_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln329_1_fu_284_p4),64));

    shl_ln329_1_fu_272_p3 <= (mul_i_i70_i_reg_743 & ap_const_lv2_0);
    src_V1_address0 <= zext_ln87_fu_318_p1(10 - 1 downto 0);

    src_V1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_V1_ce0 <= ap_const_logic_1;
        else 
            src_V1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src_b_V_3_fu_428_p3 <= 
        src_b_V_1_reg_723 when (and_ln32_1_fu_415_p2(0) = '1') else 
        src_b_V_fu_356_p4;
    src_b_V_fu_356_p4 <= src_V1_q0(15 downto 8);
    src_g_V_1_fu_256_p1 <= fill_dout(8 - 1 downto 0);
    src_g_V_3_fu_435_p3 <= 
        src_g_V_1_reg_728 when (and_ln32_1_fu_415_p2(0) = '1') else 
        src_g_V_fu_324_p1;
    src_g_V_fu_324_p1 <= src_V1_q0(8 - 1 downto 0);
    src_r_V_3_fu_421_p3 <= 
        src_r_V_1_reg_718 when (and_ln32_1_fu_415_p2(0) = '1') else 
        src_r_V_fu_346_p4;
    src_r_V_fu_346_p4 <= src_V1_q0(23 downto 16);
    tmp_1_fu_516_p4 <= grp_fu_624_p2(34 downto 25);
    tmp_2_fu_529_p4 <= grp_fu_631_p2(34 downto 25);
    tmp_fu_503_p4 <= grp_fu_617_p2(34 downto 25);
    trunc_ln1345_1_fu_366_p4 <= dst_V2_q0(23 downto 16);
    trunc_ln329_1_fu_284_p4 <= add_ln329_fu_279_p2(63 downto 2);
    trunc_ln_fu_336_p4 <= src_V1_q0(31 downto 24);

    y_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_blk_n <= y_empty_n;
        else 
            y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, com_empty_n, fill_empty_n, alpha_empty_n, y_empty_n, frame_size_empty_n, dstout_empty_n)
    begin
        if ((not(((dstout_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (fill_empty_n = ap_const_logic_0) or (com_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_read <= ap_const_logic_1;
        else 
            y_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1345_1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_785_pp0_iter2_reg),16));
    zext_ln1345_6_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_12_fu_442_p2),16));
    zext_ln75_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(alpha_read_reg_683),17));
    zext_ln87_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_201),64));
end behav;
