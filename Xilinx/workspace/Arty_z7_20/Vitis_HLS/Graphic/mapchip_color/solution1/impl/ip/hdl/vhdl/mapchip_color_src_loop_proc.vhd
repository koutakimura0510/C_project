-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mapchip_color_src_loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mapchip_draw_xsize_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapchip_draw_xsize_empty_n : IN STD_LOGIC;
    mapchip_draw_xsize_read : OUT STD_LOGIC;
    id_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    id_empty_n : IN STD_LOGIC;
    id_read : OUT STD_LOGIC;
    mapchip_maxheight_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapchip_maxheight_empty_n : IN STD_LOGIC;
    mapchip_maxheight_read : OUT STD_LOGIC;
    ystart_pos_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ystart_pos_empty_n : IN STD_LOGIC;
    ystart_pos_read : OUT STD_LOGIC;
    mapchip_maxwidth_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mapchip_maxwidth_empty_n : IN STD_LOGIC;
    mapchip_maxwidth_read : OUT STD_LOGIC;
    xstart_pos_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    xstart_pos_empty_n : IN STD_LOGIC;
    xstart_pos_read : OUT STD_LOGIC;
    y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    y_empty_n : IN STD_LOGIC;
    y_read : OUT STD_LOGIC;
    srcin_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    srcin_empty_n : IN STD_LOGIC;
    srcin_read : OUT STD_LOGIC;
    m_axi_src_AWVALID : OUT STD_LOGIC;
    m_axi_src_AWREADY : IN STD_LOGIC;
    m_axi_src_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_src_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_WVALID : OUT STD_LOGIC;
    m_axi_src_WREADY : IN STD_LOGIC;
    m_axi_src_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_WLAST : OUT STD_LOGIC;
    m_axi_src_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_ARVALID : OUT STD_LOGIC;
    m_axi_src_ARREADY : IN STD_LOGIC;
    m_axi_src_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_src_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RVALID : IN STD_LOGIC;
    m_axi_src_RREADY : OUT STD_LOGIC;
    m_axi_src_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_RLAST : IN STD_LOGIC;
    m_axi_src_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BVALID : IN STD_LOGIC;
    m_axi_src_BREADY : OUT STD_LOGIC;
    m_axi_src_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_V1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_V1_ce0 : OUT STD_LOGIC;
    src_V1_we0 : OUT STD_LOGIC;
    src_V1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mapchip_draw_xsize_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mapchip_draw_xsize_out_full_n : IN STD_LOGIC;
    mapchip_draw_xsize_out_write : OUT STD_LOGIC;
    y_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_out_full_n : IN STD_LOGIC;
    y_out_write : OUT STD_LOGIC );
end;


architecture behav of mapchip_color_src_loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mapchip_draw_xsize_blk_n : STD_LOGIC;
    signal id_blk_n : STD_LOGIC;
    signal mapchip_maxheight_blk_n : STD_LOGIC;
    signal ystart_pos_blk_n : STD_LOGIC;
    signal mapchip_maxwidth_blk_n : STD_LOGIC;
    signal xstart_pos_blk_n : STD_LOGIC;
    signal y_blk_n : STD_LOGIC;
    signal srcin_blk_n : STD_LOGIC;
    signal src_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal src_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln878_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal mapchip_draw_xsize_out_blk_n : STD_LOGIC;
    signal y_out_blk_n : STD_LOGIC;
    signal x_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_176_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state16_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mapchip_draw_xsize_read_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_read_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_maxheight_read_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ystart_pos_read_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal mapchip_maxwidth_read_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal xstart_pos_read_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_read_reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcin_read_reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln208_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_i_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln534_reg_340 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln324_fu_220_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln324_reg_345 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal src_addr_reg_350 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln77_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln77_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln878_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_361_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal src_addr_read_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_x_phi_fu_180_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln77_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln324_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln208_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln534_fu_216_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln324_1_fu_225_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln324_1_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln324_1_fu_237_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_206_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_206_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mapchip_color_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mapchip_color_mul_32ns_32ns_62_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    mul_32s_32s_32_2_1_U32 : component mapchip_color_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => id_read_reg_279,
        din1 => mapchip_maxheight_read_reg_284,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    mul_32s_32s_32_2_1_U33 : component mapchip_color_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mapchip_maxwidth_read_reg_294,
        din1 => tmp_i_reg_320,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);

    mul_32ns_32ns_62_2_1_U34 : component mapchip_color_mul_32ns_32ns_62_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_206_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state16)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                x_reg_176 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_reg_361 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_reg_176 <= add_ln77_reg_356;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln324_reg_345 <= add_ln324_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln77_reg_356 <= add_ln77_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln878_reg_361 <= icmp_ln878_fu_263_p2;
                icmp_ln878_reg_361_pp0_iter1_reg <= icmp_ln878_reg_361;
                x_reg_176_pp0_iter1_reg <= x_reg_176;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                id_read_reg_279 <= id_dout;
                mapchip_draw_xsize_read_reg_273 <= mapchip_draw_xsize_dout;
                mapchip_maxheight_read_reg_284 <= mapchip_maxheight_dout;
                mapchip_maxwidth_read_reg_294 <= mapchip_maxwidth_dout;
                srcin_read_reg_310 <= srcin_dout;
                xstart_pos_read_reg_300 <= xstart_pos_dout;
                y_read_reg_305 <= y_dout;
                ystart_pos_read_reg_289 <= ystart_pos_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln208_reg_315 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln534_reg_340 <= grp_fu_206_p2;
                tmp6_i_reg_335 <= grp_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_reg_361 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_addr_read_reg_365 <= m_axi_src_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                src_addr_reg_350 <= sext_ln324_fu_247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_i_reg_320 <= tmp_i_fu_192_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, m_axi_src_ARREADY, mapchip_draw_xsize_out_full_n, y_out_full_n, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, icmp_ln878_fu_263_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_src_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln878_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln878_fu_263_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln208_fu_212_p2 <= std_logic_vector(unsigned(xstart_pos_read_reg_300) + unsigned(tmp6_i_reg_335));
    add_ln324_1_fu_232_p2 <= std_logic_vector(unsigned(srcin_read_reg_310) + unsigned(shl_ln324_1_fu_225_p3));
    add_ln324_fu_220_p2 <= std_logic_vector(unsigned(mul_ln534_reg_340) + unsigned(zext_ln534_fu_216_p1));
    add_ln77_fu_257_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_phi_fu_180_p4) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_src_RVALID, ap_enable_reg_pp0_iter1, icmp_ln878_reg_361)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln878_reg_361 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_src_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_src_RVALID, ap_enable_reg_pp0_iter1, icmp_ln878_reg_361)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln878_reg_361 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_src_RVALID = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
                ap_block_state1 <= ((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0));
    end process;

        ap_block_state16_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter1_assign_proc : process(m_axi_src_RVALID, icmp_ln878_reg_361)
    begin
                ap_block_state17_pp0_stage0_iter1 <= ((icmp_ln878_reg_361 = ap_const_lv1_0) and (m_axi_src_RVALID = ap_const_logic_0));
    end process;

        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state16_assign_proc : process(icmp_ln878_fu_263_p2)
    begin
        if ((icmp_ln878_fu_263_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x_phi_fu_180_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln878_reg_361, x_reg_176, add_ln77_reg_356)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_reg_361 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x_phi_fu_180_p4 <= add_ln77_reg_356;
        else 
            ap_phi_mux_x_phi_fu_180_p4 <= x_reg_176;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_206_p0 <= grp_fu_206_p00(32 - 1 downto 0);
    grp_fu_206_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_read_reg_305),62));
    grp_fu_206_p1 <= grp_fu_206_p10(32 - 1 downto 0);
    grp_fu_206_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mapchip_maxwidth_read_reg_294),62));
    icmp_ln878_fu_263_p2 <= "1" when (ap_phi_mux_x_phi_fu_180_p4 = mapchip_draw_xsize_read_reg_273) else "0";

    id_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            id_blk_n <= id_empty_n;
        else 
            id_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    id_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            id_read <= ap_const_logic_1;
        else 
            id_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_ARADDR <= src_addr_reg_350;
    m_axi_src_ARBURST <= ap_const_lv2_0;
    m_axi_src_ARCACHE <= ap_const_lv4_0;
    m_axi_src_ARID <= ap_const_lv1_0;
    m_axi_src_ARLEN <= mapchip_draw_xsize_read_reg_273;
    m_axi_src_ARLOCK <= ap_const_lv2_0;
    m_axi_src_ARPROT <= ap_const_lv3_0;
    m_axi_src_ARQOS <= ap_const_lv4_0;
    m_axi_src_ARREGION <= ap_const_lv4_0;
    m_axi_src_ARSIZE <= ap_const_lv3_0;
    m_axi_src_ARUSER <= ap_const_lv1_0;

    m_axi_src_ARVALID_assign_proc : process(m_axi_src_ARREADY, ap_CS_fsm_state9)
    begin
        if (((m_axi_src_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_src_ARVALID <= ap_const_logic_1;
        else 
            m_axi_src_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_AWADDR <= ap_const_lv64_0;
    m_axi_src_AWBURST <= ap_const_lv2_0;
    m_axi_src_AWCACHE <= ap_const_lv4_0;
    m_axi_src_AWID <= ap_const_lv1_0;
    m_axi_src_AWLEN <= ap_const_lv32_0;
    m_axi_src_AWLOCK <= ap_const_lv2_0;
    m_axi_src_AWPROT <= ap_const_lv3_0;
    m_axi_src_AWQOS <= ap_const_lv4_0;
    m_axi_src_AWREGION <= ap_const_lv4_0;
    m_axi_src_AWSIZE <= ap_const_lv3_0;
    m_axi_src_AWUSER <= ap_const_lv1_0;
    m_axi_src_AWVALID <= ap_const_logic_0;
    m_axi_src_BREADY <= ap_const_logic_0;

    m_axi_src_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln878_reg_361, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_reg_361 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            m_axi_src_RREADY <= ap_const_logic_1;
        else 
            m_axi_src_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_WDATA <= ap_const_lv32_0;
    m_axi_src_WID <= ap_const_lv1_0;
    m_axi_src_WLAST <= ap_const_logic_0;
    m_axi_src_WSTRB <= ap_const_lv4_0;
    m_axi_src_WUSER <= ap_const_lv1_0;
    m_axi_src_WVALID <= ap_const_logic_0;

    mapchip_draw_xsize_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_blk_n <= mapchip_draw_xsize_empty_n;
        else 
            mapchip_draw_xsize_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapchip_draw_xsize_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_out_blk_n <= mapchip_draw_xsize_out_full_n;
        else 
            mapchip_draw_xsize_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mapchip_draw_xsize_out_din <= mapchip_draw_xsize_dout;

    mapchip_draw_xsize_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_out_write <= ap_const_logic_1;
        else 
            mapchip_draw_xsize_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mapchip_draw_xsize_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_draw_xsize_read <= ap_const_logic_1;
        else 
            mapchip_draw_xsize_read <= ap_const_logic_0;
        end if; 
    end process;


    mapchip_maxheight_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_maxheight_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_maxheight_blk_n <= mapchip_maxheight_empty_n;
        else 
            mapchip_maxheight_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapchip_maxheight_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_maxheight_read <= ap_const_logic_1;
        else 
            mapchip_maxheight_read <= ap_const_logic_0;
        end if; 
    end process;


    mapchip_maxwidth_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_maxwidth_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_maxwidth_blk_n <= mapchip_maxwidth_empty_n;
        else 
            mapchip_maxwidth_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mapchip_maxwidth_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mapchip_maxwidth_read <= ap_const_logic_1;
        else 
            mapchip_maxwidth_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln324_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln324_1_fu_237_p4),64));

    shl_ln324_1_fu_225_p3 <= (add_ln324_reg_345 & ap_const_lv2_0);
    src_V1_address0 <= zext_ln77_fu_268_p1(10 - 1 downto 0);

    src_V1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_V1_ce0 <= ap_const_logic_1;
        else 
            src_V1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src_V1_d0 <= src_addr_read_reg_365;

    src_V1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln878_reg_361_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln878_reg_361_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_V1_we0 <= ap_const_logic_1;
        else 
            src_V1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    src_blk_n_AR_assign_proc : process(m_axi_src_ARREADY, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            src_blk_n_AR <= m_axi_src_ARREADY;
        else 
            src_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    src_blk_n_R_assign_proc : process(m_axi_src_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln878_reg_361)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_reg_361 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            src_blk_n_R <= m_axi_src_RVALID;
        else 
            src_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    srcin_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, srcin_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcin_blk_n <= srcin_empty_n;
        else 
            srcin_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcin_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcin_read <= ap_const_logic_1;
        else 
            srcin_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_fu_192_p2 <= std_logic_vector(unsigned(ystart_pos_read_reg_289) + unsigned(mul_ln208_reg_315));
    trunc_ln324_1_fu_237_p4 <= add_ln324_1_fu_232_p2(63 downto 2);

    xstart_pos_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xstart_pos_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xstart_pos_blk_n <= xstart_pos_empty_n;
        else 
            xstart_pos_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xstart_pos_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xstart_pos_read <= ap_const_logic_1;
        else 
            xstart_pos_read <= ap_const_logic_0;
        end if; 
    end process;


    y_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_blk_n <= y_empty_n;
        else 
            y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, y_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_out_blk_n <= y_out_full_n;
        else 
            y_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_out_din <= y_dout;

    y_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_out_write <= ap_const_logic_1;
        else 
            y_out_write <= ap_const_logic_0;
        end if; 
    end process;


    y_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_read <= ap_const_logic_1;
        else 
            y_read <= ap_const_logic_0;
        end if; 
    end process;


    ystart_pos_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ystart_pos_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ystart_pos_blk_n <= ystart_pos_empty_n;
        else 
            ystart_pos_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ystart_pos_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mapchip_draw_xsize_empty_n, id_empty_n, mapchip_maxheight_empty_n, ystart_pos_empty_n, mapchip_maxwidth_empty_n, xstart_pos_empty_n, y_empty_n, srcin_empty_n, mapchip_draw_xsize_out_full_n, y_out_full_n)
    begin
        if ((not(((srcin_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (xstart_pos_empty_n = ap_const_logic_0) or (mapchip_maxwidth_empty_n = ap_const_logic_0) or (ystart_pos_empty_n = ap_const_logic_0) or (mapchip_maxheight_empty_n = ap_const_logic_0) or (id_empty_n = ap_const_logic_0) or (mapchip_draw_xsize_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (mapchip_draw_xsize_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ystart_pos_read <= ap_const_logic_1;
        else 
            ystart_pos_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln534_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_fu_212_p2),62));
    zext_ln77_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_176_pp0_iter1_reg),64));
end behav;
