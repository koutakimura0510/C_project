-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity background_loop_Block_entry_proc_proc7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ycopy_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ycopy_V_ce0 : OUT STD_LOGIC;
    ycopy_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln329 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_AWVALID : OUT STD_LOGIC;
    m_axi_update_AWREADY : IN STD_LOGIC;
    m_axi_update_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_update_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_WVALID : OUT STD_LOGIC;
    m_axi_update_WREADY : IN STD_LOGIC;
    m_axi_update_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_WLAST : OUT STD_LOGIC;
    m_axi_update_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_ARVALID : OUT STD_LOGIC;
    m_axi_update_ARREADY : IN STD_LOGIC;
    m_axi_update_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_update_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RVALID : IN STD_LOGIC;
    m_axi_update_RREADY : OUT STD_LOGIC;
    m_axi_update_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_RLAST : IN STD_LOGIC;
    m_axi_update_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_BVALID : IN STD_LOGIC;
    m_axi_update_BREADY : OUT STD_LOGIC;
    m_axi_update_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    frame_size : IN STD_LOGIC_VECTOR (31 downto 0);
    ddr_update : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of background_loop_Block_entry_proc_proc7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal update_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal update_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal update_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_109_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln329_reg_167 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal update_addr_reg_177 : STD_LOGIC_VECTOR (63 downto 0);
    signal ycopy_V_load_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln329_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_109_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_119_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln329_fu_126_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln329_1_fu_132_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_109_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_109_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_109_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component background_loop_mul_32ns_32ns_62_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    mul_32ns_32ns_62_2_1_U59 : component background_loop_mul_32ns_32ns_62_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_109_p0,
        din1 => grp_fu_109_p1,
        ce => grp_fu_109_ce,
        dout => grp_fu_109_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_update_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln329_reg_167 <= grp_fu_109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                update_addr_reg_177 <= sext_ln329_fu_142_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ycopy_V_load_reg_183 <= ycopy_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_update_AWREADY, m_axi_update_WREADY, m_axi_update_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((m_axi_update_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_update_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_update_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln329_fu_126_p2 <= std_logic_vector(unsigned(shl_ln_fu_119_p3) + unsigned(ddr_update));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_update_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_update_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_update_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_update_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_109_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_109_ce <= ap_const_logic_1;
        else 
            grp_fu_109_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_109_p0 <= grp_fu_109_p00(32 - 1 downto 0);
    grp_fu_109_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(frame_size),62));
    grp_fu_109_p1 <= grp_fu_109_p10(32 - 1 downto 0);
    grp_fu_109_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln329),62));
    m_axi_update_ARADDR <= ap_const_lv64_0;
    m_axi_update_ARBURST <= ap_const_lv2_0;
    m_axi_update_ARCACHE <= ap_const_lv4_0;
    m_axi_update_ARID <= ap_const_lv1_0;
    m_axi_update_ARLEN <= ap_const_lv32_0;
    m_axi_update_ARLOCK <= ap_const_lv2_0;
    m_axi_update_ARPROT <= ap_const_lv3_0;
    m_axi_update_ARQOS <= ap_const_lv4_0;
    m_axi_update_ARREGION <= ap_const_lv4_0;
    m_axi_update_ARSIZE <= ap_const_lv3_0;
    m_axi_update_ARUSER <= ap_const_lv1_0;
    m_axi_update_ARVALID <= ap_const_logic_0;
    m_axi_update_AWADDR <= update_addr_reg_177;
    m_axi_update_AWBURST <= ap_const_lv2_0;
    m_axi_update_AWCACHE <= ap_const_lv4_0;
    m_axi_update_AWID <= ap_const_lv1_0;
    m_axi_update_AWLEN <= ap_const_lv32_1;
    m_axi_update_AWLOCK <= ap_const_lv2_0;
    m_axi_update_AWPROT <= ap_const_lv3_0;
    m_axi_update_AWQOS <= ap_const_lv4_0;
    m_axi_update_AWREGION <= ap_const_lv4_0;
    m_axi_update_AWSIZE <= ap_const_lv3_0;
    m_axi_update_AWUSER <= ap_const_lv1_0;

    m_axi_update_AWVALID_assign_proc : process(m_axi_update_AWREADY, ap_CS_fsm_state4)
    begin
        if (((m_axi_update_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_update_AWVALID <= ap_const_logic_1;
        else 
            m_axi_update_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_update_BREADY_assign_proc : process(m_axi_update_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_update_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_update_BREADY <= ap_const_logic_1;
        else 
            m_axi_update_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_update_RREADY <= ap_const_logic_0;
    m_axi_update_WDATA <= ycopy_V_load_reg_183;
    m_axi_update_WID <= ap_const_lv1_0;
    m_axi_update_WLAST <= ap_const_logic_0;
    m_axi_update_WSTRB <= ap_const_lv4_F;
    m_axi_update_WUSER <= ap_const_lv1_0;

    m_axi_update_WVALID_assign_proc : process(m_axi_update_WREADY, ap_CS_fsm_state5)
    begin
        if (((m_axi_update_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_update_WVALID <= ap_const_logic_1;
        else 
            m_axi_update_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln329_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln329_1_fu_132_p4),64));

    shl_ln_fu_119_p3 <= (mul_ln329_reg_167 & ap_const_lv2_0);
    trunc_ln329_1_fu_132_p4 <= add_ln329_fu_126_p2(63 downto 2);

    update_blk_n_AW_assign_proc : process(m_axi_update_AWREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            update_blk_n_AW <= m_axi_update_AWREADY;
        else 
            update_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    update_blk_n_B_assign_proc : process(m_axi_update_BVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            update_blk_n_B <= m_axi_update_BVALID;
        else 
            update_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    update_blk_n_W_assign_proc : process(m_axi_update_WREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            update_blk_n_W <= m_axi_update_WREADY;
        else 
            update_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ycopy_V_address0 <= zext_ln48_fu_115_p1(10 - 1 downto 0);

    ycopy_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ycopy_V_ce0 <= ap_const_logic_1;
        else 
            ycopy_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln48_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln329),64));
end behav;
