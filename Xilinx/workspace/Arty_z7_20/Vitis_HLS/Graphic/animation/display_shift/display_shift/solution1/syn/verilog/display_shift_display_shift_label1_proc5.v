// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module display_shift_display_shift_label1_proc5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        width,
        xstart,
        y_2,
        ystart,
        frame_size,
        ddr_copy,
        m_axi_copy_AWVALID,
        m_axi_copy_AWREADY,
        m_axi_copy_AWADDR,
        m_axi_copy_AWID,
        m_axi_copy_AWLEN,
        m_axi_copy_AWSIZE,
        m_axi_copy_AWBURST,
        m_axi_copy_AWLOCK,
        m_axi_copy_AWCACHE,
        m_axi_copy_AWPROT,
        m_axi_copy_AWQOS,
        m_axi_copy_AWREGION,
        m_axi_copy_AWUSER,
        m_axi_copy_WVALID,
        m_axi_copy_WREADY,
        m_axi_copy_WDATA,
        m_axi_copy_WSTRB,
        m_axi_copy_WLAST,
        m_axi_copy_WID,
        m_axi_copy_WUSER,
        m_axi_copy_ARVALID,
        m_axi_copy_ARREADY,
        m_axi_copy_ARADDR,
        m_axi_copy_ARID,
        m_axi_copy_ARLEN,
        m_axi_copy_ARSIZE,
        m_axi_copy_ARBURST,
        m_axi_copy_ARLOCK,
        m_axi_copy_ARCACHE,
        m_axi_copy_ARPROT,
        m_axi_copy_ARQOS,
        m_axi_copy_ARREGION,
        m_axi_copy_ARUSER,
        m_axi_copy_RVALID,
        m_axi_copy_RREADY,
        m_axi_copy_RDATA,
        m_axi_copy_RLAST,
        m_axi_copy_RID,
        m_axi_copy_RUSER,
        m_axi_copy_RRESP,
        m_axi_copy_BVALID,
        m_axi_copy_BREADY,
        m_axi_copy_BRESP,
        m_axi_copy_BID,
        m_axi_copy_BUSER,
        copy_V1_address0,
        copy_V1_ce0,
        copy_V1_we0,
        copy_V1_d0,
        xend,
        yend,
        ddr_update,
        width_out_din,
        width_out_full_n,
        width_out_write,
        y_2_out_din,
        y_2_out_full_n,
        y_2_out_write,
        frame_size_out_din,
        frame_size_out_full_n,
        frame_size_out_write,
        xend_out_din,
        xend_out_full_n,
        xend_out_write,
        yend_out_din,
        yend_out_full_n,
        yend_out_write,
        ddr_update_out_din,
        ddr_update_out_full_n,
        ddr_update_out_write
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2048;
parameter    ap_ST_fsm_state15 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] width;
input  [31:0] xstart;
input  [31:0] y_2;
input  [31:0] ystart;
input  [31:0] frame_size;
input  [63:0] ddr_copy;
output   m_axi_copy_AWVALID;
input   m_axi_copy_AWREADY;
output  [63:0] m_axi_copy_AWADDR;
output  [0:0] m_axi_copy_AWID;
output  [31:0] m_axi_copy_AWLEN;
output  [2:0] m_axi_copy_AWSIZE;
output  [1:0] m_axi_copy_AWBURST;
output  [1:0] m_axi_copy_AWLOCK;
output  [3:0] m_axi_copy_AWCACHE;
output  [2:0] m_axi_copy_AWPROT;
output  [3:0] m_axi_copy_AWQOS;
output  [3:0] m_axi_copy_AWREGION;
output  [0:0] m_axi_copy_AWUSER;
output   m_axi_copy_WVALID;
input   m_axi_copy_WREADY;
output  [31:0] m_axi_copy_WDATA;
output  [3:0] m_axi_copy_WSTRB;
output   m_axi_copy_WLAST;
output  [0:0] m_axi_copy_WID;
output  [0:0] m_axi_copy_WUSER;
output   m_axi_copy_ARVALID;
input   m_axi_copy_ARREADY;
output  [63:0] m_axi_copy_ARADDR;
output  [0:0] m_axi_copy_ARID;
output  [31:0] m_axi_copy_ARLEN;
output  [2:0] m_axi_copy_ARSIZE;
output  [1:0] m_axi_copy_ARBURST;
output  [1:0] m_axi_copy_ARLOCK;
output  [3:0] m_axi_copy_ARCACHE;
output  [2:0] m_axi_copy_ARPROT;
output  [3:0] m_axi_copy_ARQOS;
output  [3:0] m_axi_copy_ARREGION;
output  [0:0] m_axi_copy_ARUSER;
input   m_axi_copy_RVALID;
output   m_axi_copy_RREADY;
input  [31:0] m_axi_copy_RDATA;
input   m_axi_copy_RLAST;
input  [0:0] m_axi_copy_RID;
input  [0:0] m_axi_copy_RUSER;
input  [1:0] m_axi_copy_RRESP;
input   m_axi_copy_BVALID;
output   m_axi_copy_BREADY;
input  [1:0] m_axi_copy_BRESP;
input  [0:0] m_axi_copy_BID;
input  [0:0] m_axi_copy_BUSER;
output  [9:0] copy_V1_address0;
output   copy_V1_ce0;
output   copy_V1_we0;
output  [31:0] copy_V1_d0;
input  [31:0] xend;
input  [31:0] yend;
input  [63:0] ddr_update;
output  [31:0] width_out_din;
input   width_out_full_n;
output   width_out_write;
output  [31:0] y_2_out_din;
input   y_2_out_full_n;
output   y_2_out_write;
output  [31:0] frame_size_out_din;
input   frame_size_out_full_n;
output   frame_size_out_write;
output  [31:0] xend_out_din;
input   xend_out_full_n;
output   xend_out_write;
output  [31:0] yend_out_din;
input   yend_out_full_n;
output   yend_out_write;
output  [63:0] ddr_update_out_din;
input   ddr_update_out_full_n;
output   ddr_update_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_copy_ARVALID;
reg m_axi_copy_RREADY;
reg copy_V1_ce0;
reg copy_V1_we0;
reg width_out_write;
reg y_2_out_write;
reg frame_size_out_write;
reg xend_out_write;
reg yend_out_write;
reg ddr_update_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    copy_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    copy_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_reg_363;
reg    width_out_blk_n;
reg    y_2_out_blk_n;
reg    frame_size_out_blk_n;
reg    xend_out_blk_n;
reg    yend_out_blk_n;
reg    ddr_update_out_blk_n;
reg   [31:0] x_reg_224;
reg   [31:0] x_reg_224_pp0_iter1_reg;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [33:0] ret_1_i_i_fu_244_p2;
reg  signed [33:0] ret_1_i_i_reg_332;
wire    ap_CS_fsm_state2;
wire   [61:0] grp_fu_256_p2;
reg   [61:0] mul_ln534_reg_347;
wire    ap_CS_fsm_state3;
reg   [63:0] copy_addr_reg_352;
wire    ap_CS_fsm_state4;
wire   [31:0] add_ln37_fu_305_p2;
reg   [31:0] add_ln37_reg_358;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln878_fu_311_p2;
reg   [0:0] icmp_ln878_reg_363_pp0_iter1_reg;
reg   [31:0] copy_addr_read_reg_367;
wire    ap_CS_fsm_state11;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] ap_phi_mux_x_phi_fu_228_p4;
wire   [63:0] zext_ln37_fu_316_p1;
wire  signed [63:0] sext_ln324_fu_295_p1;
reg    ap_block_state1;
wire  signed [31:0] lhs_1_i_i_fu_236_p0;
wire  signed [33:0] lhs_1_i_i_fu_236_p1;
wire   [33:0] rhs_1_i_i_fu_240_p1;
wire   [31:0] grp_fu_256_p1;
wire   [61:0] zext_ln534_2_fu_262_p1;
wire   [61:0] add_ln324_fu_266_p2;
wire   [63:0] shl_ln324_1_fu_271_p3;
wire   [63:0] add_ln324_1_fu_279_p2;
wire   [61:0] trunc_ln324_1_fu_285_p4;
wire    ap_CS_fsm_state15;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [61:0] grp_fu_256_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

display_shift_mul_34s_32ns_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_34s_32ns_62_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_1_i_i_reg_332),
    .din1(grp_fu_256_p1),
    .ce(1'b1),
    .dout(grp_fu_256_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_reg_224 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_363 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_reg_224 <= add_ln37_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln37_reg_358 <= add_ln37_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_363 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        copy_addr_read_reg_367 <= m_axi_copy_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        copy_addr_reg_352 <= sext_ln324_fu_295_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_reg_363 <= icmp_ln878_fu_311_p2;
        icmp_ln878_reg_363_pp0_iter1_reg <= icmp_ln878_reg_363;
        x_reg_224_pp0_iter1_reg <= x_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln534_reg_347 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ret_1_i_i_reg_332 <= ret_1_i_i_fu_244_p2;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_311_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_363 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_phi_fu_228_p4 = add_ln37_reg_358;
    end else begin
        ap_phi_mux_x_phi_fu_228_p4 = x_reg_224;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        copy_V1_ce0 = 1'b1;
    end else begin
        copy_V1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln878_reg_363_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        copy_V1_we0 = 1'b1;
    end else begin
        copy_V1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        copy_blk_n_AR = m_axi_copy_ARREADY;
    end else begin
        copy_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_363 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        copy_blk_n_R = m_axi_copy_RVALID;
    end else begin
        copy_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_update_out_blk_n = ddr_update_out_full_n;
    end else begin
        ddr_update_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ddr_update_out_full_n == 1'b0) | (yend_out_full_n == 1'b0) | (xend_out_full_n == 1'b0) | (frame_size_out_full_n == 1'b0) | (y_2_out_full_n == 1'b0) | (width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_update_out_write = 1'b1;
    end else begin
        ddr_update_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_size_out_blk_n = frame_size_out_full_n;
    end else begin
        frame_size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ddr_update_out_full_n == 1'b0) | (yend_out_full_n == 1'b0) | (xend_out_full_n == 1'b0) | (frame_size_out_full_n == 1'b0) | (y_2_out_full_n == 1'b0) | (width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_size_out_write = 1'b1;
    end else begin
        frame_size_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_copy_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_copy_ARVALID = 1'b1;
    end else begin
        m_axi_copy_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_363 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_copy_RREADY = 1'b1;
    end else begin
        m_axi_copy_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_blk_n = width_out_full_n;
    end else begin
        width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ddr_update_out_full_n == 1'b0) | (yend_out_full_n == 1'b0) | (xend_out_full_n == 1'b0) | (frame_size_out_full_n == 1'b0) | (y_2_out_full_n == 1'b0) | (width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_write = 1'b1;
    end else begin
        width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        xend_out_blk_n = xend_out_full_n;
    end else begin
        xend_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ddr_update_out_full_n == 1'b0) | (yend_out_full_n == 1'b0) | (xend_out_full_n == 1'b0) | (frame_size_out_full_n == 1'b0) | (y_2_out_full_n == 1'b0) | (width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        xend_out_write = 1'b1;
    end else begin
        xend_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_2_out_blk_n = y_2_out_full_n;
    end else begin
        y_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ddr_update_out_full_n == 1'b0) | (yend_out_full_n == 1'b0) | (xend_out_full_n == 1'b0) | (frame_size_out_full_n == 1'b0) | (y_2_out_full_n == 1'b0) | (width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_2_out_write = 1'b1;
    end else begin
        y_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        yend_out_blk_n = yend_out_full_n;
    end else begin
        yend_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ddr_update_out_full_n == 1'b0) | (yend_out_full_n == 1'b0) | (xend_out_full_n == 1'b0) | (frame_size_out_full_n == 1'b0) | (y_2_out_full_n == 1'b0) | (width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        yend_out_write = 1'b1;
    end else begin
        yend_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ddr_update_out_full_n == 1'b0) | (yend_out_full_n == 1'b0) | (xend_out_full_n == 1'b0) | (frame_size_out_full_n == 1'b0) | (y_2_out_full_n == 1'b0) | (width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_copy_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln878_fu_311_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln878_fu_311_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_1_fu_279_p2 = (shl_ln324_1_fu_271_p3 + ddr_copy);

assign add_ln324_fu_266_p2 = (mul_ln534_reg_347 + zext_ln534_2_fu_262_p1);

assign add_ln37_fu_305_p2 = (ap_phi_mux_x_phi_fu_228_p4 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_copy_RVALID == 1'b0) & (icmp_ln878_reg_363 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_copy_RVALID == 1'b0) & (icmp_ln878_reg_363 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ddr_update_out_full_n == 1'b0) | (yend_out_full_n == 1'b0) | (xend_out_full_n == 1'b0) | (frame_size_out_full_n == 1'b0) | (y_2_out_full_n == 1'b0) | (width_out_full_n == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((m_axi_copy_RVALID == 1'b0) & (icmp_ln878_reg_363 == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign copy_V1_address0 = zext_ln37_fu_316_p1;

assign copy_V1_d0 = copy_addr_read_reg_367;

assign ddr_update_out_din = ddr_update;

assign frame_size_out_din = frame_size;

assign grp_fu_256_p1 = grp_fu_256_p10;

assign grp_fu_256_p10 = frame_size;

assign icmp_ln878_fu_311_p2 = ((ap_phi_mux_x_phi_fu_228_p4 == width) ? 1'b1 : 1'b0);

assign lhs_1_i_i_fu_236_p0 = y_2;

assign lhs_1_i_i_fu_236_p1 = lhs_1_i_i_fu_236_p0;

assign m_axi_copy_ARADDR = copy_addr_reg_352;

assign m_axi_copy_ARBURST = 2'd0;

assign m_axi_copy_ARCACHE = 4'd0;

assign m_axi_copy_ARID = 1'd0;

assign m_axi_copy_ARLEN = width;

assign m_axi_copy_ARLOCK = 2'd0;

assign m_axi_copy_ARPROT = 3'd0;

assign m_axi_copy_ARQOS = 4'd0;

assign m_axi_copy_ARREGION = 4'd0;

assign m_axi_copy_ARSIZE = 3'd0;

assign m_axi_copy_ARUSER = 1'd0;

assign m_axi_copy_AWADDR = 64'd0;

assign m_axi_copy_AWBURST = 2'd0;

assign m_axi_copy_AWCACHE = 4'd0;

assign m_axi_copy_AWID = 1'd0;

assign m_axi_copy_AWLEN = 32'd0;

assign m_axi_copy_AWLOCK = 2'd0;

assign m_axi_copy_AWPROT = 3'd0;

assign m_axi_copy_AWQOS = 4'd0;

assign m_axi_copy_AWREGION = 4'd0;

assign m_axi_copy_AWSIZE = 3'd0;

assign m_axi_copy_AWUSER = 1'd0;

assign m_axi_copy_AWVALID = 1'b0;

assign m_axi_copy_BREADY = 1'b0;

assign m_axi_copy_WDATA = 32'd0;

assign m_axi_copy_WID = 1'd0;

assign m_axi_copy_WLAST = 1'b0;

assign m_axi_copy_WSTRB = 4'd0;

assign m_axi_copy_WUSER = 1'd0;

assign m_axi_copy_WVALID = 1'b0;

assign ret_1_i_i_fu_244_p2 = ($signed(lhs_1_i_i_fu_236_p1) + $signed(rhs_1_i_i_fu_240_p1));

assign rhs_1_i_i_fu_240_p1 = ystart;

assign sext_ln324_fu_295_p1 = $signed(trunc_ln324_1_fu_285_p4);

assign shl_ln324_1_fu_271_p3 = {{add_ln324_fu_266_p2}, {2'd0}};

assign trunc_ln324_1_fu_285_p4 = {{add_ln324_1_fu_279_p2[63:2]}};

assign width_out_din = width;

assign xend_out_din = xend;

assign y_2_out_din = y_2;

assign yend_out_din = yend;

assign zext_ln37_fu_316_p1 = x_reg_224_pp0_iter1_reg;

assign zext_ln534_2_fu_262_p1 = xstart;

endmodule //display_shift_display_shift_label1_proc5
