/*
 * DDRメモリに保存を行う開始アドレスとSDカードアクセス時に使用する
 * 配列のバッファ領域を宣言
 */
#ifndef rom_macro_h   /* prevent circular inclusions */
#define rom_macro_h   /* by using protection macros */

/*
 * 一画面のフレームバッファ領域
 */
#define FBUF_NUM    	(3)
#define FBUF_SIZE		((VIDEO_HEIGHT * MAX_V_WIDTH))
#define FBUF_TOTAL_SIZE (FBUF_SIZE * FBUF_NUM)


/*
 * メモリマップドアドレス
 * NULLは使用していないアドレス領域
 * -
 * 文字数(必要文字バイト数)を想定する
 * 本一冊が原稿用紙400文字で最低300枚ほど必要なので、容量をに直して計算すると
 * 400 x 300 = 120000 = 120KB
 * 
 * ストーリー全体を5巻分だとして必要なバイト数は
 * 120KB x 5 = 600KB
 * 
 * 更に文字コードが2byte文字列であることから必要なバイト数は
 * 600KB x 2 = 1200KB = 1.2MB
 * 
 * 下記の空アドレスは約4MB(16MB / 4byte) = 2百万文字分あることから
 * 他のデータと併合しても十分足りると思われる
 * -
 * 0x0020_0000 ~ 0x0050_0000	// キャラクター、NPCデータ、32 x 32x 4byteを10体分確保 + 余分に0x0009_0000分確保
 * 
 * 0x0050_0000 ~ 0x005F_FFFF	// NULL
 * 
 * 0x0060_0000 ~ 0x0102_0000	// エネミーデータ 120 x 120 x 4byteを184体分
 * 
 * 0x0102_0000 ~ 0x01FF_FFFF	// NULL このアドレスにはストーリー進行のbinファイルの構造体データを保存予定
 * 
 * 0x0200_0000 ~ 0x024A_0000	// マップ描画用マップチップデータ
 * 
 * 0x024A_0000 ~ 0x0FFF_FFFF	// エフェクト画像データ
 * 
 * 0x1000_0000 ~ 0x1096_0000	// フレームバッファ領域
 * 
 * 0x1091_0000 ~ 0x15FF_FFFF	// バトル中のエフェクトやコマンドなどの効果音領域
 * 
 * 0x1600_0000 ~ 0x176F_FFFF	// フィールドBGM
 * 
 * 0x1700_0000 ~ 0x18FF_FFFF	// バトルBGM
 * 
 * 0x1900_0000 ~ 0x19FF_FFFF    // ファンファーレBGM
 * 
 * 0x1A00_0000 ~ 0x1B50_0000    // スペアBGM、動作処理に問題がある場合に予め読み込んでおく時に利用
 * 
 * 0x1E00_0000 ~ 0x1E49_41D0	// フォント、マップデータ
 * 
 * 0x1E49_4200 ~ 0x1FFF_FFFF	// NULL
 * 
 * 0x1F00_0000 ~ 0x1FFF_FFFF    // イベントフラグ管理領域
 */

/* 基本となる保存アドレスを定義 */
#define DRAM_UNIT_ADDR_BASE_START			 (0x00200000)
#define DRAM_ENEMY_ADDR_BASE_START			 (0x00600000)
#define DRAM_SYSTEM_BIN_ADDR_BASE_START		 (0x01020000)
#define DRAM_MAPCHIP_MAPDATA_ADDR_BASE_START (0x02000000)
#define DRAM_EFFECT_BATTLE_ADDR_BASE_START	 (0x024A0000)
#define DRAM_VDMA_ADDR_BASE_START			 (0x10000000)
#define DRAM_BGM_BATTLE_ADDR_BASE_START      (0x10961000)
#define DRAM_SOUND_FIELD_ADDR_BASE_START	 (0x16000000)
#define DRAM_SOUND_BATTLE_ADDR_BASE_START	 (0x17700000)
#define DRAM_SOUND_FANFARE_ADDR_BASE_START   (0x19000000)
#define DRAM_SOUND_SPARE_ADDR_BASE_START     (0x1A000000)
#define DRAM_FONT_SJIS_ADDR_BASE_START 		 (0x1e000000)
#define DRAM_FLAG_EVENT_ADDR_BASE_START		 (0x1f000000)


/*
 * キャラクターの画像データ保存領域
 * 計算例 = 0x00060000 = width32 x height32 x カット数12 x キャラ数8 x 4byte
 */

/* 操作キャラクター、フィールド、バトル */
#define DRAM_UNIT_ADDR_BASE				(DRAM_UNIT_ADDR_BASE_START)
#define DRAM_UNIT_BATTLE_ADDR_BASE     	(DRAM_UNIT_ADDR_BASE + 0x00060000)
#define DRAM_UNIT_SHADOW_ADDR_BASE     	(DRAM_UNIT_BATTLE_ADDR_BASE + 0x00090000)
#define DRAM_UNIT_WAKU_ADDR_BASE     	(DRAM_UNIT_SHADOW_ADDR_BASE + 0xc000)

/* NPC */
#define DRAM_ICON_ADDR_BASE             (DRAM_UNIT_WAKU_ADDR_BASE   + 0x2b80)
#define DRAM_ICON_2_ADDR_BASE           (DRAM_ICON_ADDR_BASE        + 1024)
#define DRAM_NPC_WORLD_ADDR_BASE        (DRAM_ICON_2_ADDR_BASE      + 4080)
#define DRAM_NPC_END_ADDR_BASE          (DRAM_NPC_1_ADDR_BASE       + (192 * 128 * 4))   /* NPCの登場数によってサイズは異なる */


/* エネミーデータの保存領域 位置によって上書き */
#define DRAM_ENEMY_ADDR_BASE			(DRAM_ENEMY_ADDR_BASE_START)
#define DRAM_ENEMY_1_ADDR_BASE          (DRAM_ENEMY_ADDR_BASE)
#define DRAM_ENEMY_2_ADDR_BASE          (DRAM_ENEMY_1_ADDR_BASE + 47704)
#define DRAM_ENEMY_3_ADDR_BASE          (DRAM_ENEMY_2_ADDR_BASE + 45288)
#define DRAM_ENEMY_4_ADDR_BASE          (DRAM_ENEMY_3_ADDR_BASE + 47704)


/*
 * ver1. 2021/07/15
 * システムを動作させるbinファイルのデータを保存する領域
 */
#define DRAM_SYSTEM_BIN_ADDR_BASE		(DRAM_SYSTEM_BIN_ADDR_BASE_START)



/*
 * マップ描画に使用するマップチップデータの保存領域
 * 計算例 = 606208 * 4 = 0x00250000
 * 一応 更に2倍の0x004A_0000領域確保
 */
#define DRAM_MAPCHIP_MAPDATA_ADDR_BASE	(DRAM_MAPCHIP_MAPDATA_ADDR_BASE_START)


/*
 * ver1. 2021/07/22
 * エフェクトの画像データのサイズを定義
 */
#define DRAM_EFFECT_DEFAULT_ATTACK_SIZE         (1080 * 120 * 4)    // 通常攻撃
#define DRAM_EFFECT_MAGIC_CONDITION_SIZE        (480 * 288  * 4)    // 回復や状態変更1 15枚の場合
#define DRAM_EFFECT_MAGIC_2_CONDITION_SIZE      (480 * 192  * 4)    // 回復や状態変更2 10枚の場合
#define DRAM_EFFECT_MAGIC_3_CONDITION_SIZE      (480 * 384  * 4)    // 回復や状態変更3 20枚の場合
#define DRAM_EFFECT_ALL_ATTACK_SIZE             (3200 * 1920 * 4)    // 画面全体効果



/*
 * ストーリーモードに使用するエフェクトの保存領域
 * 計算例 = 1080 * 120 * 4 = 0x0007e900
 */
#define DRAM_EFFECT_BATTLE_ADDR_BASE			    (DRAM_EFFECT_BATTLE_ADDR_BASE_START)
#define DRAM_EFFECT_BATTLE_MAGIC_1_ADDR_BASE		(DRAM_EFFECT_BATTLE_ADDR_BASE)	                                             // 魔法発動
#define DRAM_EFFECT_BATTLE_SLASH_1_ADDR_BASE        (DRAM_EFFECT_BATTLE_ADDR_BASE + DRAM_EFFECT_MAGIC_CONDITION_SIZE)	         // 通常攻撃斬撃エフェクト
#define DRAM_EFFECT_BATTLE_BROW_1_ADDR_BASE         (DRAM_EFFECT_BATTLE_SLASH_1_ADDR_BASE  + DRAM_EFFECT_DEFAULT_ATTACK_SIZE)    // 通常攻撃打撃エフェクト

/* ステータス操作 */
#define DRAM_EFFECT_BATTLE_POWER_UP_ADDR_BASE       (DRAM_EFFECT_BATTLE_BROW_1_ADDR_BASE        + DRAM_EFFECT_DEFAULT_ATTACK_SIZE)    // パワーアップ系
#define DRAM_EFFECT_BATTLE_POWER_DOWN_ADDR_BASE     (DRAM_EFFECT_BATTLE_POWER_UP_ADDR_BASE      + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // パワーダウン系
#define DRAM_EFFECT_BATTLE_POWER_DOWN_2_ADDR_BASE   (DRAM_EFFECT_BATTLE_POWER_DOWN_ADDR_BASE    + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // パワーダウン系
#define DRAM_EFFECT_BATTLE_DEF_1_ADDR_BASE          (DRAM_EFFECT_BATTLE_POWER_DOWN_2_ADDR_BASE  + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // 防御アップ系
#define DRAM_EFFECT_BATTLE_RES_1_ADDR_BASE          (DRAM_EFFECT_BATTLE_DEF_1_ADDR_BASE         + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // 魔防アップ系
#define DRAM_EFFECT_BATTLE_HEST_1_ADDR_BASE         (DRAM_EFFECT_BATTLE_RES_1_ADDR_BASE         + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // ヘイスト系
#define DRAM_EFFECT_BATTLE_SLOW_1_ADDR_BASE         (DRAM_EFFECT_BATTLE_HEST_1_ADDR_BASE        + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // スロウ系

/* 回復 */
#define DRAM_EFFECT_BATTLE_HEAL_1_ADDR_BASE         (DRAM_EFFECT_BATTLE_SLOW_1_ADDR_BASE   + DRAM_EFFECT_MAGIC_3_CONDITION_SIZE) // 小回復
#define DRAM_EFFECT_BATTLE_ESNA_1_ADDR_BASE         (DRAM_EFFECT_BATTLE_HEAL_1_ADDR_BASE   + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // 状態回復
#define DRAM_EFFECT_BATTLE_RISE_1_ADDR_BASE         (DRAM_EFFECT_BATTLE_ESNA_1_ADDR_BASE   + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // 小蘇生

/* 状態魔法 */
#define DRAM_EFFECT_BATTLE_CONFIG_1_ADDR_BASE       (DRAM_EFFECT_BATTLE_RISE_1_ADDR_BASE    + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // 混乱魔法
#define DRAM_EFFECT_BATTLE_POISON_1_ADDR_BASE       (DRAM_EFFECT_BATTLE_CONFIG_1_ADDR_BASE  + DRAM_EFFECT_MAGIC_3_CONDITION_SIZE) // 毒魔法
#define DRAM_EFFECT_BATTLE_PARARAI_1_ADDR_BASE      (DRAM_EFFECT_BATTLE_POISON_1_ADDR_BASE  + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // マヒ魔法
#define DRAM_EFFECT_BATTLE_BERSEK_1_ADDR_BASE       (DRAM_EFFECT_BATTLE_PARARAI_1_ADDR_BASE + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // バーサク魔法
#define DRAM_EFFECT_BATTLE_RIGENE_1_ADDR_BASE       (DRAM_EFFECT_BATTLE_BERSEK_1_ADDR_BASE  + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // リジェネ魔法
#define DRAM_EFFECT_BATTLE_DEATH_1_ADDR_BASE        (DRAM_EFFECT_BATTLE_RIGENE_1_ADDR_BASE  + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // 即死

/* ループ系 */
#define DRAM_EFFECT_BATTLE_POISON_2_ADDR_BASE       (DRAM_EFFECT_BATTLE_DEATH_1_ADDR_BASE   + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // 毒魔法ループ
#define DRAM_EFFECT_BATTLE_CONFIG_2_ADDR_BASE       (DRAM_EFFECT_BATTLE_POISON_2_ADDR_BASE  + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // 混乱ループ
#define DRAM_EFFECT_BATTLE_PARARAI_2_ADDR_BASE      (DRAM_EFFECT_BATTLE_CONFIG_2_ADDR_BASE  + DRAM_EFFECT_MAGIC_2_CONDITION_SIZE) // マヒループ
#define DRAM_EFFECT_BATTLE_BUF_2_ADDR_BASE          (DRAM_EFFECT_BATTLE_PARARAI_2_ADDR_BASE + DRAM_EFFECT_MAGIC_2_CONDITION_SIZE) // パワーアップループ
#define DRAM_EFFECT_BATTLE_BERSEK_2_ADDR_BASE       (DRAM_EFFECT_BATTLE_BUF_2_ADDR_BASE     + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // バーサクループ
#define DRAM_EFFECT_BATTLE_REFREK_2_ADDR_BASE       (DRAM_EFFECT_BATTLE_BERSEK_2_ADDR_BASE  + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // カリスマガードループ
#define DRAM_EFFECT_BATTLE_RIGENE_2_ADDR_BASE       (DRAM_EFFECT_BATTLE_REFREK_2_ADDR_BASE  + DRAM_EFFECT_MAGIC_CONDITION_SIZE)   // リジェネループ

/* 専用技 */
#define DRAM_EFFECT_KANAKO_8_ADDR_BASE              (DRAM_EFFECT_BATTLE_RIGENE_2_ADDR_BASE  + DRAM_EFFECT_MAGIC_2_CONDITION_SIZE) // 八柱・八大地獄
#define DRAM_EFFECT_REMIRIA_7_ADDR_BASE             (DRAM_EFFECT_KANAKO_8_ADDR_BASE         + DRAM_EFFECT_ALL_ATTACK_SIZE)        // カリスマガード

/* ストーリモード時のエフェクト終了アドレス */
#define DRAM_STORY_EFFECT_ADDR_BASE_END             (DRAM_EFFECT_REMIRIA_7_ADDR_BASE + DRAM_EFFECT_MAGIC_3_CONDITION_SIZE)


/*
 * ミニゲームに使用するエフェクト、マップチップデータの保存領域
 * ストーリーモードのエフェクト保存領域と共有する
 */
#define DRAM_BLOCK_ADDR_BASE         		(DRAM_STORY_EFFECT_ADDR_BASE_END)				// 踏みつけブロック
#define DRAM_FONT_ADDR_BASE					(DRAM_BLOCK_ADDR_BASE + 0x00009000)				// 数字フォント
#define DRAM_FONT_RESULT_ADDR_BASE			(DRAM_FONT_ADDR_BASE  + 0x00003a80)				// リザルト画面用数字フォント
#define DRAM_EFFECT_HITBOX_ADDR_BASE 		(DRAM_FONT_RESULT_ADDR_BASE   + 0x0003a800)		// 踏みつけエフェクト
#define DRAM_EFFECT_BOMB_ADDR_BASE			(DRAM_EFFECT_HITBOX_ADDR_BASE + 0x00070800)		// 爆弾エフェクト
#define DRAM_EFFECT_PITYUN_ADDR_BASE		(DRAM_EFFECT_BOMB_ADDR_BASE   + 0x0021c000)		// 被弾エフェクト
#define DRAM_MINIGAME_FRAME_ADDR_BASE   	(DRAM_EFFECT_PITYUN_ADDR_BASE + 0x0007e904)     // ミニゲームの画面構成の配列データ


/*
 * フレームバッファと画面操作領域
 */
#define DRAM_VDMA_ADDR_BASE					(DRAM_VDMA_ADDR_BASE_START)						// フレームバッファの開始アドレス
#define DRAM_BACKUP_FBUF_ADDR_BASE			(DRAM_VDMA_ADDR_BASE + FBUF_TOTAL_SIZE)			// 一画面分のデータのバックアップの保存領域
#define DRAM_COLOR_PALLET_ADDR_BASE			(DRAM_BACKUP_FBUF_ADDR_BASE  + FBUF_SIZE)		// 一画面分のカラーパレット保存領域
#define DRAM_BACKGROUND_ADDR_BASE		    (DRAM_COLOR_PALLET_ADDR_BASE + FBUF_SIZE)		// バックグラウンドの背景画像の保存領域
#define DRAM_TITLE_MINIGAME_ADDR_BASE		(DRAM_BACKGROUND_ADDR_BASE)						// ミニゲームのタイトル画面、終了時上書き
#define DRAM_TITLE_1_ADDR_BASE				(DRAM_BACKGROUND_ADDR_BASE)						// ロゴの保存領域 オープニング終了時に上書きで消去
#define DRAM_BATTLE_BACK_ADDR_BASE			(DRAM_BACKGROUND_ADDR_BASE   + FBUF_SIZE)		// バトルに使用する背景データの保存領域、マップ間移動時に新しい背景データに上書き
#define DRAM_FOG_OBJ_ADDR_BASE  			(DRAM_BACKGROUND_ADDR_BASE + (FBUF_SIZE*2))		// ワールドマップの手前に描画する背景データ


/*
 * 一度読み込んだら再度読み込まない効果音
 */
/* FF バトル音源 */
#define DRAM_BGM_BATTLE_ADDR_BASE			(DRAM_BGM_BATTLE_ADDR_BASE_START)
#define DRAM_BGM_BATTLE_ENCOUNT_ADDR_BASE   (DRAM_BGM_BATTLE_ADDR_BASE)						    // エンカウント
#define DRAM_BGM_BATTLE_TRUN_ADDR_BASE      (DRAM_BGM_BATTLE_ENCOUNT_ADDR_BASE  + 0x0003e800)	// ターンが回ってきた
#define DRAM_BGM_BATTLE_DAMAGE_ADDR_BASE    (DRAM_BGM_BATTLE_TRUN_ADDR_BASE     + 0x00030700)	// ダメージを受ける
#define DRAM_BGM_BATTLE_KNIFE_ADDR_BASE     (DRAM_BGM_BATTLE_DAMAGE_ADDR_BASE   + 0x00017700)	// ナイフ
#define DRAM_BGM_BATTLE_SPEAR_ADDR_BASE     (DRAM_BGM_BATTLE_KNIFE_ADDR_BASE    + 0x00023280)	// 槍
#define DRAM_BGM_BATTLE_PUNCH_ADDR_BASE     (DRAM_BGM_BATTLE_SPEAR_ADDR_BASE    + 0x00008980)	// 打撃
#define DRAM_BGM_BATTLE_MISS_ADDR_BASE      (DRAM_BGM_BATTLE_PUNCH_ADDR_BASE    + 0x00009600)	// 空振り
#define DRAM_BGM_BATTLE_DEFEAT1_ADDR_BASE   (DRAM_BGM_BATTLE_MISS_ADDR_BASE     + 0x00008980)	// 倒す
#define DRAM_BGM_BATTLE_DEFEAT2_ADDR_BASE   (DRAM_BGM_BATTLE_DEFEAT1_ADDR_BASE  + 0x00024b80)	// 倒す
#define DRAM_BGM_BATTLE_RUN_ADDR_BASE       (DRAM_BGM_BATTLE_DEFEAT2_ADDR_BASE  + 0x00086600)	// 逃走
#define DRAM_BGM_BATTLE_BRAW1_ADDR_BASE     (DRAM_BGM_BATTLE_RUN_ADDR_BASE      + 0x00020d00)	// 打撃
#define DRAM_BGM_BATTLE_ADDR_BASE_END       (DRAM_BGM_BATTLE_BRAW1_ADDR_BASE    + 0x000157c0)

/* FF コマンド音源  */
#define DRAM_BGM_CMD_ADDR_BASE_START        (DRAM_BGM_BATTLE_ADDR_BASE_END)
#define DRAM_BGM_CMD_ENTER_ADDR_BASE        (DRAM_BGM_CMD_ADDR_BASE_START)					    // 
#define DRAM_BGM_CMD_DOOR1_ADDR_BASE        (DRAM_BGM_CMD_ENTER_ADDR_BASE       + 0x00016a80)	// 確定
#define DRAM_BGM_CMD_DOOR2_ADDR_BASE        (DRAM_BGM_CMD_DOOR1_ADDR_BASE       + 0x00014500)	// ドア開く
#define DRAM_BGM_CMD_CHEST_ADDR_BASE        (DRAM_BGM_CMD_DOOR2_ADDR_BASE       + 0x00008980)	// ドア開く
#define DRAM_BGM_CMD_SWITCH_ADDR_BASE       (DRAM_BGM_CMD_CHEST_ADDR_BASE       + 0x00007080)	// スイッチ
#define DRAM_BGM_CMD_GOLD_ADDR_BASE         (DRAM_BGM_CMD_SWITCH_ADDR_BASE      + 0x0000c800)	// スイッチ
#define DRAM_BGM_CMD_SELECT1_ADDR_BASE      (DRAM_BGM_CMD_GOLD_ADDR_BASE        + 0x00009f58)	// 購入
#define DRAM_BGM_CMD_SELECT2_ADDR_BASE      (DRAM_BGM_CMD_SELECT1_ADDR_BASE     + 0x00006400)	// 選択
#define DRAM_BGM_CMD_COLLAPSE_ADDR_BASE     (DRAM_BGM_CMD_SELECT2_ADDR_BASE     + 0x00005780)	// 選択
#define DRAM_BGM_CMD_KAIDANE_ADDR_BASE      (DRAM_BGM_CMD_COLLAPSE_ADDR_BASE    + 0x001f7e80)	// 階段
#define DRAM_BGM_CMD_TAKARA_ADDR_BASE       (DRAM_BGM_CMD_KAIDANE_ADDR_BASE     + 0x00020d00)	// 宝開ける
#define DRAM_BGM_CMD_SUCCESS_ADDR_BASE      (DRAM_BGM_CMD_TAKARA_ADDR_BASE      + 0x000191a4)   // 成功
#define DRAM_BGM_CMD_FAIL_ADDR_BASE         (DRAM_BGM_CMD_SUCCESS_ADDR_BASE     + 0x00019640)   // 失敗
#define DRAM_BGM_CMD_CANSEL_ADDR_BASE       (DRAM_BGM_CMD_FAIL_ADDR_BASE        + 0x00019640)   // キャンセル
#define DRAM_BGM_CMD_ADDR_BASE_END          (DRAM_BGM_CMD_CANSEL_ADDR_BASE      + 0x00005dc0)   // NULL

/* バトルエフェクト音源 */
#define DRAM_BGM_EFFECT_ADDR_BASE_START     (DRAM_BGM_CMD_ADDR_BASE_END)
#define DRAM_BGM_EFFECT_MAGIC_1_ADDR_BASE   (DRAM_BGM_EFFECT_ADDR_BASE_START     + 0)

/* ステータス操作 */
#define DRAM_BGM_EFFECT_POWER_UP_ADDR_BASE   (DRAM_BGM_EFFECT_MAGIC_1_ADDR_BASE    + 0x000445c0)
#define DRAM_BGM_EFFECT_POWER_DOWN_ADDR_BASE (DRAM_BGM_EFFECT_POWER_UP_ADDR_BASE   + 0x00061a80)
#define DRAM_BGM_EFFECT_DEF_1_ADDR_BASE      (DRAM_BGM_EFFECT_POWER_DOWN_ADDR_BASE + 0x00046500)
#define DRAM_BGM_EFFECT_HEST_1_ADDR_BASE     (DRAM_BGM_EFFECT_DEF_1_ADDR_BASE      + 0x00040740)
#define DRAM_BGM_EFFECT_SLOW_1_ADDR_BASE     (DRAM_BGM_EFFECT_HEST_1_ADDR_BASE     + 0x0005fb40)

/* 回復 */
#define DRAM_BGM_EFFECT_HEAL_1_ADDR_BASE    (DRAM_BGM_EFFECT_SLOW_1_ADDR_BASE    + 0x00071480)
#define DRAM_BGM_EFFECT_ESNA_1_ADDR_BASE    (DRAM_BGM_EFFECT_HEAL_1_ADDR_BASE    + 0x0005dc00)
#define DRAM_BGM_EFFECT_RISE_1_ADDR_BASE    (DRAM_BGM_EFFECT_ESNA_1_ADDR_BASE    + 0x0006f540)

/* 状態異常 */
#define DRAM_BGM_EFFECT_CONFIG_1_ADDR_BASE  (DRAM_BGM_EFFECT_RISE_1_ADDR_BASE    + 0x000a6040)
#define DRAM_BGM_EFFECT_POISON_1_ADDR_BASE  (DRAM_BGM_EFFECT_CONFIG_1_ADDR_BASE  + 0x00030d40)
#define DRAM_BGM_EFFECT_PARARAI_1_ADDR_BASE (DRAM_BGM_EFFECT_POISON_1_ADDR_BASE  + 0x00030d40)

/* 専用技 */
#define DRAM_BGM_EFFECT_KANAKO_8_ADDR_BASE  (DRAM_BGM_EFFECT_PARARAI_1_ADDR_BASE + 0x0002ee00)
#define DRAM_BGM_EFFECT_ADDR_BASE_END       (DRAM_BGM_EFFECT_KANAKO_8_ADDR_BASE  + 0x0006f540)

/* ミニゲームに使用する効果音の保存領域 */
#define DRAM_BGM_MINIGAME_ADDR_BASE_START	(DRAM_BGM_EFFECT_ADDR_BASE_END)
#define DRAM_BGM_COIN_ADDR_BASE			    (DRAM_BGM_MINIGAME_ADDR_BASE_START)
#define DRAM_BGM_JUMP_ADDR_BASE				(DRAM_BGM_COIN_ADDR_BASE    + 0x0002bc00)
#define DRAM_BGM_BOM_ADDR_BASE				(DRAM_BGM_JUMP_ADDR_BASE    + 0x0001b580)
#define DRAM_BGM_PITYN_ADDR_BASE			(DRAM_BGM_BOM_ADDR_BASE     + 0x0009cbc0)
#define DRAM_BGM_MINIGAME_ADDR_BASE_END     (DRAM_BGM_PITYN_ADDR_BASE   + 0x0002d4e4)

/* BGMの保存領域 */
#define DRAM_SOUND_FIELD_ADDR_BASE			(DRAM_SOUND_FIELD_ADDR_BASE_START)		// BGM
#define DRAM_SOUND_BATTLE_ADDR_BASE			(DRAM_SOUND_BATTLE_ADDR_BASE_START)		// 戦闘BGM
#define DRAM_SOUND_FANFARE_ADDR_BASE		(DRAM_SOUND_FANFARE_ADDR_BASE_START)	// FanfareBGM
#define DRAM_SOUND_SPARE_ADDR_BASE			(DRAM_SOUND_SPARE_ADDR_BASE_START)


/*
 * フォント、マップデータの保存領域
 */
#define DRAM_FONT_SJIS_ADDR_BASE	  		(DRAM_FONT_SJIS_ADDR_BASE_START)				// sjisフォント
#define DRAM_FONT_DAMEGE_ADDR_BASE	  		(DRAM_FONT_SJIS_ADDR_BASE + (144 * 7901 * 4))	// ダメージフォント
#define DRAM_FONT_HEAL_ADDR_BASE	  		(DRAM_FONT_DAMEGE_ADDR_BASE + (104 * 16 * 4))	// 回復フォント
#define DRAM_MAPDATA_ADDR_BASE		  		(DRAM_FONT_HEAL_ADDR_BASE + (104 * 16 * 4))	    // マップデータの背景画像
#define DRAM_MAPDATA_OBJECT_ADDR_BASE 		(DRAM_MAPDATA_ADDR_BASE   + (250 * 250 * 4))		// マップデータのオブジェクト
#define DRAM_MAPDATA_REGION_ADDR_BASE 		(DRAM_MAPDATA_OBJECT_ADDR_BASE + (250 * 250 * 4))	// リージョンマップID
#define DRAM_MAPDATA_NPC_ADDR_BASE   		(DRAM_MAPDATA_REGION_ADDR_BASE + (250 * 250 * 4))	// マップNPC配置ID


/* イベントフラグ管理領域 */
#define DRAM_FLAG_EVENT_ADDR_BASE           (DRAM_FLAG_EVENT_ADDR_BASE_START)


/*
 * 開始アドレスをポインタで参照する場合使用する
 */

/* システムのBinファイル */
#define DRAM_SYSTEM_BIN_ADDR_START				(uint32_t *)(DRAM_SYSTEM_BIN_ADDR_BASE)


/* キャラクター */
#define DRAM_HERO_ADDR_START         			(uint32_t *)(DRAM_UNIT_ADDR_BASE)
#define DRAM_HERO_BATTLE_ADDR_START    			(uint32_t *)(DRAM_UNIT_BATTLE_ADDR_BASE)
#define DRAM_HERO_SHADOW_ADDR_START    			(uint32_t *)(DRAM_UNIT_SHADOW_ADDR_BASE)
#define DRAM_HERO_WAKU_ADDR_START    			(uint32_t *)(DRAM_UNIT_WAKU_ADDR_BASE)


/* NPC */
#define DRAM_NPC_WORLD_ADDR_START      			(uint32_t *)(DRAM_NPC_WORLD_ADDR_BASE)


/* アイコン */
#define DRAM_ICON_ADDR_START        			(uint32_t *)(DRAM_ICON_ADDR_BASE)
#define DRAM_ICON_2_ADDR_START        			(uint32_t *)(DRAM_ICON_2_ADDR_BASE)


/* マップでのマップチップデータ */
#define DRAM_MAPCHIP_MAP_ADDR_START  			(uint32_t *)(DRAM_MAPCHIP_MAPDATA_ADDR_BASE)
#define DRAM_MINIGAME_FRAME_ADDR_START 			(uint32_t *)(DRAM_MINIGAME_FRAME_ADDR_BASE)
#define DRAM_BLOCK_DRAW_ADDR_START   			(uint32_t *)(DRAM_BLOCK_ADDR_BASE)


/* マップの背景とオブジェクト */
#define DRAM_MAPDATA_ADDR_START     			(uint32_t *)(DRAM_MAPDATA_ADDR_BASE)
#define DRAM_MAPDATA_OBJECT_ADDR_START 			(uint32_t *)(DRAM_MAPDATA_OBJECT_ADDR_BASE)
#define DRAM_MAPDATA_REGION_ADDR_START 			(uint32_t *)(DRAM_MAPDATA_REGION_ADDR_BASE)
#define DRAM_MAPDATA_NPC_ADDR_START 			(uint32_t *)(DRAM_MAPDATA_NPC_ADDR_BASE)


/* カラーパレットとコピー領域 */
#define DARK_BACKUP_FBUF_ADDR_START				(uint32_t *)(DRAM_BACKUP_FBUF_ADDR_BASE)
#define DRAM_BACKGROUND_ADDR_START				(uint32_t *)(DRAM_BACKGROUND_ADDR_BASE)
#define DRAM_BATTLE_BACK_ADDR_START				(uint32_t *)(DRAM_BATTLE_BACK_ADDR_BASE)
#define DRAM_FOG_OBJECT_ADDR_START				(uint32_t *)(DRAM_FOG_OBJ_ADDR_BASE)


/* エフェクト */
#define DRAM_EFFECT_HITBOX_ADDR_START 			(uint32_t *)(DRAM_EFFECT_HITBOX_ADDR_BASE)
#define DRAM_EFFECT_ADDR_START       			(uint32_t *)(DRAM_EFFECT_BOMB_ADDR_BASE)
#define DRAM_EFFECT_PITYUN_ADDR_START 			(uint32_t *)(DRAM_EFFECT_PITYUN_ADDR_BASE)


/* オープニング画面 */
#define DRAM_TITLE_1_ADDR_START					(uint32_t *)(DRAM_TITLE_1_ADDR_BASE)
#define DRAM_TITLE_MINIGAME_ADDR_START			(uint32_t *)(DRAM_TITLE_MINIGAME_ADDR_BASE)


/* フォント */
#define DRAM_FONT_SCORE_ADDR_START         		(uint32_t *)(DRAM_FONT_ADDR_BASE)
#define DRAM_FONT_RESULT_ADDR_START				(uint32_t *)(DRAM_FONT_RESULT_ADDR_BASE)
#define DRAM_FONT_SJIS_ADDR_START    			(uint32_t *)(DRAM_FONT_SJIS_ADDR_BASE)
#define DRAM_FONT_DAMEGE_ADDR_START    			(uint32_t *)(DRAM_FONT_DAMEGE_ADDR_BASE)
#define DRAM_FONT_HEAL_ADDR_START    			(uint32_t *)(DRAM_FONT_HEAL_ADDR_BASE)


/* ミニゲーム */
#define DRAM_BGM_COIN_ADDR_START     			(uint32_t *)(DRAM_BGM_COIN_ADDR_BASE)
#define DRAM_BGM_JUMP_ADDR_START     			(uint32_t *)(DRAM_BGM_JUMP_ADDR_BASE)
#define DRAM_BGM_BOM_ADDR_START      			(uint32_t *)(DRAM_BGM_BOM_ADDR_BASE)
#define DRAM_BGM_PITYN_ADDR_START   			(uint32_t *)(DRAM_BGM_PITYN_ADDR_BASE)


/* FF Battle */
#define DRAM_BGM_BATTLE_ENCOUNT_ADDR_START      (uint32_t *)(DRAM_BGM_BATTLE_ENCOUNT_ADDR_BASE)
#define DRAM_BGM_BATTLE_TRUN_ADDR_START         (uint32_t *)(DRAM_BGM_BATTLE_TRUN_ADDR_BASE)
#define DRAM_BGM_BATTLE_DAMAGE_ADDR_START       (uint32_t *)(DRAM_BGM_BATTLE_DAMAGE_ADDR_BASE)
#define DRAM_BGM_BATTLE_KNIFE_ADDR_START        (uint32_t *)(DRAM_BGM_BATTLE_KNIFE_ADDR_BASE)
#define DRAM_BGM_BATTLE_SPEAR_ADDR_START        (uint32_t *)(DRAM_BGM_BATTLE_SPEAR_ADDR_BASE)
#define DRAM_BGM_BATTLE_PUNCH_ADDR_START        (uint32_t *)(DRAM_BGM_BATTLE_PUNCH_ADDR_BASE)
#define DRAM_BGM_BATTLE_MISS_ADDR_START         (uint32_t *)(DRAM_BGM_BATTLE_MISS_ADDR_BASE)
#define DRAM_BGM_BATTLE_DEFEAT1_ADDR_START      (uint32_t *)(DRAM_BGM_BATTLE_DEFEAT1_ADDR_BASE)
#define DRAM_BGM_BATTLE_DEFEAT2_ADDR_START      (uint32_t *)(DRAM_BGM_BATTLE_DEFEAT2_ADDR_BASE)
#define DRAM_BGM_BATTLE_RUN_ADDR_START          (uint32_t *)(DRAM_BGM_BATTLE_RUN_ADDR_BASE)
#define DRAM_BGM_BATTLE_BRAW1_ADDR_START        (uint32_t *)(DRAM_BGM_BATTLE_BRAW1_ADDR_BASE)

/* FF コマンド */
#define DRAM_BGM_CMD_ENTER_ADDR_START           (uint32_t *)(DRAM_BGM_CMD_ENTER_ADDR_BASE   )
#define DRAM_BGM_CMD_DOOR1_ADDR_START           (uint32_t *)(DRAM_BGM_CMD_DOOR1_ADDR_BASE   )
#define DRAM_BGM_CMD_DOOR2_ADDR_START           (uint32_t *)(DRAM_BGM_CMD_DOOR2_ADDR_BASE   )
#define DRAM_BGM_CMD_CHEST_ADDR_START           (uint32_t *)(DRAM_BGM_CMD_CHEST_ADDR_BASE   )
#define DRAM_BGM_CMD_SWITCH_ADDR_START          (uint32_t *)(DRAM_BGM_CMD_SWITCH_ADDR_BASE  )
#define DRAM_BGM_CMD_GOLD_ADDR_START            (uint32_t *)(DRAM_BGM_CMD_GOLD_ADDR_BASE    )
#define DRAM_BGM_CMD_SELECT1_ADDR_START         (uint32_t *)(DRAM_BGM_CMD_SELECT1_ADDR_BASE )
#define DRAM_BGM_CMD_SELECT2_ADDR_START         (uint32_t *)(DRAM_BGM_CMD_SELECT2_ADDR_BASE )
#define DRAM_BGM_CMD_COLLAPSE_ADDR_START        (uint32_t *)(DRAM_BGM_CMD_COLLAPSE_ADDR_BASE)
#define DRAM_BGM_CMD_KAIDAN_ADDR_START          (uint32_t *)(DRAM_BGM_CMD_KAIDANE_ADDR_BASE)
#define DRAM_BGM_CMD_TAKARA_ADDR_START          (uint32_t *)(DRAM_BGM_CMD_TAKARA_ADDR_BASE)
#define DRAM_BGM_CMD_SUCCESS_ADDR_START         (uint32_t *)(DRAM_BGM_CMD_SUCCESS_ADDR_BASE)
#define DRAM_BGM_CMD_FAIL_ADDR_START            (uint32_t *)(DRAM_BGM_CMD_FAIL_ADDR_BASE)
#define DRAM_BGM_CMD_CANSEL_ADDR_START          (uint32_t *)(DRAM_BGM_CMD_CANSEL_ADDR_BASE)

/* バトルエフェクトの効果音 */
#define DRAM_BGM_EFFECT_MAGIC_1_ADDR_START      (uint32_t *)(DRAM_BGM_EFFECT_MAGIC_1_ADDR_BASE)

/* ステータス操作 */
#define DRAM_BGM_EFFECT_POWER_UP_ADDR_START     (uint32_t *)(DRAM_BGM_EFFECT_POWER_UP_ADDR_BASE)
#define DRAM_BGM_EFFECT_POWER_DOWN_ADDR_START   (uint32_t *)(DRAM_BGM_EFFECT_POWER_DOWN_ADDR_BASE)
#define DRAM_BGM_EFFECT_DEF_1_ADDR_START        (uint32_t *)(DRAM_BGM_EFFECT_DEF_1_ADDR_BASE)
#define DRAM_BGM_EFFECT_HEST_1_ADDR_START       (uint32_t *)(DRAM_BGM_EFFECT_HEST_1_ADDR_BASE)
#define DRAM_BGM_EFFECT_SLOW_1_ADDR_START       (uint32_t *)(DRAM_BGM_EFFECT_SLOW_1_ADDR_BASE)

/* 回復 */
#define DRAM_BGM_EFFECT_HEAL_1_ADDR_START       (uint32_t *)(DRAM_BGM_EFFECT_HEAL_1_ADDR_BASE)
#define DRAM_BGM_EFFECT_ESNA_1_ADDR_START       (uint32_t *)(DRAM_BGM_EFFECT_ESNA_1_ADDR_BASE)
#define DRAM_BGM_EFFECT_RISE_1_ADDR_START       (uint32_t *)(DRAM_BGM_EFFECT_RISE_1_ADDR_BASE)

/* 状態異常 */
#define DRAM_BGM_EFFECT_CONFIG_1_ADDR_START     (uint32_t *)(DRAM_BGM_EFFECT_CONFIG_1_ADDR_BASE)
#define DRAM_BGM_EFFECT_POISON_1_ADDR_START     (uint32_t *)(DRAM_BGM_EFFECT_POISON_1_ADDR_BASE)
#define DRAM_BGM_EFFECT_PARARAI_1_ADDR_START    (uint32_t *)(DRAM_BGM_EFFECT_PARARAI_1_ADDR_BASE)

/* 専用技 */
#define DRAM_BGM_EFFECT_KANAKO_8_ADDR_START    (uint32_t *)(DRAM_BGM_EFFECT_KANAKO_8_ADDR_BASE)


/* BGM */
#define DRAM_SOUND_FIELD_ADDR_START        		(uint32_t *)(DRAM_SOUND_FIELD_ADDR_BASE)
#define DRAM_SOUND_BATTLE_ADDR_START        	(uint32_t *)(DRAM_SOUND_BATTLE_ADDR_BASE)
#define DRAM_SOUND_FANFARE_ADDR_START        	(uint32_t *)(DRAM_SOUND_FANFARE_ADDR_BASE)
#define DRAM_SOUND_SPARE_ADDR_START				(uint32_t *)(DRAM_SOUND_SPARE_ADDR_BASE)

/* 敵データ */
#define DRAM_ENEMY_1_ADDR_START        			(uint32_t *)(DRAM_ENEMY_1_ADDR_BASE)
#define DRAM_ENEMY_2_ADDR_START        			(uint32_t *)(DRAM_ENEMY_2_ADDR_BASE)
#define DRAM_ENEMY_3_ADDR_START        			(uint32_t *)(DRAM_ENEMY_3_ADDR_BASE)
#define DRAM_ENEMY_4_ADDR_START        			(uint32_t *)(DRAM_ENEMY_4_ADDR_BASE)


/* バトルエフェクト */
#define DRAM_EFFECT_BATTLE_MAGIC_1_ADDR_START  		(uint32_t *)(DRAM_EFFECT_BATTLE_MAGIC_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_SLASH_1_ADDR_START       (uint32_t *)(DRAM_EFFECT_BATTLE_SLASH_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_BROW_1_ADDR_START        (uint32_t *)(DRAM_EFFECT_BATTLE_BROW_1_ADDR_BASE)

/* ステータス操作 */
#define DRAM_EFFECT_BATTLE_POWER_UP_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_POWER_UP_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_POWER_DOWN_ADDR_START    (uint32_t *)(DRAM_EFFECT_BATTLE_POWER_DOWN_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_POWER_DOWN_2_ADDR_START  (uint32_t *)(DRAM_EFFECT_BATTLE_POWER_DOWN_2_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_DEF_1_ADDR_START         (uint32_t *)(DRAM_EFFECT_BATTLE_DEF_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_RES_1_ADDR_START         (uint32_t *)(DRAM_EFFECT_BATTLE_RES_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_HEST_1_ADDR_START        (uint32_t *)(DRAM_EFFECT_BATTLE_HEST_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_SLOW_1_ADDR_START        (uint32_t *)(DRAM_EFFECT_BATTLE_SLOW_1_ADDR_BASE)

/* 回復 */
#define DRAM_EFFECT_BATTLE_HEAL_1_ADDR_START        (uint32_t *)(DRAM_EFFECT_BATTLE_HEAL_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_ESNA_1_ADDR_START        (uint32_t *)(DRAM_EFFECT_BATTLE_ESNA_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_RISE_1_ADDR_START        (uint32_t *)(DRAM_EFFECT_BATTLE_RISE_1_ADDR_BASE)

/* 状態異常 */
#define DRAM_EFFECT_BATTLE_CONFIG_1_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_CONFIG_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_POISON_1_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_POISON_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_PARARAI_1_ADDR_START     (uint32_t *)(DRAM_EFFECT_BATTLE_PARARAI_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_BERSEK_1_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_BERSEK_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_RIGENE_1_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_RIGENE_1_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_DEATH_1_ADDR_START       (uint32_t *)(DRAM_EFFECT_BATTLE_DEATH_1_ADDR_BASE)

/* 状態異常ループ再生 */
#define DRAM_EFFECT_BATTLE_POISON_2_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_POISON_2_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_CONFIG_2_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_CONFIG_2_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_PARARAI_2_ADDR_START     (uint32_t *)(DRAM_EFFECT_BATTLE_PARARAI_2_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_BUF_2_ADDR_START         (uint32_t *)(DRAM_EFFECT_BATTLE_BUF_2_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_BERSEK_2_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_BERSEK_2_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_REFREK_2_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_REFREK_2_ADDR_BASE)
#define DRAM_EFFECT_BATTLE_RIGENE_2_ADDR_START      (uint32_t *)(DRAM_EFFECT_BATTLE_RIGENE_2_ADDR_BASE)

/* 専用技 */
#define DRAM_EFFECT_KANAKO_8_ADDR_START              (uint32_t *)(DRAM_EFFECT_KANAKO_8_ADDR_BASE)
#define DRAM_EFFECT_REMIRIA_7_ADDR_START             (uint32_t *)(DRAM_EFFECT_REMIRIA_7_ADDR_BASE)


/* イベントフラグ領域 */
#define DRAM_FLAG_EVENT_ADDR_START                  (uint32_t *)(DRAM_FLAG_EVENT_ADDR_BASE)


/*
 * フレームバッファの保存アドレスと作業エリア
 */
#define DRAM_VDMA_ADDR_1        (uint32_t *)(DRAM_VDMA_ADDR_BASE + (FBUF_SIZE * 0))
#define DRAM_VDMA_ADDR_2        (uint32_t *)(DRAM_VDMA_ADDR_BASE + (FBUF_SIZE * 1))
#define DRAM_VDMA_ADDR_3        (uint32_t *)(DRAM_VDMA_ADDR_BASE + (FBUF_SIZE * 2))
#define FBUF_ADDR_1             (DRAM_VDMA_ADDR_BASE + (FBUF_SIZE * 0))
#define FBUF_ADDR_2             (DRAM_VDMA_ADDR_BASE + (FBUF_SIZE * 1))
#define FBUF_ADDR_3             (DRAM_VDMA_ADDR_BASE + (FBUF_SIZE * 2))



/*
 * RAW_FILE_STATS
 * Bitmap_DBに保存を行うデータのバイト数
 * データ構造 0x00000000 + '\n' = 11byte
 */

/* rawファイルの1データの読み込みバイト数 */
#define RAW_FILE_STATS							(11)
#define RAW_INIT_FILE_READ_SIZE					(11 + 1)


/* マップチップデータの読み込みサイズ */
#define FILE_BUFFER_SIZE_CHIP       			((MAPCHIP_TOTAL_SIZE    * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_BLOCK      			((SIZE_BLOCK_TOTAL_SIZE * RAW_FILE_STATS) + 1)


/* マップデータの読み込みサイズ */
#define FILE_BUFFER_SIZE_MAPDATA_MINIGAME 		((20  * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_MAPDATA_GEKAI    		((200 * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_MAPDATA_ROMEN_VIRRAGE	((50  * RAW_FILE_STATS) + 1)


/* キャラクターデータの読み込みサイズ */
#define FILE_BUFFER_SIZE_HERO        			((SIZE_UNIT_TOTAL_SIZE		* RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_HERO_BATTLE   			((SIZE_UNIT_BATTLE_TOTAL_SIZE * RAW_FILE_STATS) + 1)


/* ミニゲームエフェクトデータの読み込みサイズ */
#define FILE_BUFFER_SIZE_HITBOX      			((SIZE_HITBOX_MAXSIZE       * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_BOMB        			((SIZE_BOMB_MAXSIZE         * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_PITYUN      			((SIZE_PITYUN_MAXSIZE       * RAW_FILE_STATS) + 1)


/* バトルエフェクトの読み込みサイズ */
#define FILE_BUFFER_SIZE_EFFECT_BATTLE_DEFAULT    ((SIZE_EFFECT_BATTLE_STANDERD_MAXSIZE * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_EFFECT_BATTLE_CONDITION  ((SIZE_EFFECT_BATTLE_CONDITION_MAXSIZE * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_EFFECT_BATTLE_ALL_ATTACK ((SIZE_EFFECT_ALL_ATTACK_MAXSIZE * RAW_FILE_STATS) + 1)



/* フォントデータの読み込みサイズ */
#define FILE_BUFFER_SIZE_FONT_SCORE       		((SIZE_FONT_NUMBER_MAXSIZE  * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_FONT_RESULT 			((SIZE_FONT_RESULT_MAXSIZE  * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_FONT_SJIS   			((SIZE_FONT_SJIS_MAXSIZE    * RAW_FILE_STATS) + 1)
#define FILE_BUFFER_SIZE_FONT_DAMEGE   			((SIZE_FONT_DAMEGE_MAXSIZE  * RAW_FILE_STATS) + 1)


/* アイコンデータの読み込みサイズ */
#define FILE_BUFFER_SIZE_ICON   			    ((SIZE_ICON_TOTAL_SIZE      * RAW_FILE_STATS) + 1)


/*
 * MAPSIZE_DB_MEMBA_NUM
 * Bitmap_DBのメンバ数
 */
#define MAPSIZE_DB_MEMBA_NUM (2)


/*
 * rawファイルパラメータ
 * xxd -p sa.rawでファイルを作成
 * 
 * STR_BYTE
 * １つの音源データのバイト数
 * 
 * F_READ_SIZE
 * 読み込み配列サイズ
 */
#define STR_BYTE		(2)
#define F_READ_SIZE		(3840 + 1)

#endif
