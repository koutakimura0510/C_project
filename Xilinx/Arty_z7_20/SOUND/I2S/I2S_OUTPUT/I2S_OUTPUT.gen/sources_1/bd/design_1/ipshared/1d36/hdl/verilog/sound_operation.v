// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sound_operation_sound_operation,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=853,HLS_SYN_LUT=968,HLS_VERSION=2020_2}" *)

module sound_operation (
        ap_clk,
        ap_rst_n,
        m_axi_ram_AWVALID,
        m_axi_ram_AWREADY,
        m_axi_ram_AWADDR,
        m_axi_ram_AWID,
        m_axi_ram_AWLEN,
        m_axi_ram_AWSIZE,
        m_axi_ram_AWBURST,
        m_axi_ram_AWLOCK,
        m_axi_ram_AWCACHE,
        m_axi_ram_AWPROT,
        m_axi_ram_AWQOS,
        m_axi_ram_AWREGION,
        m_axi_ram_AWUSER,
        m_axi_ram_WVALID,
        m_axi_ram_WREADY,
        m_axi_ram_WDATA,
        m_axi_ram_WSTRB,
        m_axi_ram_WLAST,
        m_axi_ram_WID,
        m_axi_ram_WUSER,
        m_axi_ram_ARVALID,
        m_axi_ram_ARREADY,
        m_axi_ram_ARADDR,
        m_axi_ram_ARID,
        m_axi_ram_ARLEN,
        m_axi_ram_ARSIZE,
        m_axi_ram_ARBURST,
        m_axi_ram_ARLOCK,
        m_axi_ram_ARCACHE,
        m_axi_ram_ARPROT,
        m_axi_ram_ARQOS,
        m_axi_ram_ARREGION,
        m_axi_ram_ARUSER,
        m_axi_ram_RVALID,
        m_axi_ram_RREADY,
        m_axi_ram_RDATA,
        m_axi_ram_RLAST,
        m_axi_ram_RID,
        m_axi_ram_RUSER,
        m_axi_ram_RRESP,
        m_axi_ram_BVALID,
        m_axi_ram_BREADY,
        m_axi_ram_BRESP,
        m_axi_ram_BID,
        m_axi_ram_BUSER,
        sdata,
        opeout,
        count,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_RAM_ID_WIDTH = 1;
parameter    C_M_AXI_RAM_ADDR_WIDTH = 64;
parameter    C_M_AXI_RAM_DATA_WIDTH = 32;
parameter    C_M_AXI_RAM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_WUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_RUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_BUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_USER_VALUE = 0;
parameter    C_M_AXI_RAM_PROT_VALUE = 0;
parameter    C_M_AXI_RAM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RAM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_ram_AWVALID;
input   m_axi_ram_AWREADY;
output  [C_M_AXI_RAM_ADDR_WIDTH - 1:0] m_axi_ram_AWADDR;
output  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_AWID;
output  [7:0] m_axi_ram_AWLEN;
output  [2:0] m_axi_ram_AWSIZE;
output  [1:0] m_axi_ram_AWBURST;
output  [1:0] m_axi_ram_AWLOCK;
output  [3:0] m_axi_ram_AWCACHE;
output  [2:0] m_axi_ram_AWPROT;
output  [3:0] m_axi_ram_AWQOS;
output  [3:0] m_axi_ram_AWREGION;
output  [C_M_AXI_RAM_AWUSER_WIDTH - 1:0] m_axi_ram_AWUSER;
output   m_axi_ram_WVALID;
input   m_axi_ram_WREADY;
output  [C_M_AXI_RAM_DATA_WIDTH - 1:0] m_axi_ram_WDATA;
output  [C_M_AXI_RAM_WSTRB_WIDTH - 1:0] m_axi_ram_WSTRB;
output   m_axi_ram_WLAST;
output  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_WID;
output  [C_M_AXI_RAM_WUSER_WIDTH - 1:0] m_axi_ram_WUSER;
output   m_axi_ram_ARVALID;
input   m_axi_ram_ARREADY;
output  [C_M_AXI_RAM_ADDR_WIDTH - 1:0] m_axi_ram_ARADDR;
output  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_ARID;
output  [7:0] m_axi_ram_ARLEN;
output  [2:0] m_axi_ram_ARSIZE;
output  [1:0] m_axi_ram_ARBURST;
output  [1:0] m_axi_ram_ARLOCK;
output  [3:0] m_axi_ram_ARCACHE;
output  [2:0] m_axi_ram_ARPROT;
output  [3:0] m_axi_ram_ARQOS;
output  [3:0] m_axi_ram_ARREGION;
output  [C_M_AXI_RAM_ARUSER_WIDTH - 1:0] m_axi_ram_ARUSER;
input   m_axi_ram_RVALID;
output   m_axi_ram_RREADY;
input  [C_M_AXI_RAM_DATA_WIDTH - 1:0] m_axi_ram_RDATA;
input   m_axi_ram_RLAST;
input  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_RID;
input  [C_M_AXI_RAM_RUSER_WIDTH - 1:0] m_axi_ram_RUSER;
input  [1:0] m_axi_ram_RRESP;
input   m_axi_ram_BVALID;
output   m_axi_ram_BREADY;
input  [1:0] m_axi_ram_BRESP;
input  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_BID;
input  [C_M_AXI_RAM_BUSER_WIDTH - 1:0] m_axi_ram_BUSER;
output  [31:0] sdata;
output  [31:0] opeout;
input  [31:0] count;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] ramadr;
reg   [31:0] sdata_1_data_reg;
reg    sdata_1_vld_reg;
reg    sdata_1_vld_in;
reg    sdata_1_ack_in;
reg   [31:0] opeout_1_data_reg;
reg    opeout_1_vld_reg;
reg    opeout_1_vld_in;
reg    opeout_1_ack_in;
wire   [31:0] status;
reg   [31:0] status_0_data_reg;
reg    status_0_vld_reg;
reg    status_0_ack_out;
reg   [31:0] count_0_data_reg;
reg    count_0_vld_reg;
reg    count_0_ack_out;
reg    ram_blk_n_AR;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg    ram_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ram_AWREADY;
wire    ram_WREADY;
reg    ram_ARVALID;
wire    ram_ARREADY;
wire    ram_RVALID;
reg    ram_RREADY;
wire   [31:0] ram_RDATA;
wire    ram_RLAST;
wire   [0:0] ram_RID;
wire   [0:0] ram_RUSER;
wire   [1:0] ram_RRESP;
wire    ram_BVALID;
wire   [1:0] ram_BRESP;
wire   [0:0] ram_BID;
wire   [0:0] ram_BUSER;
reg   [63:0] ram_addr_reg_160;
wire    ap_CS_fsm_state2;
wire  signed [63:0] sext_ln324_fu_150_p1;
wire   [33:0] shl_ln_fu_122_p3;
wire   [63:0] zext_ln324_fu_130_p1;
wire   [63:0] add_ln324_fu_134_p2;
wire   [61:0] trunc_ln_fu_140_p4;
wire    ap_CS_fsm_state11;
reg    ap_block_state11;
reg   [10:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 sdata_1_data_reg = 32'd0;
#0 sdata_1_vld_reg = 1'b0;
#0 opeout_1_data_reg = 32'd0;
#0 opeout_1_vld_reg = 1'b0;
#0 status_0_data_reg = 32'd0;
#0 status_0_vld_reg = 1'b0;
#0 count_0_data_reg = 32'd0;
#0 count_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

sound_operation_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ramadr(ramadr),
    .status(status)
);

sound_operation_ram_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 32 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RAM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RAM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RAM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RAM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RAM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RAM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RAM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RAM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_RAM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RAM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RAM_CACHE_VALUE ))
ram_m_axi_U(
    .AWVALID(m_axi_ram_AWVALID),
    .AWREADY(m_axi_ram_AWREADY),
    .AWADDR(m_axi_ram_AWADDR),
    .AWID(m_axi_ram_AWID),
    .AWLEN(m_axi_ram_AWLEN),
    .AWSIZE(m_axi_ram_AWSIZE),
    .AWBURST(m_axi_ram_AWBURST),
    .AWLOCK(m_axi_ram_AWLOCK),
    .AWCACHE(m_axi_ram_AWCACHE),
    .AWPROT(m_axi_ram_AWPROT),
    .AWQOS(m_axi_ram_AWQOS),
    .AWREGION(m_axi_ram_AWREGION),
    .AWUSER(m_axi_ram_AWUSER),
    .WVALID(m_axi_ram_WVALID),
    .WREADY(m_axi_ram_WREADY),
    .WDATA(m_axi_ram_WDATA),
    .WSTRB(m_axi_ram_WSTRB),
    .WLAST(m_axi_ram_WLAST),
    .WID(m_axi_ram_WID),
    .WUSER(m_axi_ram_WUSER),
    .ARVALID(m_axi_ram_ARVALID),
    .ARREADY(m_axi_ram_ARREADY),
    .ARADDR(m_axi_ram_ARADDR),
    .ARID(m_axi_ram_ARID),
    .ARLEN(m_axi_ram_ARLEN),
    .ARSIZE(m_axi_ram_ARSIZE),
    .ARBURST(m_axi_ram_ARBURST),
    .ARLOCK(m_axi_ram_ARLOCK),
    .ARCACHE(m_axi_ram_ARCACHE),
    .ARPROT(m_axi_ram_ARPROT),
    .ARQOS(m_axi_ram_ARQOS),
    .ARREGION(m_axi_ram_ARREGION),
    .ARUSER(m_axi_ram_ARUSER),
    .RVALID(m_axi_ram_RVALID),
    .RREADY(m_axi_ram_RREADY),
    .RDATA(m_axi_ram_RDATA),
    .RLAST(m_axi_ram_RLAST),
    .RID(m_axi_ram_RID),
    .RUSER(m_axi_ram_RUSER),
    .RRESP(m_axi_ram_RRESP),
    .BVALID(m_axi_ram_BVALID),
    .BREADY(m_axi_ram_BREADY),
    .BRESP(m_axi_ram_BRESP),
    .BID(m_axi_ram_BID),
    .BUSER(m_axi_ram_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ram_ARVALID),
    .I_ARREADY(ram_ARREADY),
    .I_ARADDR(ram_addr_reg_160),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(ram_RVALID),
    .I_RREADY(ram_RREADY),
    .I_RDATA(ram_RDATA),
    .I_RID(ram_RID),
    .I_RUSER(ram_RUSER),
    .I_RRESP(ram_RRESP),
    .I_RLAST(ram_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(ram_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(ram_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(ram_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(ram_BRESP),
    .I_BID(ram_BID),
    .I_BUSER(ram_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((count_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (count_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (count_0_vld_reg == 1'b0)))) begin
        count_0_data_reg <= count;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (opeout_1_vld_in == 1'b1) & (opeout_1_vld_reg == 1'b1)) | ((opeout_1_vld_in == 1'b1) & (opeout_1_vld_reg == 1'b0)))) begin
        opeout_1_data_reg <= status_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ram_addr_reg_160 <= sext_ln324_fu_150_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (sdata_1_vld_in == 1'b1) & (sdata_1_vld_reg == 1'b1)) | ((sdata_1_vld_in == 1'b1) & (sdata_1_vld_reg == 1'b0)))) begin
        sdata_1_data_reg <= ram_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((status_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (status_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (status_0_vld_reg == 1'b0)))) begin
        status_0_data_reg <= status;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((sdata_1_ack_in == 1'b0) | (opeout_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11)))) begin
        count_0_ack_out = 1'b1;
    end else begin
        count_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((opeout_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (opeout_1_vld_reg == 1'b1)))) begin
        opeout_1_ack_in = 1'b1;
    end else begin
        opeout_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ram_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        opeout_1_vld_in = 1'b1;
    end else begin
        opeout_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ram_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ram_ARVALID = 1'b1;
    end else begin
        ram_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ram_RREADY = 1'b1;
    end else begin
        ram_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ram_blk_n_AR = m_axi_ram_ARREADY;
    end else begin
        ram_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ram_blk_n_R = m_axi_ram_RVALID;
    end else begin
        ram_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((sdata_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (sdata_1_vld_reg == 1'b1)))) begin
        sdata_1_ack_in = 1'b1;
    end else begin
        sdata_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        sdata_1_vld_in = 1'b1;
    end else begin
        sdata_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((~((sdata_1_ack_in == 1'b0) | (opeout_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | ((ram_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        status_0_ack_out = 1'b1;
    end else begin
        status_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((ram_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((ram_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((sdata_1_ack_in == 1'b0) | (opeout_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_fu_134_p2 = (zext_ln324_fu_130_p1 + ramadr);

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state11 = ((sdata_1_ack_in == 1'b0) | (opeout_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign opeout = opeout_1_data_reg;

assign sdata = sdata_1_data_reg;

assign sext_ln324_fu_150_p1 = $signed(trunc_ln_fu_140_p4);

assign shl_ln_fu_122_p3 = {{count_0_data_reg}, {2'd0}};

assign trunc_ln_fu_140_p4 = {{add_ln324_fu_134_p2[63:2]}};

assign zext_ln324_fu_130_p1 = shl_ln_fu_122_p3;

endmodule //sound_operation
