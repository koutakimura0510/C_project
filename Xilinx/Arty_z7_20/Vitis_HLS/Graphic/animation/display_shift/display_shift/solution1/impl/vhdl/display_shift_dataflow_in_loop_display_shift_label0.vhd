-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity display_shift_dataflow_in_loop_display_shift_label0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    xstart : IN STD_LOGIC_VECTOR (31 downto 0);
    y_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ystart : IN STD_LOGIC_VECTOR (31 downto 0);
    frame_size : IN STD_LOGIC_VECTOR (31 downto 0);
    ddr_copy : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_copy_AWVALID : OUT STD_LOGIC;
    m_axi_copy_AWREADY : IN STD_LOGIC;
    m_axi_copy_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_copy_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_copy_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_WVALID : OUT STD_LOGIC;
    m_axi_copy_WREADY : IN STD_LOGIC;
    m_axi_copy_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_copy_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_WLAST : OUT STD_LOGIC;
    m_axi_copy_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_ARVALID : OUT STD_LOGIC;
    m_axi_copy_ARREADY : IN STD_LOGIC;
    m_axi_copy_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_copy_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_copy_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_RVALID : IN STD_LOGIC;
    m_axi_copy_RREADY : OUT STD_LOGIC;
    m_axi_copy_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_copy_RLAST : IN STD_LOGIC;
    m_axi_copy_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_BVALID : IN STD_LOGIC;
    m_axi_copy_BREADY : OUT STD_LOGIC;
    m_axi_copy_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    xend : IN STD_LOGIC_VECTOR (31 downto 0);
    yend : IN STD_LOGIC_VECTOR (31 downto 0);
    ddr_update : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_update_AWVALID : OUT STD_LOGIC;
    m_axi_update_AWREADY : IN STD_LOGIC;
    m_axi_update_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_update_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_WVALID : OUT STD_LOGIC;
    m_axi_update_WREADY : IN STD_LOGIC;
    m_axi_update_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_WLAST : OUT STD_LOGIC;
    m_axi_update_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_ARVALID : OUT STD_LOGIC;
    m_axi_update_ARREADY : IN STD_LOGIC;
    m_axi_update_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_update_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RVALID : IN STD_LOGIC;
    m_axi_update_RREADY : OUT STD_LOGIC;
    m_axi_update_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_RLAST : IN STD_LOGIC;
    m_axi_update_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_BVALID : IN STD_LOGIC;
    m_axi_update_BREADY : OUT STD_LOGIC;
    m_axi_update_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    width_ap_vld : IN STD_LOGIC;
    xstart_ap_vld : IN STD_LOGIC;
    y_2_ap_vld : IN STD_LOGIC;
    ystart_ap_vld : IN STD_LOGIC;
    frame_size_ap_vld : IN STD_LOGIC;
    ddr_copy_ap_vld : IN STD_LOGIC;
    xend_ap_vld : IN STD_LOGIC;
    yend_ap_vld : IN STD_LOGIC;
    ddr_update_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of display_shift_dataflow_in_loop_display_shift_label0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal copy_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_ap_start : STD_LOGIC;
    signal display_shift_label1_proc5_U0_ap_done : STD_LOGIC;
    signal display_shift_label1_proc5_U0_ap_continue : STD_LOGIC;
    signal display_shift_label1_proc5_U0_ap_idle : STD_LOGIC;
    signal display_shift_label1_proc5_U0_ap_ready : STD_LOGIC;
    signal display_shift_label1_proc5_U0_m_axi_copy_AWVALID : STD_LOGIC;
    signal display_shift_label1_proc5_U0_m_axi_copy_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_WVALID : STD_LOGIC;
    signal display_shift_label1_proc5_U0_m_axi_copy_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_WLAST : STD_LOGIC;
    signal display_shift_label1_proc5_U0_m_axi_copy_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARVALID : STD_LOGIC;
    signal display_shift_label1_proc5_U0_m_axi_copy_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label1_proc5_U0_m_axi_copy_RREADY : STD_LOGIC;
    signal display_shift_label1_proc5_U0_m_axi_copy_BREADY : STD_LOGIC;
    signal display_shift_label1_proc5_U0_copy_V1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal display_shift_label1_proc5_U0_copy_V1_ce0 : STD_LOGIC;
    signal display_shift_label1_proc5_U0_copy_V1_we0 : STD_LOGIC;
    signal display_shift_label1_proc5_U0_copy_V1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_width_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_width_out_write : STD_LOGIC;
    signal display_shift_label1_proc5_U0_y_2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_y_2_out_write : STD_LOGIC;
    signal display_shift_label1_proc5_U0_frame_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_frame_size_out_write : STD_LOGIC;
    signal display_shift_label1_proc5_U0_xend_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_xend_out_write : STD_LOGIC;
    signal display_shift_label1_proc5_U0_yend_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label1_proc5_U0_yend_out_write : STD_LOGIC;
    signal display_shift_label1_proc5_U0_ddr_update_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal display_shift_label1_proc5_U0_ddr_update_out_write : STD_LOGIC;
    signal ap_channel_done_copy_V : STD_LOGIC;
    signal display_shift_label1_proc5_U0_copy_V1_full_n : STD_LOGIC;
    signal display_shift_label2_proc_U0_ap_start : STD_LOGIC;
    signal display_shift_label2_proc_U0_ap_done : STD_LOGIC;
    signal display_shift_label2_proc_U0_ap_continue : STD_LOGIC;
    signal display_shift_label2_proc_U0_ap_idle : STD_LOGIC;
    signal display_shift_label2_proc_U0_ap_ready : STD_LOGIC;
    signal display_shift_label2_proc_U0_width_read : STD_LOGIC;
    signal display_shift_label2_proc_U0_xend_read : STD_LOGIC;
    signal display_shift_label2_proc_U0_y_2_read : STD_LOGIC;
    signal display_shift_label2_proc_U0_yend_read : STD_LOGIC;
    signal display_shift_label2_proc_U0_frame_size_read : STD_LOGIC;
    signal display_shift_label2_proc_U0_copy_V1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal display_shift_label2_proc_U0_copy_V1_ce0 : STD_LOGIC;
    signal display_shift_label2_proc_U0_ddr_update_read : STD_LOGIC;
    signal display_shift_label2_proc_U0_m_axi_update_AWVALID : STD_LOGIC;
    signal display_shift_label2_proc_U0_m_axi_update_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_WVALID : STD_LOGIC;
    signal display_shift_label2_proc_U0_m_axi_update_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_WLAST : STD_LOGIC;
    signal display_shift_label2_proc_U0_m_axi_update_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARVALID : STD_LOGIC;
    signal display_shift_label2_proc_U0_m_axi_update_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal display_shift_label2_proc_U0_m_axi_update_RREADY : STD_LOGIC;
    signal display_shift_label2_proc_U0_m_axi_update_BREADY : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal copy_V_i_full_n : STD_LOGIC;
    signal copy_V_t_empty_n : STD_LOGIC;
    signal width_c_full_n : STD_LOGIC;
    signal width_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal width_c_empty_n : STD_LOGIC;
    signal y_2_c_full_n : STD_LOGIC;
    signal y_2_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_c_empty_n : STD_LOGIC;
    signal frame_size_c_full_n : STD_LOGIC;
    signal frame_size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_size_c_empty_n : STD_LOGIC;
    signal xend_c_full_n : STD_LOGIC;
    signal xend_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xend_c_empty_n : STD_LOGIC;
    signal yend_c_full_n : STD_LOGIC;
    signal yend_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal yend_c_empty_n : STD_LOGIC;
    signal ddr_update_c_full_n : STD_LOGIC;
    signal ddr_update_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ddr_update_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal display_shift_label1_proc5_U0_start_full_n : STD_LOGIC;
    signal display_shift_label1_proc5_U0_start_write : STD_LOGIC;
    signal display_shift_label2_proc_U0_start_full_n : STD_LOGIC;
    signal display_shift_label2_proc_U0_start_write : STD_LOGIC;

    component display_shift_display_shift_label1_proc5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        xstart : IN STD_LOGIC_VECTOR (31 downto 0);
        y_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ystart : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_size : IN STD_LOGIC_VECTOR (31 downto 0);
        ddr_copy : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_copy_AWVALID : OUT STD_LOGIC;
        m_axi_copy_AWREADY : IN STD_LOGIC;
        m_axi_copy_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_copy_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_copy_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_copy_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_copy_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_WVALID : OUT STD_LOGIC;
        m_axi_copy_WREADY : IN STD_LOGIC;
        m_axi_copy_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_copy_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_WLAST : OUT STD_LOGIC;
        m_axi_copy_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_ARVALID : OUT STD_LOGIC;
        m_axi_copy_ARREADY : IN STD_LOGIC;
        m_axi_copy_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_copy_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_copy_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_copy_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_copy_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_RVALID : IN STD_LOGIC;
        m_axi_copy_RREADY : OUT STD_LOGIC;
        m_axi_copy_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_copy_RLAST : IN STD_LOGIC;
        m_axi_copy_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_BVALID : IN STD_LOGIC;
        m_axi_copy_BREADY : OUT STD_LOGIC;
        m_axi_copy_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        copy_V1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        copy_V1_ce0 : OUT STD_LOGIC;
        copy_V1_we0 : OUT STD_LOGIC;
        copy_V1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        xend : IN STD_LOGIC_VECTOR (31 downto 0);
        yend : IN STD_LOGIC_VECTOR (31 downto 0);
        ddr_update : IN STD_LOGIC_VECTOR (63 downto 0);
        width_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC;
        y_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_2_out_full_n : IN STD_LOGIC;
        y_2_out_write : OUT STD_LOGIC;
        frame_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_size_out_full_n : IN STD_LOGIC;
        frame_size_out_write : OUT STD_LOGIC;
        xend_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        xend_out_full_n : IN STD_LOGIC;
        xend_out_write : OUT STD_LOGIC;
        yend_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        yend_out_full_n : IN STD_LOGIC;
        yend_out_write : OUT STD_LOGIC;
        ddr_update_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ddr_update_out_full_n : IN STD_LOGIC;
        ddr_update_out_write : OUT STD_LOGIC );
    end component;


    component display_shift_display_shift_label2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        xend_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        xend_empty_n : IN STD_LOGIC;
        xend_read : OUT STD_LOGIC;
        y_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_2_empty_n : IN STD_LOGIC;
        y_2_read : OUT STD_LOGIC;
        yend_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        yend_empty_n : IN STD_LOGIC;
        yend_read : OUT STD_LOGIC;
        frame_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_size_empty_n : IN STD_LOGIC;
        frame_size_read : OUT STD_LOGIC;
        copy_V1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        copy_V1_ce0 : OUT STD_LOGIC;
        copy_V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ddr_update_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ddr_update_empty_n : IN STD_LOGIC;
        ddr_update_read : OUT STD_LOGIC;
        m_axi_update_AWVALID : OUT STD_LOGIC;
        m_axi_update_AWREADY : IN STD_LOGIC;
        m_axi_update_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_update_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_update_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_update_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_update_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_WVALID : OUT STD_LOGIC;
        m_axi_update_WREADY : IN STD_LOGIC;
        m_axi_update_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_update_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_WLAST : OUT STD_LOGIC;
        m_axi_update_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_ARVALID : OUT STD_LOGIC;
        m_axi_update_ARREADY : IN STD_LOGIC;
        m_axi_update_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_update_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_update_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_update_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_update_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_RVALID : IN STD_LOGIC;
        m_axi_update_RREADY : OUT STD_LOGIC;
        m_axi_update_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_update_RLAST : IN STD_LOGIC;
        m_axi_update_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_BVALID : IN STD_LOGIC;
        m_axi_update_BREADY : OUT STD_LOGIC;
        m_axi_update_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component display_shift_dataflow_in_loop_display_shift_label0_copy_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component display_shift_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component display_shift_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    copy_V_U : component display_shift_dataflow_in_loop_display_shift_label0_copy_V
    generic map (
        DataWidth => 32,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => display_shift_label1_proc5_U0_copy_V1_address0,
        i_ce0 => display_shift_label1_proc5_U0_copy_V1_ce0,
        i_we0 => display_shift_label1_proc5_U0_copy_V1_we0,
        i_d0 => display_shift_label1_proc5_U0_copy_V1_d0,
        i_q0 => copy_V_i_q0,
        t_address0 => display_shift_label2_proc_U0_copy_V1_address0,
        t_ce0 => display_shift_label2_proc_U0_copy_V1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => copy_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => copy_V_i_full_n,
        i_write => display_shift_label1_proc5_U0_ap_done,
        t_empty_n => copy_V_t_empty_n,
        t_read => display_shift_label2_proc_U0_ap_ready);

    display_shift_label1_proc5_U0 : component display_shift_display_shift_label1_proc5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => display_shift_label1_proc5_U0_ap_start,
        ap_done => display_shift_label1_proc5_U0_ap_done,
        ap_continue => display_shift_label1_proc5_U0_ap_continue,
        ap_idle => display_shift_label1_proc5_U0_ap_idle,
        ap_ready => display_shift_label1_proc5_U0_ap_ready,
        width => width,
        xstart => xstart,
        y_2 => y_2,
        ystart => ystart,
        frame_size => frame_size,
        ddr_copy => ddr_copy,
        m_axi_copy_AWVALID => display_shift_label1_proc5_U0_m_axi_copy_AWVALID,
        m_axi_copy_AWREADY => ap_const_logic_0,
        m_axi_copy_AWADDR => display_shift_label1_proc5_U0_m_axi_copy_AWADDR,
        m_axi_copy_AWID => display_shift_label1_proc5_U0_m_axi_copy_AWID,
        m_axi_copy_AWLEN => display_shift_label1_proc5_U0_m_axi_copy_AWLEN,
        m_axi_copy_AWSIZE => display_shift_label1_proc5_U0_m_axi_copy_AWSIZE,
        m_axi_copy_AWBURST => display_shift_label1_proc5_U0_m_axi_copy_AWBURST,
        m_axi_copy_AWLOCK => display_shift_label1_proc5_U0_m_axi_copy_AWLOCK,
        m_axi_copy_AWCACHE => display_shift_label1_proc5_U0_m_axi_copy_AWCACHE,
        m_axi_copy_AWPROT => display_shift_label1_proc5_U0_m_axi_copy_AWPROT,
        m_axi_copy_AWQOS => display_shift_label1_proc5_U0_m_axi_copy_AWQOS,
        m_axi_copy_AWREGION => display_shift_label1_proc5_U0_m_axi_copy_AWREGION,
        m_axi_copy_AWUSER => display_shift_label1_proc5_U0_m_axi_copy_AWUSER,
        m_axi_copy_WVALID => display_shift_label1_proc5_U0_m_axi_copy_WVALID,
        m_axi_copy_WREADY => ap_const_logic_0,
        m_axi_copy_WDATA => display_shift_label1_proc5_U0_m_axi_copy_WDATA,
        m_axi_copy_WSTRB => display_shift_label1_proc5_U0_m_axi_copy_WSTRB,
        m_axi_copy_WLAST => display_shift_label1_proc5_U0_m_axi_copy_WLAST,
        m_axi_copy_WID => display_shift_label1_proc5_U0_m_axi_copy_WID,
        m_axi_copy_WUSER => display_shift_label1_proc5_U0_m_axi_copy_WUSER,
        m_axi_copy_ARVALID => display_shift_label1_proc5_U0_m_axi_copy_ARVALID,
        m_axi_copy_ARREADY => m_axi_copy_ARREADY,
        m_axi_copy_ARADDR => display_shift_label1_proc5_U0_m_axi_copy_ARADDR,
        m_axi_copy_ARID => display_shift_label1_proc5_U0_m_axi_copy_ARID,
        m_axi_copy_ARLEN => display_shift_label1_proc5_U0_m_axi_copy_ARLEN,
        m_axi_copy_ARSIZE => display_shift_label1_proc5_U0_m_axi_copy_ARSIZE,
        m_axi_copy_ARBURST => display_shift_label1_proc5_U0_m_axi_copy_ARBURST,
        m_axi_copy_ARLOCK => display_shift_label1_proc5_U0_m_axi_copy_ARLOCK,
        m_axi_copy_ARCACHE => display_shift_label1_proc5_U0_m_axi_copy_ARCACHE,
        m_axi_copy_ARPROT => display_shift_label1_proc5_U0_m_axi_copy_ARPROT,
        m_axi_copy_ARQOS => display_shift_label1_proc5_U0_m_axi_copy_ARQOS,
        m_axi_copy_ARREGION => display_shift_label1_proc5_U0_m_axi_copy_ARREGION,
        m_axi_copy_ARUSER => display_shift_label1_proc5_U0_m_axi_copy_ARUSER,
        m_axi_copy_RVALID => m_axi_copy_RVALID,
        m_axi_copy_RREADY => display_shift_label1_proc5_U0_m_axi_copy_RREADY,
        m_axi_copy_RDATA => m_axi_copy_RDATA,
        m_axi_copy_RLAST => m_axi_copy_RLAST,
        m_axi_copy_RID => m_axi_copy_RID,
        m_axi_copy_RUSER => m_axi_copy_RUSER,
        m_axi_copy_RRESP => m_axi_copy_RRESP,
        m_axi_copy_BVALID => ap_const_logic_0,
        m_axi_copy_BREADY => display_shift_label1_proc5_U0_m_axi_copy_BREADY,
        m_axi_copy_BRESP => ap_const_lv2_0,
        m_axi_copy_BID => ap_const_lv1_0,
        m_axi_copy_BUSER => ap_const_lv1_0,
        copy_V1_address0 => display_shift_label1_proc5_U0_copy_V1_address0,
        copy_V1_ce0 => display_shift_label1_proc5_U0_copy_V1_ce0,
        copy_V1_we0 => display_shift_label1_proc5_U0_copy_V1_we0,
        copy_V1_d0 => display_shift_label1_proc5_U0_copy_V1_d0,
        xend => xend,
        yend => yend,
        ddr_update => ddr_update,
        width_out_din => display_shift_label1_proc5_U0_width_out_din,
        width_out_full_n => width_c_full_n,
        width_out_write => display_shift_label1_proc5_U0_width_out_write,
        y_2_out_din => display_shift_label1_proc5_U0_y_2_out_din,
        y_2_out_full_n => y_2_c_full_n,
        y_2_out_write => display_shift_label1_proc5_U0_y_2_out_write,
        frame_size_out_din => display_shift_label1_proc5_U0_frame_size_out_din,
        frame_size_out_full_n => frame_size_c_full_n,
        frame_size_out_write => display_shift_label1_proc5_U0_frame_size_out_write,
        xend_out_din => display_shift_label1_proc5_U0_xend_out_din,
        xend_out_full_n => xend_c_full_n,
        xend_out_write => display_shift_label1_proc5_U0_xend_out_write,
        yend_out_din => display_shift_label1_proc5_U0_yend_out_din,
        yend_out_full_n => yend_c_full_n,
        yend_out_write => display_shift_label1_proc5_U0_yend_out_write,
        ddr_update_out_din => display_shift_label1_proc5_U0_ddr_update_out_din,
        ddr_update_out_full_n => ddr_update_c_full_n,
        ddr_update_out_write => display_shift_label1_proc5_U0_ddr_update_out_write);

    display_shift_label2_proc_U0 : component display_shift_display_shift_label2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => display_shift_label2_proc_U0_ap_start,
        ap_done => display_shift_label2_proc_U0_ap_done,
        ap_continue => display_shift_label2_proc_U0_ap_continue,
        ap_idle => display_shift_label2_proc_U0_ap_idle,
        ap_ready => display_shift_label2_proc_U0_ap_ready,
        width_dout => width_c_dout,
        width_empty_n => width_c_empty_n,
        width_read => display_shift_label2_proc_U0_width_read,
        xend_dout => xend_c_dout,
        xend_empty_n => xend_c_empty_n,
        xend_read => display_shift_label2_proc_U0_xend_read,
        y_2_dout => y_2_c_dout,
        y_2_empty_n => y_2_c_empty_n,
        y_2_read => display_shift_label2_proc_U0_y_2_read,
        yend_dout => yend_c_dout,
        yend_empty_n => yend_c_empty_n,
        yend_read => display_shift_label2_proc_U0_yend_read,
        frame_size_dout => frame_size_c_dout,
        frame_size_empty_n => frame_size_c_empty_n,
        frame_size_read => display_shift_label2_proc_U0_frame_size_read,
        copy_V1_address0 => display_shift_label2_proc_U0_copy_V1_address0,
        copy_V1_ce0 => display_shift_label2_proc_U0_copy_V1_ce0,
        copy_V1_q0 => copy_V_t_q0,
        ddr_update_dout => ddr_update_c_dout,
        ddr_update_empty_n => ddr_update_c_empty_n,
        ddr_update_read => display_shift_label2_proc_U0_ddr_update_read,
        m_axi_update_AWVALID => display_shift_label2_proc_U0_m_axi_update_AWVALID,
        m_axi_update_AWREADY => m_axi_update_AWREADY,
        m_axi_update_AWADDR => display_shift_label2_proc_U0_m_axi_update_AWADDR,
        m_axi_update_AWID => display_shift_label2_proc_U0_m_axi_update_AWID,
        m_axi_update_AWLEN => display_shift_label2_proc_U0_m_axi_update_AWLEN,
        m_axi_update_AWSIZE => display_shift_label2_proc_U0_m_axi_update_AWSIZE,
        m_axi_update_AWBURST => display_shift_label2_proc_U0_m_axi_update_AWBURST,
        m_axi_update_AWLOCK => display_shift_label2_proc_U0_m_axi_update_AWLOCK,
        m_axi_update_AWCACHE => display_shift_label2_proc_U0_m_axi_update_AWCACHE,
        m_axi_update_AWPROT => display_shift_label2_proc_U0_m_axi_update_AWPROT,
        m_axi_update_AWQOS => display_shift_label2_proc_U0_m_axi_update_AWQOS,
        m_axi_update_AWREGION => display_shift_label2_proc_U0_m_axi_update_AWREGION,
        m_axi_update_AWUSER => display_shift_label2_proc_U0_m_axi_update_AWUSER,
        m_axi_update_WVALID => display_shift_label2_proc_U0_m_axi_update_WVALID,
        m_axi_update_WREADY => m_axi_update_WREADY,
        m_axi_update_WDATA => display_shift_label2_proc_U0_m_axi_update_WDATA,
        m_axi_update_WSTRB => display_shift_label2_proc_U0_m_axi_update_WSTRB,
        m_axi_update_WLAST => display_shift_label2_proc_U0_m_axi_update_WLAST,
        m_axi_update_WID => display_shift_label2_proc_U0_m_axi_update_WID,
        m_axi_update_WUSER => display_shift_label2_proc_U0_m_axi_update_WUSER,
        m_axi_update_ARVALID => display_shift_label2_proc_U0_m_axi_update_ARVALID,
        m_axi_update_ARREADY => ap_const_logic_0,
        m_axi_update_ARADDR => display_shift_label2_proc_U0_m_axi_update_ARADDR,
        m_axi_update_ARID => display_shift_label2_proc_U0_m_axi_update_ARID,
        m_axi_update_ARLEN => display_shift_label2_proc_U0_m_axi_update_ARLEN,
        m_axi_update_ARSIZE => display_shift_label2_proc_U0_m_axi_update_ARSIZE,
        m_axi_update_ARBURST => display_shift_label2_proc_U0_m_axi_update_ARBURST,
        m_axi_update_ARLOCK => display_shift_label2_proc_U0_m_axi_update_ARLOCK,
        m_axi_update_ARCACHE => display_shift_label2_proc_U0_m_axi_update_ARCACHE,
        m_axi_update_ARPROT => display_shift_label2_proc_U0_m_axi_update_ARPROT,
        m_axi_update_ARQOS => display_shift_label2_proc_U0_m_axi_update_ARQOS,
        m_axi_update_ARREGION => display_shift_label2_proc_U0_m_axi_update_ARREGION,
        m_axi_update_ARUSER => display_shift_label2_proc_U0_m_axi_update_ARUSER,
        m_axi_update_RVALID => ap_const_logic_0,
        m_axi_update_RREADY => display_shift_label2_proc_U0_m_axi_update_RREADY,
        m_axi_update_RDATA => ap_const_lv32_0,
        m_axi_update_RLAST => ap_const_logic_0,
        m_axi_update_RID => ap_const_lv1_0,
        m_axi_update_RUSER => ap_const_lv1_0,
        m_axi_update_RRESP => ap_const_lv2_0,
        m_axi_update_BVALID => m_axi_update_BVALID,
        m_axi_update_BREADY => display_shift_label2_proc_U0_m_axi_update_BREADY,
        m_axi_update_BRESP => m_axi_update_BRESP,
        m_axi_update_BID => m_axi_update_BID,
        m_axi_update_BUSER => m_axi_update_BUSER);

    width_c_U : component display_shift_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => display_shift_label1_proc5_U0_width_out_din,
        if_full_n => width_c_full_n,
        if_write => display_shift_label1_proc5_U0_width_out_write,
        if_dout => width_c_dout,
        if_empty_n => width_c_empty_n,
        if_read => display_shift_label2_proc_U0_width_read);

    y_2_c_U : component display_shift_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => display_shift_label1_proc5_U0_y_2_out_din,
        if_full_n => y_2_c_full_n,
        if_write => display_shift_label1_proc5_U0_y_2_out_write,
        if_dout => y_2_c_dout,
        if_empty_n => y_2_c_empty_n,
        if_read => display_shift_label2_proc_U0_y_2_read);

    frame_size_c_U : component display_shift_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => display_shift_label1_proc5_U0_frame_size_out_din,
        if_full_n => frame_size_c_full_n,
        if_write => display_shift_label1_proc5_U0_frame_size_out_write,
        if_dout => frame_size_c_dout,
        if_empty_n => frame_size_c_empty_n,
        if_read => display_shift_label2_proc_U0_frame_size_read);

    xend_c_U : component display_shift_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => display_shift_label1_proc5_U0_xend_out_din,
        if_full_n => xend_c_full_n,
        if_write => display_shift_label1_proc5_U0_xend_out_write,
        if_dout => xend_c_dout,
        if_empty_n => xend_c_empty_n,
        if_read => display_shift_label2_proc_U0_xend_read);

    yend_c_U : component display_shift_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => display_shift_label1_proc5_U0_yend_out_din,
        if_full_n => yend_c_full_n,
        if_write => display_shift_label1_proc5_U0_yend_out_write,
        if_dout => yend_c_dout,
        if_empty_n => yend_c_empty_n,
        if_read => display_shift_label2_proc_U0_yend_read);

    ddr_update_c_U : component display_shift_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => display_shift_label1_proc5_U0_ddr_update_out_din,
        if_full_n => ddr_update_c_full_n,
        if_write => display_shift_label1_proc5_U0_ddr_update_out_write,
        if_dout => ddr_update_c_dout,
        if_empty_n => ddr_update_c_empty_n,
        if_read => display_shift_label2_proc_U0_ddr_update_read);




    ap_channel_done_copy_V <= display_shift_label1_proc5_U0_ap_done;
    ap_done <= display_shift_label2_proc_U0_ap_done;
    ap_idle <= ((copy_V_t_empty_n xor ap_const_logic_1) and display_shift_label2_proc_U0_ap_idle and display_shift_label1_proc5_U0_ap_idle);
    ap_ready <= display_shift_label1_proc5_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= display_shift_label2_proc_U0_ap_done;
    ap_sync_ready <= display_shift_label1_proc5_U0_ap_ready;
    display_shift_label1_proc5_U0_ap_continue <= copy_V_i_full_n;
    display_shift_label1_proc5_U0_ap_start <= ap_start;
    display_shift_label1_proc5_U0_copy_V1_full_n <= copy_V_i_full_n;
    display_shift_label1_proc5_U0_start_full_n <= ap_const_logic_1;
    display_shift_label1_proc5_U0_start_write <= ap_const_logic_0;
    display_shift_label2_proc_U0_ap_continue <= ap_continue;
    display_shift_label2_proc_U0_ap_start <= copy_V_t_empty_n;
    display_shift_label2_proc_U0_start_full_n <= ap_const_logic_1;
    display_shift_label2_proc_U0_start_write <= ap_const_logic_0;
    m_axi_copy_ARADDR <= display_shift_label1_proc5_U0_m_axi_copy_ARADDR;
    m_axi_copy_ARBURST <= display_shift_label1_proc5_U0_m_axi_copy_ARBURST;
    m_axi_copy_ARCACHE <= display_shift_label1_proc5_U0_m_axi_copy_ARCACHE;
    m_axi_copy_ARID <= display_shift_label1_proc5_U0_m_axi_copy_ARID;
    m_axi_copy_ARLEN <= display_shift_label1_proc5_U0_m_axi_copy_ARLEN;
    m_axi_copy_ARLOCK <= display_shift_label1_proc5_U0_m_axi_copy_ARLOCK;
    m_axi_copy_ARPROT <= display_shift_label1_proc5_U0_m_axi_copy_ARPROT;
    m_axi_copy_ARQOS <= display_shift_label1_proc5_U0_m_axi_copy_ARQOS;
    m_axi_copy_ARREGION <= display_shift_label1_proc5_U0_m_axi_copy_ARREGION;
    m_axi_copy_ARSIZE <= display_shift_label1_proc5_U0_m_axi_copy_ARSIZE;
    m_axi_copy_ARUSER <= display_shift_label1_proc5_U0_m_axi_copy_ARUSER;
    m_axi_copy_ARVALID <= display_shift_label1_proc5_U0_m_axi_copy_ARVALID;
    m_axi_copy_AWADDR <= ap_const_lv64_0;
    m_axi_copy_AWBURST <= ap_const_lv2_0;
    m_axi_copy_AWCACHE <= ap_const_lv4_0;
    m_axi_copy_AWID <= ap_const_lv1_0;
    m_axi_copy_AWLEN <= ap_const_lv32_0;
    m_axi_copy_AWLOCK <= ap_const_lv2_0;
    m_axi_copy_AWPROT <= ap_const_lv3_0;
    m_axi_copy_AWQOS <= ap_const_lv4_0;
    m_axi_copy_AWREGION <= ap_const_lv4_0;
    m_axi_copy_AWSIZE <= ap_const_lv3_0;
    m_axi_copy_AWUSER <= ap_const_lv1_0;
    m_axi_copy_AWVALID <= ap_const_logic_0;
    m_axi_copy_BREADY <= ap_const_logic_0;
    m_axi_copy_RREADY <= display_shift_label1_proc5_U0_m_axi_copy_RREADY;
    m_axi_copy_WDATA <= ap_const_lv32_0;
    m_axi_copy_WID <= ap_const_lv1_0;
    m_axi_copy_WLAST <= ap_const_logic_0;
    m_axi_copy_WSTRB <= ap_const_lv4_0;
    m_axi_copy_WUSER <= ap_const_lv1_0;
    m_axi_copy_WVALID <= ap_const_logic_0;
    m_axi_update_ARADDR <= ap_const_lv64_0;
    m_axi_update_ARBURST <= ap_const_lv2_0;
    m_axi_update_ARCACHE <= ap_const_lv4_0;
    m_axi_update_ARID <= ap_const_lv1_0;
    m_axi_update_ARLEN <= ap_const_lv32_0;
    m_axi_update_ARLOCK <= ap_const_lv2_0;
    m_axi_update_ARPROT <= ap_const_lv3_0;
    m_axi_update_ARQOS <= ap_const_lv4_0;
    m_axi_update_ARREGION <= ap_const_lv4_0;
    m_axi_update_ARSIZE <= ap_const_lv3_0;
    m_axi_update_ARUSER <= ap_const_lv1_0;
    m_axi_update_ARVALID <= ap_const_logic_0;
    m_axi_update_AWADDR <= display_shift_label2_proc_U0_m_axi_update_AWADDR;
    m_axi_update_AWBURST <= display_shift_label2_proc_U0_m_axi_update_AWBURST;
    m_axi_update_AWCACHE <= display_shift_label2_proc_U0_m_axi_update_AWCACHE;
    m_axi_update_AWID <= display_shift_label2_proc_U0_m_axi_update_AWID;
    m_axi_update_AWLEN <= display_shift_label2_proc_U0_m_axi_update_AWLEN;
    m_axi_update_AWLOCK <= display_shift_label2_proc_U0_m_axi_update_AWLOCK;
    m_axi_update_AWPROT <= display_shift_label2_proc_U0_m_axi_update_AWPROT;
    m_axi_update_AWQOS <= display_shift_label2_proc_U0_m_axi_update_AWQOS;
    m_axi_update_AWREGION <= display_shift_label2_proc_U0_m_axi_update_AWREGION;
    m_axi_update_AWSIZE <= display_shift_label2_proc_U0_m_axi_update_AWSIZE;
    m_axi_update_AWUSER <= display_shift_label2_proc_U0_m_axi_update_AWUSER;
    m_axi_update_AWVALID <= display_shift_label2_proc_U0_m_axi_update_AWVALID;
    m_axi_update_BREADY <= display_shift_label2_proc_U0_m_axi_update_BREADY;
    m_axi_update_RREADY <= ap_const_logic_0;
    m_axi_update_WDATA <= display_shift_label2_proc_U0_m_axi_update_WDATA;
    m_axi_update_WID <= display_shift_label2_proc_U0_m_axi_update_WID;
    m_axi_update_WLAST <= display_shift_label2_proc_U0_m_axi_update_WLAST;
    m_axi_update_WSTRB <= display_shift_label2_proc_U0_m_axi_update_WSTRB;
    m_axi_update_WUSER <= display_shift_label2_proc_U0_m_axi_update_WUSER;
    m_axi_update_WVALID <= display_shift_label2_proc_U0_m_axi_update_WVALID;
end behav;
