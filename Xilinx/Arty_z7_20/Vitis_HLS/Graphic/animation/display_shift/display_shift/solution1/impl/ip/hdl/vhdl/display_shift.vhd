-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity display_shift is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_COPY_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_COPY_ID_WIDTH : INTEGER := 1;
    C_M_AXI_COPY_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COPY_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_COPY_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COPY_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COPY_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COPY_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UPDATE_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_UPDATE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_UPDATE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UPDATE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_UPDATE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UPDATE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UPDATE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UPDATE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_COPY_USER_VALUE : INTEGER := 0;
    C_M_AXI_COPY_PROT_VALUE : INTEGER := 0;
    C_M_AXI_COPY_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_UPDATE_USER_VALUE : INTEGER := 0;
    C_M_AXI_UPDATE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_UPDATE_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_copy_AWVALID : OUT STD_LOGIC;
    m_axi_copy_AWREADY : IN STD_LOGIC;
    m_axi_copy_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_ADDR_WIDTH-1 downto 0);
    m_axi_copy_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_ID_WIDTH-1 downto 0);
    m_axi_copy_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_copy_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_AWUSER_WIDTH-1 downto 0);
    m_axi_copy_WVALID : OUT STD_LOGIC;
    m_axi_copy_WREADY : IN STD_LOGIC;
    m_axi_copy_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_DATA_WIDTH-1 downto 0);
    m_axi_copy_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_DATA_WIDTH/8-1 downto 0);
    m_axi_copy_WLAST : OUT STD_LOGIC;
    m_axi_copy_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_ID_WIDTH-1 downto 0);
    m_axi_copy_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_WUSER_WIDTH-1 downto 0);
    m_axi_copy_ARVALID : OUT STD_LOGIC;
    m_axi_copy_ARREADY : IN STD_LOGIC;
    m_axi_copy_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_ADDR_WIDTH-1 downto 0);
    m_axi_copy_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_ID_WIDTH-1 downto 0);
    m_axi_copy_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_copy_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_COPY_ARUSER_WIDTH-1 downto 0);
    m_axi_copy_RVALID : IN STD_LOGIC;
    m_axi_copy_RREADY : OUT STD_LOGIC;
    m_axi_copy_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_COPY_DATA_WIDTH-1 downto 0);
    m_axi_copy_RLAST : IN STD_LOGIC;
    m_axi_copy_RID : IN STD_LOGIC_VECTOR (C_M_AXI_COPY_ID_WIDTH-1 downto 0);
    m_axi_copy_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_COPY_RUSER_WIDTH-1 downto 0);
    m_axi_copy_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_BVALID : IN STD_LOGIC;
    m_axi_copy_BREADY : OUT STD_LOGIC;
    m_axi_copy_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_BID : IN STD_LOGIC_VECTOR (C_M_AXI_COPY_ID_WIDTH-1 downto 0);
    m_axi_copy_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_COPY_BUSER_WIDTH-1 downto 0);
    m_axi_update_AWVALID : OUT STD_LOGIC;
    m_axi_update_AWREADY : IN STD_LOGIC;
    m_axi_update_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_ADDR_WIDTH-1 downto 0);
    m_axi_update_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_ID_WIDTH-1 downto 0);
    m_axi_update_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_update_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_AWUSER_WIDTH-1 downto 0);
    m_axi_update_WVALID : OUT STD_LOGIC;
    m_axi_update_WREADY : IN STD_LOGIC;
    m_axi_update_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_DATA_WIDTH-1 downto 0);
    m_axi_update_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_DATA_WIDTH/8-1 downto 0);
    m_axi_update_WLAST : OUT STD_LOGIC;
    m_axi_update_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_ID_WIDTH-1 downto 0);
    m_axi_update_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_WUSER_WIDTH-1 downto 0);
    m_axi_update_ARVALID : OUT STD_LOGIC;
    m_axi_update_ARREADY : IN STD_LOGIC;
    m_axi_update_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_ADDR_WIDTH-1 downto 0);
    m_axi_update_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_ID_WIDTH-1 downto 0);
    m_axi_update_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_update_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UPDATE_ARUSER_WIDTH-1 downto 0);
    m_axi_update_RVALID : IN STD_LOGIC;
    m_axi_update_RREADY : OUT STD_LOGIC;
    m_axi_update_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_UPDATE_DATA_WIDTH-1 downto 0);
    m_axi_update_RLAST : IN STD_LOGIC;
    m_axi_update_RID : IN STD_LOGIC_VECTOR (C_M_AXI_UPDATE_ID_WIDTH-1 downto 0);
    m_axi_update_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_UPDATE_RUSER_WIDTH-1 downto 0);
    m_axi_update_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_BVALID : IN STD_LOGIC;
    m_axi_update_BREADY : OUT STD_LOGIC;
    m_axi_update_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_BID : IN STD_LOGIC_VECTOR (C_M_AXI_UPDATE_ID_WIDTH-1 downto 0);
    m_axi_update_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_UPDATE_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of display_shift is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "display_shift_display_shift,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.242500,HLS_SYN_LAT=314574,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3622,HLS_SYN_LUT=3408,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ddr_copy : STD_LOGIC_VECTOR (63 downto 0);
    signal ddr_update : STD_LOGIC_VECTOR (63 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal xstart : STD_LOGIC_VECTOR (31 downto 0);
    signal xend : STD_LOGIC_VECTOR (31 downto 0);
    signal ystart : STD_LOGIC_VECTOR (31 downto 0);
    signal yend : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_size : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal copy_AWREADY : STD_LOGIC;
    signal copy_WREADY : STD_LOGIC;
    signal copy_ARREADY : STD_LOGIC;
    signal copy_RVALID : STD_LOGIC;
    signal copy_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_RLAST : STD_LOGIC;
    signal copy_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_BVALID : STD_LOGIC;
    signal copy_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal update_AWREADY : STD_LOGIC;
    signal update_WREADY : STD_LOGIC;
    signal update_ARREADY : STD_LOGIC;
    signal update_RVALID : STD_LOGIC;
    signal update_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal update_RLAST : STD_LOGIC;
    signal update_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal update_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal update_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal update_BVALID : STD_LOGIC;
    signal update_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal update_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal update_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WVALID : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WLAST : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_RREADY : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_copy_BREADY : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_WVALID : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_WLAST : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_RREADY : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_m_axi_update_BREADY : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_display_shift_label0_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_display_shift_label0_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component display_shift_dataflow_in_loop_display_shift_label0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        xstart : IN STD_LOGIC_VECTOR (31 downto 0);
        y_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ystart : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_size : IN STD_LOGIC_VECTOR (31 downto 0);
        ddr_copy : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_copy_AWVALID : OUT STD_LOGIC;
        m_axi_copy_AWREADY : IN STD_LOGIC;
        m_axi_copy_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_copy_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_copy_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_copy_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_copy_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_WVALID : OUT STD_LOGIC;
        m_axi_copy_WREADY : IN STD_LOGIC;
        m_axi_copy_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_copy_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_WLAST : OUT STD_LOGIC;
        m_axi_copy_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_ARVALID : OUT STD_LOGIC;
        m_axi_copy_ARREADY : IN STD_LOGIC;
        m_axi_copy_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_copy_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_copy_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_copy_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_copy_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_copy_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_RVALID : IN STD_LOGIC;
        m_axi_copy_RREADY : OUT STD_LOGIC;
        m_axi_copy_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_copy_RLAST : IN STD_LOGIC;
        m_axi_copy_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_BVALID : IN STD_LOGIC;
        m_axi_copy_BREADY : OUT STD_LOGIC;
        m_axi_copy_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_copy_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_copy_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        xend : IN STD_LOGIC_VECTOR (31 downto 0);
        yend : IN STD_LOGIC_VECTOR (31 downto 0);
        ddr_update : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_update_AWVALID : OUT STD_LOGIC;
        m_axi_update_AWREADY : IN STD_LOGIC;
        m_axi_update_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_update_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_update_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_update_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_update_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_WVALID : OUT STD_LOGIC;
        m_axi_update_WREADY : IN STD_LOGIC;
        m_axi_update_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_update_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_WLAST : OUT STD_LOGIC;
        m_axi_update_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_ARVALID : OUT STD_LOGIC;
        m_axi_update_ARREADY : IN STD_LOGIC;
        m_axi_update_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_update_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_update_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_update_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_update_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_update_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_RVALID : IN STD_LOGIC;
        m_axi_update_RREADY : OUT STD_LOGIC;
        m_axi_update_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_update_RLAST : IN STD_LOGIC;
        m_axi_update_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_BVALID : IN STD_LOGIC;
        m_axi_update_BREADY : OUT STD_LOGIC;
        m_axi_update_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_update_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_update_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        width_ap_vld : IN STD_LOGIC;
        xstart_ap_vld : IN STD_LOGIC;
        y_2_ap_vld : IN STD_LOGIC;
        ystart_ap_vld : IN STD_LOGIC;
        frame_size_ap_vld : IN STD_LOGIC;
        ddr_copy_ap_vld : IN STD_LOGIC;
        xend_ap_vld : IN STD_LOGIC;
        yend_ap_vld : IN STD_LOGIC;
        ddr_update_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component display_shift_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ddr_copy : OUT STD_LOGIC_VECTOR (63 downto 0);
        ddr_update : OUT STD_LOGIC_VECTOR (63 downto 0);
        width : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        xstart : OUT STD_LOGIC_VECTOR (31 downto 0);
        xend : OUT STD_LOGIC_VECTOR (31 downto 0);
        ystart : OUT STD_LOGIC_VECTOR (31 downto 0);
        yend : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component display_shift_copy_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component display_shift_update_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component display_shift_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ddr_copy => ddr_copy,
        ddr_update => ddr_update,
        width => width,
        height => height,
        xstart => xstart,
        xend => xend,
        ystart => ystart,
        yend => yend,
        frame_size => frame_size,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    copy_m_axi_U : component display_shift_copy_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_COPY_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_COPY_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_COPY_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_COPY_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_COPY_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_COPY_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_COPY_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_COPY_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_COPY_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_COPY_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_COPY_CACHE_VALUE)
    port map (
        AWVALID => m_axi_copy_AWVALID,
        AWREADY => m_axi_copy_AWREADY,
        AWADDR => m_axi_copy_AWADDR,
        AWID => m_axi_copy_AWID,
        AWLEN => m_axi_copy_AWLEN,
        AWSIZE => m_axi_copy_AWSIZE,
        AWBURST => m_axi_copy_AWBURST,
        AWLOCK => m_axi_copy_AWLOCK,
        AWCACHE => m_axi_copy_AWCACHE,
        AWPROT => m_axi_copy_AWPROT,
        AWQOS => m_axi_copy_AWQOS,
        AWREGION => m_axi_copy_AWREGION,
        AWUSER => m_axi_copy_AWUSER,
        WVALID => m_axi_copy_WVALID,
        WREADY => m_axi_copy_WREADY,
        WDATA => m_axi_copy_WDATA,
        WSTRB => m_axi_copy_WSTRB,
        WLAST => m_axi_copy_WLAST,
        WID => m_axi_copy_WID,
        WUSER => m_axi_copy_WUSER,
        ARVALID => m_axi_copy_ARVALID,
        ARREADY => m_axi_copy_ARREADY,
        ARADDR => m_axi_copy_ARADDR,
        ARID => m_axi_copy_ARID,
        ARLEN => m_axi_copy_ARLEN,
        ARSIZE => m_axi_copy_ARSIZE,
        ARBURST => m_axi_copy_ARBURST,
        ARLOCK => m_axi_copy_ARLOCK,
        ARCACHE => m_axi_copy_ARCACHE,
        ARPROT => m_axi_copy_ARPROT,
        ARQOS => m_axi_copy_ARQOS,
        ARREGION => m_axi_copy_ARREGION,
        ARUSER => m_axi_copy_ARUSER,
        RVALID => m_axi_copy_RVALID,
        RREADY => m_axi_copy_RREADY,
        RDATA => m_axi_copy_RDATA,
        RLAST => m_axi_copy_RLAST,
        RID => m_axi_copy_RID,
        RUSER => m_axi_copy_RUSER,
        RRESP => m_axi_copy_RRESP,
        BVALID => m_axi_copy_BVALID,
        BREADY => m_axi_copy_BREADY,
        BRESP => m_axi_copy_BRESP,
        BID => m_axi_copy_BID,
        BUSER => m_axi_copy_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARVALID,
        I_ARREADY => copy_ARREADY,
        I_ARADDR => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARADDR,
        I_ARID => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARID,
        I_ARLEN => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARLEN,
        I_ARSIZE => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARSIZE,
        I_ARLOCK => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARLOCK,
        I_ARCACHE => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARCACHE,
        I_ARQOS => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARQOS,
        I_ARPROT => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARPROT,
        I_ARUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARUSER,
        I_ARBURST => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARBURST,
        I_ARREGION => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARREGION,
        I_RVALID => copy_RVALID,
        I_RREADY => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_RREADY,
        I_RDATA => copy_RDATA,
        I_RID => copy_RID,
        I_RUSER => copy_RUSER,
        I_RRESP => copy_RRESP,
        I_RLAST => copy_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => copy_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => copy_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => copy_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => copy_BRESP,
        I_BID => copy_BID,
        I_BUSER => copy_BUSER);

    update_m_axi_U : component display_shift_update_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_UPDATE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_UPDATE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_UPDATE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_UPDATE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_UPDATE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_UPDATE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_UPDATE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_UPDATE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_UPDATE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_UPDATE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_UPDATE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_update_AWVALID,
        AWREADY => m_axi_update_AWREADY,
        AWADDR => m_axi_update_AWADDR,
        AWID => m_axi_update_AWID,
        AWLEN => m_axi_update_AWLEN,
        AWSIZE => m_axi_update_AWSIZE,
        AWBURST => m_axi_update_AWBURST,
        AWLOCK => m_axi_update_AWLOCK,
        AWCACHE => m_axi_update_AWCACHE,
        AWPROT => m_axi_update_AWPROT,
        AWQOS => m_axi_update_AWQOS,
        AWREGION => m_axi_update_AWREGION,
        AWUSER => m_axi_update_AWUSER,
        WVALID => m_axi_update_WVALID,
        WREADY => m_axi_update_WREADY,
        WDATA => m_axi_update_WDATA,
        WSTRB => m_axi_update_WSTRB,
        WLAST => m_axi_update_WLAST,
        WID => m_axi_update_WID,
        WUSER => m_axi_update_WUSER,
        ARVALID => m_axi_update_ARVALID,
        ARREADY => m_axi_update_ARREADY,
        ARADDR => m_axi_update_ARADDR,
        ARID => m_axi_update_ARID,
        ARLEN => m_axi_update_ARLEN,
        ARSIZE => m_axi_update_ARSIZE,
        ARBURST => m_axi_update_ARBURST,
        ARLOCK => m_axi_update_ARLOCK,
        ARCACHE => m_axi_update_ARCACHE,
        ARPROT => m_axi_update_ARPROT,
        ARQOS => m_axi_update_ARQOS,
        ARREGION => m_axi_update_ARREGION,
        ARUSER => m_axi_update_ARUSER,
        RVALID => m_axi_update_RVALID,
        RREADY => m_axi_update_RREADY,
        RDATA => m_axi_update_RDATA,
        RLAST => m_axi_update_RLAST,
        RID => m_axi_update_RID,
        RUSER => m_axi_update_RUSER,
        RRESP => m_axi_update_RRESP,
        BVALID => m_axi_update_BVALID,
        BREADY => m_axi_update_BREADY,
        BRESP => m_axi_update_BRESP,
        BID => m_axi_update_BID,
        BUSER => m_axi_update_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => update_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => update_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => update_RDATA,
        I_RID => update_RID,
        I_RUSER => update_RUSER,
        I_RRESP => update_RRESP,
        I_RLAST => update_RLAST,
        I_AWVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWVALID,
        I_AWREADY => update_AWREADY,
        I_AWADDR => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWADDR,
        I_AWID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWID,
        I_AWLEN => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWLEN,
        I_AWSIZE => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWSIZE,
        I_AWLOCK => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWLOCK,
        I_AWCACHE => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWCACHE,
        I_AWQOS => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWQOS,
        I_AWPROT => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWPROT,
        I_AWUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWUSER,
        I_AWBURST => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWBURST,
        I_AWREGION => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWREGION,
        I_WVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WVALID,
        I_WREADY => update_WREADY,
        I_WDATA => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WDATA,
        I_WID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WID,
        I_WUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WUSER,
        I_WLAST => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WLAST,
        I_WSTRB => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WSTRB,
        I_BVALID => update_BVALID,
        I_BREADY => dataflow_in_loop_display_shift_label0_U0_m_axi_update_BREADY,
        I_BRESP => update_BRESP,
        I_BID => update_BID,
        I_BUSER => update_BUSER);

    dataflow_in_loop_display_shift_label0_U0 : component display_shift_dataflow_in_loop_display_shift_label0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        width => width,
        xstart => xstart,
        y_2 => loop_dataflow_input_count,
        ystart => ystart,
        frame_size => frame_size,
        ddr_copy => ddr_copy,
        m_axi_copy_AWVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWVALID,
        m_axi_copy_AWREADY => ap_const_logic_0,
        m_axi_copy_AWADDR => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWADDR,
        m_axi_copy_AWID => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWID,
        m_axi_copy_AWLEN => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWLEN,
        m_axi_copy_AWSIZE => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWSIZE,
        m_axi_copy_AWBURST => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWBURST,
        m_axi_copy_AWLOCK => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWLOCK,
        m_axi_copy_AWCACHE => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWCACHE,
        m_axi_copy_AWPROT => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWPROT,
        m_axi_copy_AWQOS => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWQOS,
        m_axi_copy_AWREGION => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWREGION,
        m_axi_copy_AWUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_AWUSER,
        m_axi_copy_WVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WVALID,
        m_axi_copy_WREADY => ap_const_logic_0,
        m_axi_copy_WDATA => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WDATA,
        m_axi_copy_WSTRB => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WSTRB,
        m_axi_copy_WLAST => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WLAST,
        m_axi_copy_WID => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WID,
        m_axi_copy_WUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_WUSER,
        m_axi_copy_ARVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARVALID,
        m_axi_copy_ARREADY => copy_ARREADY,
        m_axi_copy_ARADDR => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARADDR,
        m_axi_copy_ARID => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARID,
        m_axi_copy_ARLEN => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARLEN,
        m_axi_copy_ARSIZE => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARSIZE,
        m_axi_copy_ARBURST => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARBURST,
        m_axi_copy_ARLOCK => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARLOCK,
        m_axi_copy_ARCACHE => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARCACHE,
        m_axi_copy_ARPROT => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARPROT,
        m_axi_copy_ARQOS => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARQOS,
        m_axi_copy_ARREGION => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARREGION,
        m_axi_copy_ARUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_ARUSER,
        m_axi_copy_RVALID => copy_RVALID,
        m_axi_copy_RREADY => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_RREADY,
        m_axi_copy_RDATA => copy_RDATA,
        m_axi_copy_RLAST => copy_RLAST,
        m_axi_copy_RID => copy_RID,
        m_axi_copy_RUSER => copy_RUSER,
        m_axi_copy_RRESP => copy_RRESP,
        m_axi_copy_BVALID => ap_const_logic_0,
        m_axi_copy_BREADY => dataflow_in_loop_display_shift_label0_U0_m_axi_copy_BREADY,
        m_axi_copy_BRESP => ap_const_lv2_0,
        m_axi_copy_BID => ap_const_lv1_0,
        m_axi_copy_BUSER => ap_const_lv1_0,
        xend => xend,
        yend => yend,
        ddr_update => ddr_update,
        m_axi_update_AWVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWVALID,
        m_axi_update_AWREADY => update_AWREADY,
        m_axi_update_AWADDR => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWADDR,
        m_axi_update_AWID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWID,
        m_axi_update_AWLEN => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWLEN,
        m_axi_update_AWSIZE => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWSIZE,
        m_axi_update_AWBURST => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWBURST,
        m_axi_update_AWLOCK => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWLOCK,
        m_axi_update_AWCACHE => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWCACHE,
        m_axi_update_AWPROT => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWPROT,
        m_axi_update_AWQOS => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWQOS,
        m_axi_update_AWREGION => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWREGION,
        m_axi_update_AWUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_update_AWUSER,
        m_axi_update_WVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WVALID,
        m_axi_update_WREADY => update_WREADY,
        m_axi_update_WDATA => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WDATA,
        m_axi_update_WSTRB => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WSTRB,
        m_axi_update_WLAST => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WLAST,
        m_axi_update_WID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WID,
        m_axi_update_WUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_update_WUSER,
        m_axi_update_ARVALID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARVALID,
        m_axi_update_ARREADY => ap_const_logic_0,
        m_axi_update_ARADDR => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARADDR,
        m_axi_update_ARID => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARID,
        m_axi_update_ARLEN => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARLEN,
        m_axi_update_ARSIZE => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARSIZE,
        m_axi_update_ARBURST => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARBURST,
        m_axi_update_ARLOCK => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARLOCK,
        m_axi_update_ARCACHE => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARCACHE,
        m_axi_update_ARPROT => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARPROT,
        m_axi_update_ARQOS => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARQOS,
        m_axi_update_ARREGION => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARREGION,
        m_axi_update_ARUSER => dataflow_in_loop_display_shift_label0_U0_m_axi_update_ARUSER,
        m_axi_update_RVALID => ap_const_logic_0,
        m_axi_update_RREADY => dataflow_in_loop_display_shift_label0_U0_m_axi_update_RREADY,
        m_axi_update_RDATA => ap_const_lv32_0,
        m_axi_update_RLAST => ap_const_logic_0,
        m_axi_update_RID => ap_const_lv1_0,
        m_axi_update_RUSER => ap_const_lv1_0,
        m_axi_update_RRESP => ap_const_lv2_0,
        m_axi_update_BVALID => update_BVALID,
        m_axi_update_BREADY => dataflow_in_loop_display_shift_label0_U0_m_axi_update_BREADY,
        m_axi_update_BRESP => update_BRESP,
        m_axi_update_BID => update_BID,
        m_axi_update_BUSER => update_BUSER,
        width_ap_vld => ap_const_logic_1,
        xstart_ap_vld => ap_const_logic_1,
        y_2_ap_vld => ap_const_logic_0,
        ystart_ap_vld => ap_const_logic_1,
        frame_size_ap_vld => ap_const_logic_1,
        ddr_copy_ap_vld => ap_const_logic_1,
        xend_ap_vld => ap_const_logic_1,
        yend_ap_vld => ap_const_logic_1,
        ddr_update_ap_vld => ap_const_logic_1,
        ap_start => dataflow_in_loop_display_shift_label0_U0_ap_start,
        ap_done => dataflow_in_loop_display_shift_label0_U0_ap_done,
        ap_ready => dataflow_in_loop_display_shift_label0_U0_ap_ready,
        ap_idle => dataflow_in_loop_display_shift_label0_U0_ap_idle,
        ap_continue => dataflow_in_loop_display_shift_label0_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loop_dataflow_input_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_display_shift_label0_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv32_1));
                elsif (((ap_start = ap_const_logic_1) and (loop_dataflow_input_count = bound_minus_1) and (dataflow_in_loop_display_shift_label0_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loop_dataflow_output_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_in_loop_display_shift_label0_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_display_shift_label0_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_display_shift_label0_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_display_shift_label0_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_in_loop_display_shift_label0_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_display_shift_label0_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, dataflow_in_loop_display_shift_label0_U0_ap_idle, loop_dataflow_output_count)
    begin
        if (((ap_start = ap_const_logic_0) and (loop_dataflow_output_count = ap_const_lv32_0) and (dataflow_in_loop_display_shift_label0_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, dataflow_in_loop_display_shift_label0_U0_ap_ready, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((ap_start = ap_const_logic_1) and (loop_dataflow_input_count = bound_minus_1) and (dataflow_in_loop_display_shift_label0_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= dataflow_in_loop_display_shift_label0_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_display_shift_label0_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(height) - unsigned(ap_const_lv32_1));
    dataflow_in_loop_display_shift_label0_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_display_shift_label0_U0_ap_start <= ap_start;
    dataflow_in_loop_display_shift_label0_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_display_shift_label0_U0_start_write <= ap_const_logic_0;
end behav;
