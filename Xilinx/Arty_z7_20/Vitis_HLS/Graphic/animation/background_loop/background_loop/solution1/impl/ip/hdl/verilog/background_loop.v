// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="background_loop_background_loop,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.166000,HLS_SYN_LAT=324663,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=5246,HLS_SYN_LUT=4278,HLS_VERSION=2020_2}" *)

module background_loop (
        ap_clk,
        ap_rst_n,
        m_axi_copy_AWVALID,
        m_axi_copy_AWREADY,
        m_axi_copy_AWADDR,
        m_axi_copy_AWID,
        m_axi_copy_AWLEN,
        m_axi_copy_AWSIZE,
        m_axi_copy_AWBURST,
        m_axi_copy_AWLOCK,
        m_axi_copy_AWCACHE,
        m_axi_copy_AWPROT,
        m_axi_copy_AWQOS,
        m_axi_copy_AWREGION,
        m_axi_copy_AWUSER,
        m_axi_copy_WVALID,
        m_axi_copy_WREADY,
        m_axi_copy_WDATA,
        m_axi_copy_WSTRB,
        m_axi_copy_WLAST,
        m_axi_copy_WID,
        m_axi_copy_WUSER,
        m_axi_copy_ARVALID,
        m_axi_copy_ARREADY,
        m_axi_copy_ARADDR,
        m_axi_copy_ARID,
        m_axi_copy_ARLEN,
        m_axi_copy_ARSIZE,
        m_axi_copy_ARBURST,
        m_axi_copy_ARLOCK,
        m_axi_copy_ARCACHE,
        m_axi_copy_ARPROT,
        m_axi_copy_ARQOS,
        m_axi_copy_ARREGION,
        m_axi_copy_ARUSER,
        m_axi_copy_RVALID,
        m_axi_copy_RREADY,
        m_axi_copy_RDATA,
        m_axi_copy_RLAST,
        m_axi_copy_RID,
        m_axi_copy_RUSER,
        m_axi_copy_RRESP,
        m_axi_copy_BVALID,
        m_axi_copy_BREADY,
        m_axi_copy_BRESP,
        m_axi_copy_BID,
        m_axi_copy_BUSER,
        m_axi_update_AWVALID,
        m_axi_update_AWREADY,
        m_axi_update_AWADDR,
        m_axi_update_AWID,
        m_axi_update_AWLEN,
        m_axi_update_AWSIZE,
        m_axi_update_AWBURST,
        m_axi_update_AWLOCK,
        m_axi_update_AWCACHE,
        m_axi_update_AWPROT,
        m_axi_update_AWQOS,
        m_axi_update_AWREGION,
        m_axi_update_AWUSER,
        m_axi_update_WVALID,
        m_axi_update_WREADY,
        m_axi_update_WDATA,
        m_axi_update_WSTRB,
        m_axi_update_WLAST,
        m_axi_update_WID,
        m_axi_update_WUSER,
        m_axi_update_ARVALID,
        m_axi_update_ARREADY,
        m_axi_update_ARADDR,
        m_axi_update_ARID,
        m_axi_update_ARLEN,
        m_axi_update_ARSIZE,
        m_axi_update_ARBURST,
        m_axi_update_ARLOCK,
        m_axi_update_ARCACHE,
        m_axi_update_ARPROT,
        m_axi_update_ARQOS,
        m_axi_update_ARREGION,
        m_axi_update_ARUSER,
        m_axi_update_RVALID,
        m_axi_update_RREADY,
        m_axi_update_RDATA,
        m_axi_update_RLAST,
        m_axi_update_RID,
        m_axi_update_RUSER,
        m_axi_update_RRESP,
        m_axi_update_BVALID,
        m_axi_update_BREADY,
        m_axi_update_BRESP,
        m_axi_update_BID,
        m_axi_update_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_COPY_ID_WIDTH = 1;
parameter    C_M_AXI_COPY_ADDR_WIDTH = 64;
parameter    C_M_AXI_COPY_DATA_WIDTH = 32;
parameter    C_M_AXI_COPY_AWUSER_WIDTH = 1;
parameter    C_M_AXI_COPY_ARUSER_WIDTH = 1;
parameter    C_M_AXI_COPY_WUSER_WIDTH = 1;
parameter    C_M_AXI_COPY_RUSER_WIDTH = 1;
parameter    C_M_AXI_COPY_BUSER_WIDTH = 1;
parameter    C_M_AXI_COPY_USER_VALUE = 0;
parameter    C_M_AXI_COPY_PROT_VALUE = 0;
parameter    C_M_AXI_COPY_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_UPDATE_ID_WIDTH = 1;
parameter    C_M_AXI_UPDATE_ADDR_WIDTH = 64;
parameter    C_M_AXI_UPDATE_DATA_WIDTH = 32;
parameter    C_M_AXI_UPDATE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_UPDATE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_UPDATE_WUSER_WIDTH = 1;
parameter    C_M_AXI_UPDATE_RUSER_WIDTH = 1;
parameter    C_M_AXI_UPDATE_BUSER_WIDTH = 1;
parameter    C_M_AXI_UPDATE_USER_VALUE = 0;
parameter    C_M_AXI_UPDATE_PROT_VALUE = 0;
parameter    C_M_AXI_UPDATE_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_COPY_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_UPDATE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_copy_AWVALID;
input   m_axi_copy_AWREADY;
output  [C_M_AXI_COPY_ADDR_WIDTH - 1:0] m_axi_copy_AWADDR;
output  [C_M_AXI_COPY_ID_WIDTH - 1:0] m_axi_copy_AWID;
output  [7:0] m_axi_copy_AWLEN;
output  [2:0] m_axi_copy_AWSIZE;
output  [1:0] m_axi_copy_AWBURST;
output  [1:0] m_axi_copy_AWLOCK;
output  [3:0] m_axi_copy_AWCACHE;
output  [2:0] m_axi_copy_AWPROT;
output  [3:0] m_axi_copy_AWQOS;
output  [3:0] m_axi_copy_AWREGION;
output  [C_M_AXI_COPY_AWUSER_WIDTH - 1:0] m_axi_copy_AWUSER;
output   m_axi_copy_WVALID;
input   m_axi_copy_WREADY;
output  [C_M_AXI_COPY_DATA_WIDTH - 1:0] m_axi_copy_WDATA;
output  [C_M_AXI_COPY_WSTRB_WIDTH - 1:0] m_axi_copy_WSTRB;
output   m_axi_copy_WLAST;
output  [C_M_AXI_COPY_ID_WIDTH - 1:0] m_axi_copy_WID;
output  [C_M_AXI_COPY_WUSER_WIDTH - 1:0] m_axi_copy_WUSER;
output   m_axi_copy_ARVALID;
input   m_axi_copy_ARREADY;
output  [C_M_AXI_COPY_ADDR_WIDTH - 1:0] m_axi_copy_ARADDR;
output  [C_M_AXI_COPY_ID_WIDTH - 1:0] m_axi_copy_ARID;
output  [7:0] m_axi_copy_ARLEN;
output  [2:0] m_axi_copy_ARSIZE;
output  [1:0] m_axi_copy_ARBURST;
output  [1:0] m_axi_copy_ARLOCK;
output  [3:0] m_axi_copy_ARCACHE;
output  [2:0] m_axi_copy_ARPROT;
output  [3:0] m_axi_copy_ARQOS;
output  [3:0] m_axi_copy_ARREGION;
output  [C_M_AXI_COPY_ARUSER_WIDTH - 1:0] m_axi_copy_ARUSER;
input   m_axi_copy_RVALID;
output   m_axi_copy_RREADY;
input  [C_M_AXI_COPY_DATA_WIDTH - 1:0] m_axi_copy_RDATA;
input   m_axi_copy_RLAST;
input  [C_M_AXI_COPY_ID_WIDTH - 1:0] m_axi_copy_RID;
input  [C_M_AXI_COPY_RUSER_WIDTH - 1:0] m_axi_copy_RUSER;
input  [1:0] m_axi_copy_RRESP;
input   m_axi_copy_BVALID;
output   m_axi_copy_BREADY;
input  [1:0] m_axi_copy_BRESP;
input  [C_M_AXI_COPY_ID_WIDTH - 1:0] m_axi_copy_BID;
input  [C_M_AXI_COPY_BUSER_WIDTH - 1:0] m_axi_copy_BUSER;
output   m_axi_update_AWVALID;
input   m_axi_update_AWREADY;
output  [C_M_AXI_UPDATE_ADDR_WIDTH - 1:0] m_axi_update_AWADDR;
output  [C_M_AXI_UPDATE_ID_WIDTH - 1:0] m_axi_update_AWID;
output  [7:0] m_axi_update_AWLEN;
output  [2:0] m_axi_update_AWSIZE;
output  [1:0] m_axi_update_AWBURST;
output  [1:0] m_axi_update_AWLOCK;
output  [3:0] m_axi_update_AWCACHE;
output  [2:0] m_axi_update_AWPROT;
output  [3:0] m_axi_update_AWQOS;
output  [3:0] m_axi_update_AWREGION;
output  [C_M_AXI_UPDATE_AWUSER_WIDTH - 1:0] m_axi_update_AWUSER;
output   m_axi_update_WVALID;
input   m_axi_update_WREADY;
output  [C_M_AXI_UPDATE_DATA_WIDTH - 1:0] m_axi_update_WDATA;
output  [C_M_AXI_UPDATE_WSTRB_WIDTH - 1:0] m_axi_update_WSTRB;
output   m_axi_update_WLAST;
output  [C_M_AXI_UPDATE_ID_WIDTH - 1:0] m_axi_update_WID;
output  [C_M_AXI_UPDATE_WUSER_WIDTH - 1:0] m_axi_update_WUSER;
output   m_axi_update_ARVALID;
input   m_axi_update_ARREADY;
output  [C_M_AXI_UPDATE_ADDR_WIDTH - 1:0] m_axi_update_ARADDR;
output  [C_M_AXI_UPDATE_ID_WIDTH - 1:0] m_axi_update_ARID;
output  [7:0] m_axi_update_ARLEN;
output  [2:0] m_axi_update_ARSIZE;
output  [1:0] m_axi_update_ARBURST;
output  [1:0] m_axi_update_ARLOCK;
output  [3:0] m_axi_update_ARCACHE;
output  [2:0] m_axi_update_ARPROT;
output  [3:0] m_axi_update_ARQOS;
output  [3:0] m_axi_update_ARREGION;
output  [C_M_AXI_UPDATE_ARUSER_WIDTH - 1:0] m_axi_update_ARUSER;
input   m_axi_update_RVALID;
output   m_axi_update_RREADY;
input  [C_M_AXI_UPDATE_DATA_WIDTH - 1:0] m_axi_update_RDATA;
input   m_axi_update_RLAST;
input  [C_M_AXI_UPDATE_ID_WIDTH - 1:0] m_axi_update_RID;
input  [C_M_AXI_UPDATE_RUSER_WIDTH - 1:0] m_axi_update_RUSER;
input  [1:0] m_axi_update_RRESP;
input   m_axi_update_BVALID;
output   m_axi_update_BREADY;
input  [1:0] m_axi_update_BRESP;
input  [C_M_AXI_UPDATE_ID_WIDTH - 1:0] m_axi_update_BID;
input  [C_M_AXI_UPDATE_BUSER_WIDTH - 1:0] m_axi_update_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] ddr_copy;
wire   [63:0] ddr_update;
wire   [31:0] width;
wire   [31:0] height;
wire   [31:0] frame_size;
wire   [31:0] direction;
wire    copy_AWREADY;
wire    copy_WREADY;
reg    copy_ARVALID;
wire    copy_ARREADY;
reg   [63:0] copy_ARADDR;
reg   [0:0] copy_ARID;
reg   [31:0] copy_ARLEN;
reg   [2:0] copy_ARSIZE;
reg   [1:0] copy_ARBURST;
reg   [1:0] copy_ARLOCK;
reg   [3:0] copy_ARCACHE;
reg   [2:0] copy_ARPROT;
reg   [3:0] copy_ARQOS;
reg   [3:0] copy_ARREGION;
reg   [0:0] copy_ARUSER;
wire    copy_RVALID;
reg    copy_RREADY;
wire   [31:0] copy_RDATA;
wire    copy_RLAST;
wire   [0:0] copy_RID;
wire   [0:0] copy_RUSER;
wire   [1:0] copy_RRESP;
wire    copy_BVALID;
wire   [1:0] copy_BRESP;
wire   [0:0] copy_BID;
wire   [0:0] copy_BUSER;
reg    update_AWVALID;
wire    update_AWREADY;
reg   [63:0] update_AWADDR;
reg   [0:0] update_AWID;
reg   [31:0] update_AWLEN;
reg   [2:0] update_AWSIZE;
reg   [1:0] update_AWBURST;
reg   [1:0] update_AWLOCK;
reg   [3:0] update_AWCACHE;
reg   [2:0] update_AWPROT;
reg   [3:0] update_AWQOS;
reg   [3:0] update_AWREGION;
reg   [0:0] update_AWUSER;
reg    update_WVALID;
wire    update_WREADY;
reg   [31:0] update_WDATA;
reg   [3:0] update_WSTRB;
reg    update_WLAST;
reg   [0:0] update_WID;
reg   [0:0] update_WUSER;
wire    update_ARREADY;
wire    update_RVALID;
wire   [31:0] update_RDATA;
wire    update_RLAST;
wire   [0:0] update_RID;
wire   [0:0] update_RUSER;
wire   [1:0] update_RRESP;
wire    update_BVALID;
reg    update_BREADY;
wire   [1:0] update_BRESP;
wire   [0:0] update_BID;
wire   [0:0] update_BUSER;
reg   [31:0] frame_size_read_reg_147;
reg   [31:0] height_read_reg_154;
reg   [31:0] width_read_reg_161;
reg   [63:0] ddr_update_read_reg_167;
reg   [63:0] ddr_copy_read_reg_173;
reg   [9:0] ycopy_V_address0;
reg    ycopy_V_ce0;
reg    ycopy_V_we0;
wire   [31:0] ycopy_V_q0;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWVALID;
wire   [63:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWADDR;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWID;
wire   [31:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWLEN;
wire   [2:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWBURST;
wire   [1:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWPROT;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWQOS;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWREGION;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWUSER;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WVALID;
wire   [31:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WDATA;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WSTRB;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WLAST;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WID;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WUSER;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARVALID;
wire   [63:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARADDR;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARID;
wire   [31:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARLEN;
wire   [2:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARBURST;
wire   [1:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARPROT;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARQOS;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARREGION;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARUSER;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_RREADY;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_BREADY;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWVALID;
wire   [63:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWADDR;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWID;
wire   [31:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWLEN;
wire   [2:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWBURST;
wire   [1:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWPROT;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWQOS;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWREGION;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWUSER;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WVALID;
wire   [31:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WDATA;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WSTRB;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WLAST;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WID;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WUSER;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARVALID;
wire   [63:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARADDR;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARID;
wire   [31:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARLEN;
wire   [2:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARBURST;
wire   [1:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARPROT;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARQOS;
wire   [3:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARREGION;
wire   [0:0] grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARUSER;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_RREADY;
wire    grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_BREADY;
wire    grp_dataflow_parent_loop_proc3_fu_108_ap_start;
wire    grp_dataflow_parent_loop_proc3_fu_108_ap_done;
wire    grp_dataflow_parent_loop_proc3_fu_108_ap_ready;
wire    grp_dataflow_parent_loop_proc3_fu_108_ap_idle;
reg    grp_dataflow_parent_loop_proc3_fu_108_ap_continue;
wire    grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWVALID;
wire   [63:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWADDR;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWID;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWLEN;
wire   [2:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWBURST;
wire   [1:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWPROT;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWQOS;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWREGION;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWUSER;
wire    grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WVALID;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WDATA;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WSTRB;
wire    grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WLAST;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WID;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WUSER;
wire    grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARVALID;
wire   [63:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARADDR;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARID;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARLEN;
wire   [2:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARBURST;
wire   [1:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARPROT;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARQOS;
wire   [3:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARREGION;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARUSER;
wire    grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_RREADY;
wire    grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_BREADY;
wire   [9:0] grp_dataflow_parent_loop_proc_fu_121_ycopy_V_address0;
wire    grp_dataflow_parent_loop_proc_fu_121_ycopy_V_ce0;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_121_ycopy_V_d0;
wire    grp_dataflow_parent_loop_proc_fu_121_ycopy_V_we0;
wire   [9:0] grp_dataflow_parent_loop_proc_fu_121_ycopy_V_address1;
wire    grp_dataflow_parent_loop_proc_fu_121_ycopy_V_ce1;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_121_ycopy_V_d1;
wire    grp_dataflow_parent_loop_proc_fu_121_ycopy_V_we1;
wire    grp_dataflow_parent_loop_proc_fu_121_ap_start;
wire    grp_dataflow_parent_loop_proc_fu_121_ap_done;
wire    grp_dataflow_parent_loop_proc_fu_121_ap_ready;
wire    grp_dataflow_parent_loop_proc_fu_121_ap_idle;
reg    grp_dataflow_parent_loop_proc_fu_121_ap_continue;
wire   [9:0] grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_address0;
wire    grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_ce0;
wire   [31:0] grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_d0;
wire    grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_we0;
wire   [9:0] grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_address1;
wire    grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_ce1;
wire   [31:0] grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_d1;
wire    grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_we1;
wire    grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWVALID;
wire   [63:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWADDR;
wire   [0:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWID;
wire   [31:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWLEN;
wire   [2:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWBURST;
wire   [1:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWPROT;
wire   [3:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWQOS;
wire   [3:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWREGION;
wire   [0:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWUSER;
wire    grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WVALID;
wire   [31:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WDATA;
wire   [3:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WSTRB;
wire    grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WLAST;
wire   [0:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WID;
wire   [0:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WUSER;
wire    grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARVALID;
wire   [63:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARADDR;
wire   [0:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARID;
wire   [31:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARLEN;
wire   [2:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARSIZE;
wire   [1:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARBURST;
wire   [1:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARLOCK;
wire   [3:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARCACHE;
wire   [2:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARPROT;
wire   [3:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARQOS;
wire   [3:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARREGION;
wire   [0:0] grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARUSER;
wire    grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_RREADY;
wire    grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_BREADY;
wire    grp_dataflow_parent_loop_proc4_fu_137_ap_start;
wire    grp_dataflow_parent_loop_proc4_fu_137_ap_done;
wire    grp_dataflow_parent_loop_proc4_fu_137_ap_ready;
wire    grp_dataflow_parent_loop_proc4_fu_137_ap_idle;
reg    grp_dataflow_parent_loop_proc4_fu_137_ap_continue;
reg    grp_dataflow_parent_loop_proc3_fu_108_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_sync_grp_dataflow_parent_loop_proc3_fu_108_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc3_fu_108_ap_done;
reg    ap_block_state4_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_done;
reg    grp_dataflow_parent_loop_proc_fu_121_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_121_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_121_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_done;
reg    grp_dataflow_parent_loop_proc4_fu_137_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_sync_grp_dataflow_parent_loop_proc4_fu_137_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc4_fu_137_ap_done;
reg    ap_block_state6_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_done;
reg   [5:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_dataflow_parent_loop_proc3_fu_108_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_done = 1'b0;
#0 grp_dataflow_parent_loop_proc_fu_121_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_done = 1'b0;
#0 grp_dataflow_parent_loop_proc4_fu_137_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_done = 1'b0;
end

background_loop_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ddr_copy(ddr_copy),
    .ddr_update(ddr_update),
    .width(width),
    .height(height),
    .frame_size(frame_size),
    .direction(direction),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

background_loop_copy_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 32 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_COPY_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_COPY_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_COPY_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_COPY_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_COPY_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_COPY_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_COPY_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_COPY_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_COPY_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_COPY_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_COPY_CACHE_VALUE ))
copy_m_axi_U(
    .AWVALID(m_axi_copy_AWVALID),
    .AWREADY(m_axi_copy_AWREADY),
    .AWADDR(m_axi_copy_AWADDR),
    .AWID(m_axi_copy_AWID),
    .AWLEN(m_axi_copy_AWLEN),
    .AWSIZE(m_axi_copy_AWSIZE),
    .AWBURST(m_axi_copy_AWBURST),
    .AWLOCK(m_axi_copy_AWLOCK),
    .AWCACHE(m_axi_copy_AWCACHE),
    .AWPROT(m_axi_copy_AWPROT),
    .AWQOS(m_axi_copy_AWQOS),
    .AWREGION(m_axi_copy_AWREGION),
    .AWUSER(m_axi_copy_AWUSER),
    .WVALID(m_axi_copy_WVALID),
    .WREADY(m_axi_copy_WREADY),
    .WDATA(m_axi_copy_WDATA),
    .WSTRB(m_axi_copy_WSTRB),
    .WLAST(m_axi_copy_WLAST),
    .WID(m_axi_copy_WID),
    .WUSER(m_axi_copy_WUSER),
    .ARVALID(m_axi_copy_ARVALID),
    .ARREADY(m_axi_copy_ARREADY),
    .ARADDR(m_axi_copy_ARADDR),
    .ARID(m_axi_copy_ARID),
    .ARLEN(m_axi_copy_ARLEN),
    .ARSIZE(m_axi_copy_ARSIZE),
    .ARBURST(m_axi_copy_ARBURST),
    .ARLOCK(m_axi_copy_ARLOCK),
    .ARCACHE(m_axi_copy_ARCACHE),
    .ARPROT(m_axi_copy_ARPROT),
    .ARQOS(m_axi_copy_ARQOS),
    .ARREGION(m_axi_copy_ARREGION),
    .ARUSER(m_axi_copy_ARUSER),
    .RVALID(m_axi_copy_RVALID),
    .RREADY(m_axi_copy_RREADY),
    .RDATA(m_axi_copy_RDATA),
    .RLAST(m_axi_copy_RLAST),
    .RID(m_axi_copy_RID),
    .RUSER(m_axi_copy_RUSER),
    .RRESP(m_axi_copy_RRESP),
    .BVALID(m_axi_copy_BVALID),
    .BREADY(m_axi_copy_BREADY),
    .BRESP(m_axi_copy_BRESP),
    .BID(m_axi_copy_BID),
    .BUSER(m_axi_copy_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(copy_ARVALID),
    .I_ARREADY(copy_ARREADY),
    .I_ARADDR(copy_ARADDR),
    .I_ARID(copy_ARID),
    .I_ARLEN(copy_ARLEN),
    .I_ARSIZE(copy_ARSIZE),
    .I_ARLOCK(copy_ARLOCK),
    .I_ARCACHE(copy_ARCACHE),
    .I_ARQOS(copy_ARQOS),
    .I_ARPROT(copy_ARPROT),
    .I_ARUSER(copy_ARUSER),
    .I_ARBURST(copy_ARBURST),
    .I_ARREGION(copy_ARREGION),
    .I_RVALID(copy_RVALID),
    .I_RREADY(copy_RREADY),
    .I_RDATA(copy_RDATA),
    .I_RID(copy_RID),
    .I_RUSER(copy_RUSER),
    .I_RRESP(copy_RRESP),
    .I_RLAST(copy_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(copy_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(copy_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(copy_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(copy_BRESP),
    .I_BID(copy_BID),
    .I_BUSER(copy_BUSER)
);

background_loop_update_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 32 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_UPDATE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_UPDATE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_UPDATE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_UPDATE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_UPDATE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_UPDATE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_UPDATE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_UPDATE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_UPDATE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_UPDATE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_UPDATE_CACHE_VALUE ))
update_m_axi_U(
    .AWVALID(m_axi_update_AWVALID),
    .AWREADY(m_axi_update_AWREADY),
    .AWADDR(m_axi_update_AWADDR),
    .AWID(m_axi_update_AWID),
    .AWLEN(m_axi_update_AWLEN),
    .AWSIZE(m_axi_update_AWSIZE),
    .AWBURST(m_axi_update_AWBURST),
    .AWLOCK(m_axi_update_AWLOCK),
    .AWCACHE(m_axi_update_AWCACHE),
    .AWPROT(m_axi_update_AWPROT),
    .AWQOS(m_axi_update_AWQOS),
    .AWREGION(m_axi_update_AWREGION),
    .AWUSER(m_axi_update_AWUSER),
    .WVALID(m_axi_update_WVALID),
    .WREADY(m_axi_update_WREADY),
    .WDATA(m_axi_update_WDATA),
    .WSTRB(m_axi_update_WSTRB),
    .WLAST(m_axi_update_WLAST),
    .WID(m_axi_update_WID),
    .WUSER(m_axi_update_WUSER),
    .ARVALID(m_axi_update_ARVALID),
    .ARREADY(m_axi_update_ARREADY),
    .ARADDR(m_axi_update_ARADDR),
    .ARID(m_axi_update_ARID),
    .ARLEN(m_axi_update_ARLEN),
    .ARSIZE(m_axi_update_ARSIZE),
    .ARBURST(m_axi_update_ARBURST),
    .ARLOCK(m_axi_update_ARLOCK),
    .ARCACHE(m_axi_update_ARCACHE),
    .ARPROT(m_axi_update_ARPROT),
    .ARQOS(m_axi_update_ARQOS),
    .ARREGION(m_axi_update_ARREGION),
    .ARUSER(m_axi_update_ARUSER),
    .RVALID(m_axi_update_RVALID),
    .RREADY(m_axi_update_RREADY),
    .RDATA(m_axi_update_RDATA),
    .RLAST(m_axi_update_RLAST),
    .RID(m_axi_update_RID),
    .RUSER(m_axi_update_RUSER),
    .RRESP(m_axi_update_RRESP),
    .BVALID(m_axi_update_BVALID),
    .BREADY(m_axi_update_BREADY),
    .BRESP(m_axi_update_BRESP),
    .BID(m_axi_update_BID),
    .BUSER(m_axi_update_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(update_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(update_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(update_RDATA),
    .I_RID(update_RID),
    .I_RUSER(update_RUSER),
    .I_RRESP(update_RRESP),
    .I_RLAST(update_RLAST),
    .I_AWVALID(update_AWVALID),
    .I_AWREADY(update_AWREADY),
    .I_AWADDR(update_AWADDR),
    .I_AWID(update_AWID),
    .I_AWLEN(update_AWLEN),
    .I_AWSIZE(update_AWSIZE),
    .I_AWLOCK(update_AWLOCK),
    .I_AWCACHE(update_AWCACHE),
    .I_AWQOS(update_AWQOS),
    .I_AWPROT(update_AWPROT),
    .I_AWUSER(update_AWUSER),
    .I_AWBURST(update_AWBURST),
    .I_AWREGION(update_AWREGION),
    .I_WVALID(update_WVALID),
    .I_WREADY(update_WREADY),
    .I_WDATA(update_WDATA),
    .I_WID(update_WID),
    .I_WUSER(update_WUSER),
    .I_WLAST(update_WLAST),
    .I_WSTRB(update_WSTRB),
    .I_BVALID(update_BVALID),
    .I_BREADY(update_BREADY),
    .I_BRESP(update_BRESP),
    .I_BID(update_BID),
    .I_BUSER(update_BUSER)
);

background_loop_ycopy_V #(
    .DataWidth( 32 ),
    .AddressRange( 640 ),
    .AddressWidth( 10 ))
ycopy_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ycopy_V_address0),
    .ce0(ycopy_V_ce0),
    .we0(ycopy_V_we0),
    .d0(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_d0),
    .q0(ycopy_V_q0)
);

background_loop_dataflow_parent_loop_proc3 grp_dataflow_parent_loop_proc3_fu_108(
    .height(height_read_reg_154),
    .width(width_read_reg_161),
    .frame_size(frame_size_read_reg_147),
    .ddr_copy(ddr_copy_read_reg_173),
    .m_axi_copy_AWVALID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWVALID),
    .m_axi_copy_AWREADY(1'b0),
    .m_axi_copy_AWADDR(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWADDR),
    .m_axi_copy_AWID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWID),
    .m_axi_copy_AWLEN(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWLEN),
    .m_axi_copy_AWSIZE(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWSIZE),
    .m_axi_copy_AWBURST(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWBURST),
    .m_axi_copy_AWLOCK(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWLOCK),
    .m_axi_copy_AWCACHE(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWCACHE),
    .m_axi_copy_AWPROT(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWPROT),
    .m_axi_copy_AWQOS(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWQOS),
    .m_axi_copy_AWREGION(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWREGION),
    .m_axi_copy_AWUSER(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_AWUSER),
    .m_axi_copy_WVALID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WVALID),
    .m_axi_copy_WREADY(1'b0),
    .m_axi_copy_WDATA(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WDATA),
    .m_axi_copy_WSTRB(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WSTRB),
    .m_axi_copy_WLAST(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WLAST),
    .m_axi_copy_WID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WID),
    .m_axi_copy_WUSER(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_WUSER),
    .m_axi_copy_ARVALID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARVALID),
    .m_axi_copy_ARREADY(copy_ARREADY),
    .m_axi_copy_ARADDR(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARADDR),
    .m_axi_copy_ARID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARID),
    .m_axi_copy_ARLEN(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARLEN),
    .m_axi_copy_ARSIZE(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARSIZE),
    .m_axi_copy_ARBURST(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARBURST),
    .m_axi_copy_ARLOCK(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARLOCK),
    .m_axi_copy_ARCACHE(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARCACHE),
    .m_axi_copy_ARPROT(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARPROT),
    .m_axi_copy_ARQOS(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARQOS),
    .m_axi_copy_ARREGION(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARREGION),
    .m_axi_copy_ARUSER(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARUSER),
    .m_axi_copy_RVALID(copy_RVALID),
    .m_axi_copy_RREADY(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_RREADY),
    .m_axi_copy_RDATA(copy_RDATA),
    .m_axi_copy_RLAST(copy_RLAST),
    .m_axi_copy_RID(copy_RID),
    .m_axi_copy_RUSER(copy_RUSER),
    .m_axi_copy_RRESP(copy_RRESP),
    .m_axi_copy_BVALID(1'b0),
    .m_axi_copy_BREADY(grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_BREADY),
    .m_axi_copy_BRESP(2'd0),
    .m_axi_copy_BID(1'd0),
    .m_axi_copy_BUSER(1'd0),
    .ddr_update(ddr_update_read_reg_167),
    .m_axi_update_AWVALID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWVALID),
    .m_axi_update_AWREADY(update_AWREADY),
    .m_axi_update_AWADDR(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWADDR),
    .m_axi_update_AWID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWID),
    .m_axi_update_AWLEN(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWLEN),
    .m_axi_update_AWSIZE(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWSIZE),
    .m_axi_update_AWBURST(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWBURST),
    .m_axi_update_AWLOCK(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWLOCK),
    .m_axi_update_AWCACHE(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWCACHE),
    .m_axi_update_AWPROT(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWPROT),
    .m_axi_update_AWQOS(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWQOS),
    .m_axi_update_AWREGION(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWREGION),
    .m_axi_update_AWUSER(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWUSER),
    .m_axi_update_WVALID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WVALID),
    .m_axi_update_WREADY(update_WREADY),
    .m_axi_update_WDATA(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WDATA),
    .m_axi_update_WSTRB(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WSTRB),
    .m_axi_update_WLAST(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WLAST),
    .m_axi_update_WID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WID),
    .m_axi_update_WUSER(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WUSER),
    .m_axi_update_ARVALID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARVALID),
    .m_axi_update_ARREADY(1'b0),
    .m_axi_update_ARADDR(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARADDR),
    .m_axi_update_ARID(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARID),
    .m_axi_update_ARLEN(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARLEN),
    .m_axi_update_ARSIZE(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARSIZE),
    .m_axi_update_ARBURST(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARBURST),
    .m_axi_update_ARLOCK(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARLOCK),
    .m_axi_update_ARCACHE(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARCACHE),
    .m_axi_update_ARPROT(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARPROT),
    .m_axi_update_ARQOS(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARQOS),
    .m_axi_update_ARREGION(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARREGION),
    .m_axi_update_ARUSER(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_ARUSER),
    .m_axi_update_RVALID(1'b0),
    .m_axi_update_RREADY(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_RREADY),
    .m_axi_update_RDATA(32'd0),
    .m_axi_update_RLAST(1'b0),
    .m_axi_update_RID(1'd0),
    .m_axi_update_RUSER(1'd0),
    .m_axi_update_RRESP(2'd0),
    .m_axi_update_BVALID(update_BVALID),
    .m_axi_update_BREADY(grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_BREADY),
    .m_axi_update_BRESP(update_BRESP),
    .m_axi_update_BID(update_BID),
    .m_axi_update_BUSER(update_BUSER),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .width_ap_vld(1'b1),
    .frame_size_ap_vld(1'b1),
    .ddr_copy_ap_vld(1'b1),
    .ddr_update_ap_vld(1'b1),
    .ap_start(grp_dataflow_parent_loop_proc3_fu_108_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc3_fu_108_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc3_fu_108_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc3_fu_108_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc3_fu_108_ap_continue)
);

background_loop_dataflow_parent_loop_proc grp_dataflow_parent_loop_proc_fu_121(
    .height(height_read_reg_154),
    .m_axi_copy_AWVALID(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWVALID),
    .m_axi_copy_AWREADY(1'b0),
    .m_axi_copy_AWADDR(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWADDR),
    .m_axi_copy_AWID(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWID),
    .m_axi_copy_AWLEN(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWLEN),
    .m_axi_copy_AWSIZE(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWSIZE),
    .m_axi_copy_AWBURST(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWBURST),
    .m_axi_copy_AWLOCK(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWLOCK),
    .m_axi_copy_AWCACHE(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWCACHE),
    .m_axi_copy_AWPROT(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWPROT),
    .m_axi_copy_AWQOS(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWQOS),
    .m_axi_copy_AWREGION(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWREGION),
    .m_axi_copy_AWUSER(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_AWUSER),
    .m_axi_copy_WVALID(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WVALID),
    .m_axi_copy_WREADY(1'b0),
    .m_axi_copy_WDATA(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WDATA),
    .m_axi_copy_WSTRB(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WSTRB),
    .m_axi_copy_WLAST(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WLAST),
    .m_axi_copy_WID(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WID),
    .m_axi_copy_WUSER(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_WUSER),
    .m_axi_copy_ARVALID(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARVALID),
    .m_axi_copy_ARREADY(copy_ARREADY),
    .m_axi_copy_ARADDR(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARADDR),
    .m_axi_copy_ARID(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARID),
    .m_axi_copy_ARLEN(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARLEN),
    .m_axi_copy_ARSIZE(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARSIZE),
    .m_axi_copy_ARBURST(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARBURST),
    .m_axi_copy_ARLOCK(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARLOCK),
    .m_axi_copy_ARCACHE(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARCACHE),
    .m_axi_copy_ARPROT(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARPROT),
    .m_axi_copy_ARQOS(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARQOS),
    .m_axi_copy_ARREGION(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARREGION),
    .m_axi_copy_ARUSER(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARUSER),
    .m_axi_copy_RVALID(copy_RVALID),
    .m_axi_copy_RREADY(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_RREADY),
    .m_axi_copy_RDATA(copy_RDATA),
    .m_axi_copy_RLAST(copy_RLAST),
    .m_axi_copy_RID(copy_RID),
    .m_axi_copy_RUSER(copy_RUSER),
    .m_axi_copy_RRESP(copy_RRESP),
    .m_axi_copy_BVALID(1'b0),
    .m_axi_copy_BREADY(grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_BREADY),
    .m_axi_copy_BRESP(2'd0),
    .m_axi_copy_BID(1'd0),
    .m_axi_copy_BUSER(1'd0),
    .frame_size(frame_size_read_reg_147),
    .width(width_read_reg_161),
    .ddr_copy(ddr_copy_read_reg_173),
    .ycopy_V_address0(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_address0),
    .ycopy_V_ce0(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_ce0),
    .ycopy_V_d0(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_d0),
    .ycopy_V_q0(32'd0),
    .ycopy_V_we0(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_we0),
    .ycopy_V_address1(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_address1),
    .ycopy_V_ce1(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_ce1),
    .ycopy_V_d1(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_d1),
    .ycopy_V_q1(32'd0),
    .ycopy_V_we1(grp_dataflow_parent_loop_proc_fu_121_ycopy_V_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .frame_size_ap_vld(1'b1),
    .width_ap_vld(1'b1),
    .ddr_copy_ap_vld(1'b1),
    .ap_start(grp_dataflow_parent_loop_proc_fu_121_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc_fu_121_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc_fu_121_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc_fu_121_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc_fu_121_ap_continue)
);

background_loop_dataflow_parent_loop_proc4 grp_dataflow_parent_loop_proc4_fu_137(
    .height(height_read_reg_154),
    .ycopy_V_address0(grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_address0),
    .ycopy_V_ce0(grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_ce0),
    .ycopy_V_d0(grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_d0),
    .ycopy_V_q0(ycopy_V_q0),
    .ycopy_V_we0(grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_we0),
    .ycopy_V_address1(grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_address1),
    .ycopy_V_ce1(grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_ce1),
    .ycopy_V_d1(grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_d1),
    .ycopy_V_q1(32'd0),
    .ycopy_V_we1(grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_we1),
    .m_axi_update_AWVALID(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWVALID),
    .m_axi_update_AWREADY(update_AWREADY),
    .m_axi_update_AWADDR(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWADDR),
    .m_axi_update_AWID(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWID),
    .m_axi_update_AWLEN(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWLEN),
    .m_axi_update_AWSIZE(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWSIZE),
    .m_axi_update_AWBURST(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWBURST),
    .m_axi_update_AWLOCK(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWLOCK),
    .m_axi_update_AWCACHE(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWCACHE),
    .m_axi_update_AWPROT(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWPROT),
    .m_axi_update_AWQOS(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWQOS),
    .m_axi_update_AWREGION(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWREGION),
    .m_axi_update_AWUSER(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWUSER),
    .m_axi_update_WVALID(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WVALID),
    .m_axi_update_WREADY(update_WREADY),
    .m_axi_update_WDATA(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WDATA),
    .m_axi_update_WSTRB(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WSTRB),
    .m_axi_update_WLAST(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WLAST),
    .m_axi_update_WID(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WID),
    .m_axi_update_WUSER(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WUSER),
    .m_axi_update_ARVALID(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARVALID),
    .m_axi_update_ARREADY(1'b0),
    .m_axi_update_ARADDR(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARADDR),
    .m_axi_update_ARID(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARID),
    .m_axi_update_ARLEN(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARLEN),
    .m_axi_update_ARSIZE(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARSIZE),
    .m_axi_update_ARBURST(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARBURST),
    .m_axi_update_ARLOCK(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARLOCK),
    .m_axi_update_ARCACHE(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARCACHE),
    .m_axi_update_ARPROT(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARPROT),
    .m_axi_update_ARQOS(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARQOS),
    .m_axi_update_ARREGION(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARREGION),
    .m_axi_update_ARUSER(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_ARUSER),
    .m_axi_update_RVALID(1'b0),
    .m_axi_update_RREADY(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_RREADY),
    .m_axi_update_RDATA(32'd0),
    .m_axi_update_RLAST(1'b0),
    .m_axi_update_RID(1'd0),
    .m_axi_update_RUSER(1'd0),
    .m_axi_update_RRESP(2'd0),
    .m_axi_update_BVALID(update_BVALID),
    .m_axi_update_BREADY(grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_BREADY),
    .m_axi_update_BRESP(update_BRESP),
    .m_axi_update_BID(update_BID),
    .m_axi_update_BUSER(update_BUSER),
    .frame_size(frame_size_read_reg_147),
    .ddr_update(ddr_update_read_reg_167),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .frame_size_ap_vld(1'b1),
    .ddr_update_ap_vld(1'b1),
    .ap_start(grp_dataflow_parent_loop_proc4_fu_137_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc4_fu_137_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc4_fu_137_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc4_fu_137_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc4_fu_137_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc3_fu_108_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc3_fu_108_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc4_fu_137_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc4_fu_137_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_121_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_121_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_parent_loop_proc3_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_dataflow_parent_loop_proc3_fu_108_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_dataflow_parent_loop_proc3_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc3_fu_108_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc3_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_parent_loop_proc4_fu_137_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) | ((ap_sync_grp_dataflow_parent_loop_proc4_fu_137_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
            grp_dataflow_parent_loop_proc4_fu_137_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc4_fu_137_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc4_fu_137_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_parent_loop_proc_fu_121_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_dataflow_parent_loop_proc_fu_121_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_dataflow_parent_loop_proc_fu_121_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc_fu_121_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc_fu_121_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ddr_copy_read_reg_173 <= ddr_copy;
        ddr_update_read_reg_167 <= ddr_update;
        frame_size_read_reg_147 <= frame_size;
        height_read_reg_154 <= height;
        width_read_reg_161 <= width;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARADDR = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARADDR = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARADDR;
    end else begin
        copy_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARBURST = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARBURST = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARBURST;
    end else begin
        copy_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARCACHE = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARCACHE = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARCACHE;
    end else begin
        copy_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARID = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARID = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARID;
    end else begin
        copy_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARLEN = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARLEN = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARLEN;
    end else begin
        copy_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARLOCK = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARLOCK = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARLOCK;
    end else begin
        copy_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARPROT = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARPROT = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARPROT;
    end else begin
        copy_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARQOS = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARQOS = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARQOS;
    end else begin
        copy_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARREGION = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARREGION = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARREGION;
    end else begin
        copy_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARSIZE = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARSIZE = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARSIZE;
    end else begin
        copy_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARUSER = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARUSER = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARUSER;
    end else begin
        copy_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_ARVALID = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_ARVALID = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_ARVALID;
    end else begin
        copy_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        copy_RREADY = grp_dataflow_parent_loop_proc_fu_121_m_axi_copy_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        copy_RREADY = grp_dataflow_parent_loop_proc3_fu_108_m_axi_copy_RREADY;
    end else begin
        copy_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_dataflow_parent_loop_proc3_fu_108_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc3_fu_108_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_dataflow_parent_loop_proc4_fu_137_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc4_fu_137_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_dataflow_parent_loop_proc_fu_121_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc_fu_121_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWADDR = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWADDR;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWADDR = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWADDR;
    end else begin
        update_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWBURST = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWBURST;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWBURST = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWBURST;
    end else begin
        update_AWBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWCACHE = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWCACHE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWCACHE = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWCACHE;
    end else begin
        update_AWCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWID = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWID = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWID;
    end else begin
        update_AWID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWLEN = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWLEN;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWLEN = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWLEN;
    end else begin
        update_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWLOCK = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWLOCK;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWLOCK = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWLOCK;
    end else begin
        update_AWLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWPROT = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWPROT;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWPROT = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWPROT;
    end else begin
        update_AWPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWQOS = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWQOS;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWQOS = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWQOS;
    end else begin
        update_AWQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWREGION = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWREGION;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWREGION = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWREGION;
    end else begin
        update_AWREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWSIZE = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWSIZE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWSIZE = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWSIZE;
    end else begin
        update_AWSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWUSER = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWUSER;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWUSER = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWUSER;
    end else begin
        update_AWUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_AWVALID = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_AWVALID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_AWVALID = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_AWVALID;
    end else begin
        update_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_BREADY = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_BREADY;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_BREADY = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_BREADY;
    end else begin
        update_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_WDATA = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WDATA;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_WDATA = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WDATA;
    end else begin
        update_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_WID = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_WID = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WID;
    end else begin
        update_WID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_WLAST = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WLAST;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_WLAST = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WLAST;
    end else begin
        update_WLAST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_WSTRB = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WSTRB;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_WSTRB = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WSTRB;
    end else begin
        update_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_WUSER = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WUSER;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_WUSER = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WUSER;
    end else begin
        update_WUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        update_WVALID = grp_dataflow_parent_loop_proc4_fu_137_m_axi_update_WVALID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        update_WVALID = grp_dataflow_parent_loop_proc3_fu_108_m_axi_update_WVALID;
    end else begin
        update_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ycopy_V_address0 = grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ycopy_V_address0 = grp_dataflow_parent_loop_proc_fu_121_ycopy_V_address0;
    end else begin
        ycopy_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ycopy_V_ce0 = grp_dataflow_parent_loop_proc4_fu_137_ycopy_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ycopy_V_ce0 = grp_dataflow_parent_loop_proc_fu_121_ycopy_V_ce0;
    end else begin
        ycopy_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ycopy_V_we0 = grp_dataflow_parent_loop_proc_fu_121_ycopy_V_we0;
    end else begin
        ycopy_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc_fu_121_ap_ready & ap_sync_grp_dataflow_parent_loop_proc_fu_121_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc3_fu_108_ap_ready & ap_sync_grp_dataflow_parent_loop_proc3_fu_108_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc4_fu_137_ap_ready & ap_sync_grp_dataflow_parent_loop_proc4_fu_137_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_parent_loop_proc3_fu_108_ap_done = (grp_dataflow_parent_loop_proc3_fu_108_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc3_fu_108_ap_ready = (grp_dataflow_parent_loop_proc3_fu_108_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc3_fu_108_ap_ready);

assign ap_sync_grp_dataflow_parent_loop_proc4_fu_137_ap_done = (grp_dataflow_parent_loop_proc4_fu_137_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc4_fu_137_ap_ready = (grp_dataflow_parent_loop_proc4_fu_137_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc4_fu_137_ap_ready);

assign ap_sync_grp_dataflow_parent_loop_proc_fu_121_ap_done = (grp_dataflow_parent_loop_proc_fu_121_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc_fu_121_ap_ready = (grp_dataflow_parent_loop_proc_fu_121_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_121_ap_ready);

assign grp_dataflow_parent_loop_proc3_fu_108_ap_start = grp_dataflow_parent_loop_proc3_fu_108_ap_start_reg;

assign grp_dataflow_parent_loop_proc4_fu_137_ap_start = grp_dataflow_parent_loop_proc4_fu_137_ap_start_reg;

assign grp_dataflow_parent_loop_proc_fu_121_ap_start = grp_dataflow_parent_loop_proc_fu_121_ap_start_reg;


// synthesis translate_off
`include "background_loop_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //background_loop

