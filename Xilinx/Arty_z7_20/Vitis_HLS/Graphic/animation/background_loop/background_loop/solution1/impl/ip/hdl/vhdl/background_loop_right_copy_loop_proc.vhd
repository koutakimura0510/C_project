-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity background_loop_right_copy_loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    width_empty_n : IN STD_LOGIC;
    width_read : OUT STD_LOGIC;
    y_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    y_1_empty_n : IN STD_LOGIC;
    y_1_read : OUT STD_LOGIC;
    frame_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    frame_size_empty_n : IN STD_LOGIC;
    frame_size_read : OUT STD_LOGIC;
    xcopy_V1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    xcopy_V1_ce0 : OUT STD_LOGIC;
    xcopy_V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ddr_update_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ddr_update_empty_n : IN STD_LOGIC;
    ddr_update_read : OUT STD_LOGIC;
    m_axi_update_AWVALID : OUT STD_LOGIC;
    m_axi_update_AWREADY : IN STD_LOGIC;
    m_axi_update_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_update_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_WVALID : OUT STD_LOGIC;
    m_axi_update_WREADY : IN STD_LOGIC;
    m_axi_update_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_WLAST : OUT STD_LOGIC;
    m_axi_update_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_ARVALID : OUT STD_LOGIC;
    m_axi_update_ARREADY : IN STD_LOGIC;
    m_axi_update_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_update_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_update_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_update_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RVALID : IN STD_LOGIC;
    m_axi_update_RREADY : OUT STD_LOGIC;
    m_axi_update_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_update_RLAST : IN STD_LOGIC;
    m_axi_update_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_BVALID : IN STD_LOGIC;
    m_axi_update_BREADY : OUT STD_LOGIC;
    m_axi_update_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_update_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_update_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of background_loop_right_copy_loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal width_blk_n : STD_LOGIC;
    signal y_1_blk_n : STD_LOGIC;
    signal frame_size_blk_n : STD_LOGIC;
    signal ddr_update_blk_n : STD_LOGIC;
    signal update_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal update_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln878_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_264_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal update_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal x_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_read_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_read_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_size_read_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_update_read_reg_227 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal ret_reg_242 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln213_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal update_addr_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln42_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln878_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xcopy_V1_load_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln42_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln329_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_147_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln329_1_fu_158_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln329_fu_165_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln329_1_fu_171_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln329_1_fu_176_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_147_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_147_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component background_loop_mul_32ns_32ns_62_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    mul_32ns_32ns_62_2_1_U33 : component background_loop_mul_32ns_32ns_62_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_147_p0,
        din1 => grp_fu_147_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_147_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_update_BVALID = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((m_axi_update_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((m_axi_update_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_update_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_reg_130 <= ap_const_lv32_0;
            elsif (((icmp_ln878_fu_202_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_reg_130 <= add_ln42_fu_196_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln213_reg_247 <= add_ln213_fu_153_p2;
                update_addr_reg_253 <= sext_ln329_fu_186_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ddr_update_read_reg_227 <= ddr_update_dout;
                frame_size_read_reg_222 <= frame_size_dout;
                width_read_reg_212 <= width_dout;
                y_1_read_reg_217 <= y_1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln878_reg_264 <= icmp_ln878_fu_202_p2;
                icmp_ln878_reg_264_pp0_iter1_reg <= icmp_ln878_reg_264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ret_reg_242 <= grp_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                xcopy_V1_load_reg_273 <= xcopy_V1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, width_empty_n, y_1_empty_n, frame_size_empty_n, ddr_update_empty_n, m_axi_update_AWREADY, m_axi_update_BVALID, ap_CS_fsm_state5, ap_enable_reg_pp0_iter2, ap_CS_fsm_state13, ap_enable_reg_pp0_iter0, icmp_ln878_fu_202_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ddr_update_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_1_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((m_axi_update_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln878_fu_202_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln878_fu_202_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_update_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln213_fu_153_p2 <= std_logic_vector(unsigned(width_read_reg_212) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln329_1_fu_171_p2 <= std_logic_vector(unsigned(add_ln329_fu_165_p2) + unsigned(ddr_update_read_reg_227));
    add_ln329_fu_165_p2 <= std_logic_vector(unsigned(shl_ln329_1_fu_158_p3) + unsigned(ap_const_lv64_4));
    add_ln42_fu_196_p2 <= std_logic_vector(unsigned(x_reg_130) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, width_empty_n, y_1_empty_n, frame_size_empty_n, ddr_update_empty_n)
    begin
                ap_block_state1 <= ((ddr_update_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_1_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(m_axi_update_WREADY, icmp_ln878_reg_264_pp0_iter1_reg)
    begin
                ap_block_state8_io <= ((m_axi_update_WREADY = ap_const_logic_0) and (icmp_ln878_reg_264_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln878_fu_202_p2)
    begin
        if ((icmp_ln878_fu_202_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_update_BVALID, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_update_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_update_BVALID, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_update_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ddr_update_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ddr_update_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ddr_update_blk_n <= ddr_update_empty_n;
        else 
            ddr_update_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ddr_update_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, y_1_empty_n, frame_size_empty_n, ddr_update_empty_n)
    begin
        if ((not(((ddr_update_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_1_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ddr_update_read <= ap_const_logic_1;
        else 
            ddr_update_read <= ap_const_logic_0;
        end if; 
    end process;


    frame_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, frame_size_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            frame_size_blk_n <= frame_size_empty_n;
        else 
            frame_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame_size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, y_1_empty_n, frame_size_empty_n, ddr_update_empty_n)
    begin
        if ((not(((ddr_update_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_1_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            frame_size_read <= ap_const_logic_1;
        else 
            frame_size_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_147_p0 <= grp_fu_147_p00(32 - 1 downto 0);
    grp_fu_147_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_read_reg_217),62));
    grp_fu_147_p1 <= grp_fu_147_p10(32 - 1 downto 0);
    grp_fu_147_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(frame_size_read_reg_222),62));
    icmp_ln878_fu_202_p2 <= "1" when (x_reg_130 = add_ln213_reg_247) else "0";
    m_axi_update_ARADDR <= ap_const_lv64_0;
    m_axi_update_ARBURST <= ap_const_lv2_0;
    m_axi_update_ARCACHE <= ap_const_lv4_0;
    m_axi_update_ARID <= ap_const_lv1_0;
    m_axi_update_ARLEN <= ap_const_lv32_0;
    m_axi_update_ARLOCK <= ap_const_lv2_0;
    m_axi_update_ARPROT <= ap_const_lv3_0;
    m_axi_update_ARQOS <= ap_const_lv4_0;
    m_axi_update_ARREGION <= ap_const_lv4_0;
    m_axi_update_ARSIZE <= ap_const_lv3_0;
    m_axi_update_ARUSER <= ap_const_lv1_0;
    m_axi_update_ARVALID <= ap_const_logic_0;
    m_axi_update_AWADDR <= update_addr_reg_253;
    m_axi_update_AWBURST <= ap_const_lv2_0;
    m_axi_update_AWCACHE <= ap_const_lv4_0;
    m_axi_update_AWID <= ap_const_lv1_0;
    m_axi_update_AWLEN <= add_ln213_reg_247;
    m_axi_update_AWLOCK <= ap_const_lv2_0;
    m_axi_update_AWPROT <= ap_const_lv3_0;
    m_axi_update_AWQOS <= ap_const_lv4_0;
    m_axi_update_AWREGION <= ap_const_lv4_0;
    m_axi_update_AWSIZE <= ap_const_lv3_0;
    m_axi_update_AWUSER <= ap_const_lv1_0;

    m_axi_update_AWVALID_assign_proc : process(m_axi_update_AWREADY, ap_CS_fsm_state5)
    begin
        if (((m_axi_update_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_update_AWVALID <= ap_const_logic_1;
        else 
            m_axi_update_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_update_BREADY_assign_proc : process(m_axi_update_BVALID, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_update_BVALID = ap_const_logic_1))) then 
            m_axi_update_BREADY <= ap_const_logic_1;
        else 
            m_axi_update_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_update_RREADY <= ap_const_logic_0;
    m_axi_update_WDATA <= xcopy_V1_load_reg_273;
    m_axi_update_WID <= ap_const_lv1_0;
    m_axi_update_WLAST <= ap_const_logic_0;
    m_axi_update_WSTRB <= ap_const_lv4_F;
    m_axi_update_WUSER <= ap_const_lv1_0;

    m_axi_update_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln878_reg_264_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln878_reg_264_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_update_WVALID <= ap_const_logic_1;
        else 
            m_axi_update_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln329_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln329_1_fu_176_p4),64));

    shl_ln329_1_fu_158_p3 <= (ret_reg_242 & ap_const_lv2_0);
    trunc_ln329_1_fu_176_p4 <= add_ln329_1_fu_171_p2(63 downto 2);

    update_blk_n_AW_assign_proc : process(m_axi_update_AWREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            update_blk_n_AW <= m_axi_update_AWREADY;
        else 
            update_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    update_blk_n_B_assign_proc : process(m_axi_update_BVALID, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            update_blk_n_B <= m_axi_update_BVALID;
        else 
            update_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    update_blk_n_W_assign_proc : process(m_axi_update_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln878_reg_264_pp0_iter1_reg)
    begin
        if (((icmp_ln878_reg_264_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            update_blk_n_W <= m_axi_update_WREADY;
        else 
            update_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_blk_n <= width_empty_n;
        else 
            width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, y_1_empty_n, frame_size_empty_n, ddr_update_empty_n)
    begin
        if ((not(((ddr_update_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_1_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_read <= ap_const_logic_1;
        else 
            width_read <= ap_const_logic_0;
        end if; 
    end process;

    xcopy_V1_address0 <= zext_ln42_fu_207_p1(10 - 1 downto 0);

    xcopy_V1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xcopy_V1_ce0 <= ap_const_logic_1;
        else 
            xcopy_V1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, y_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_1_blk_n <= y_1_empty_n;
        else 
            y_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, y_1_empty_n, frame_size_empty_n, ddr_update_empty_n)
    begin
        if ((not(((ddr_update_empty_n = ap_const_logic_0) or (frame_size_empty_n = ap_const_logic_0) or (y_1_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_1_read <= ap_const_logic_1;
        else 
            y_1_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln42_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_130),64));
end behav;
