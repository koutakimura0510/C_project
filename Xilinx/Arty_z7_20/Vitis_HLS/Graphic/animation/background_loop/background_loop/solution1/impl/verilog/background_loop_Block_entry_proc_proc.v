// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module background_loop_Block_entry_proc_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_copy_AWVALID,
        m_axi_copy_AWREADY,
        m_axi_copy_AWADDR,
        m_axi_copy_AWID,
        m_axi_copy_AWLEN,
        m_axi_copy_AWSIZE,
        m_axi_copy_AWBURST,
        m_axi_copy_AWLOCK,
        m_axi_copy_AWCACHE,
        m_axi_copy_AWPROT,
        m_axi_copy_AWQOS,
        m_axi_copy_AWREGION,
        m_axi_copy_AWUSER,
        m_axi_copy_WVALID,
        m_axi_copy_WREADY,
        m_axi_copy_WDATA,
        m_axi_copy_WSTRB,
        m_axi_copy_WLAST,
        m_axi_copy_WID,
        m_axi_copy_WUSER,
        m_axi_copy_ARVALID,
        m_axi_copy_ARREADY,
        m_axi_copy_ARADDR,
        m_axi_copy_ARID,
        m_axi_copy_ARLEN,
        m_axi_copy_ARSIZE,
        m_axi_copy_ARBURST,
        m_axi_copy_ARLOCK,
        m_axi_copy_ARCACHE,
        m_axi_copy_ARPROT,
        m_axi_copy_ARQOS,
        m_axi_copy_ARREGION,
        m_axi_copy_ARUSER,
        m_axi_copy_RVALID,
        m_axi_copy_RREADY,
        m_axi_copy_RDATA,
        m_axi_copy_RLAST,
        m_axi_copy_RID,
        m_axi_copy_RUSER,
        m_axi_copy_RRESP,
        m_axi_copy_BVALID,
        m_axi_copy_BREADY,
        m_axi_copy_BRESP,
        m_axi_copy_BID,
        m_axi_copy_BUSER,
        trunc_ln1345,
        frame_size,
        width,
        ddr_copy,
        ycopy_V_address0,
        ycopy_V_ce0,
        ycopy_V_we0,
        ycopy_V_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_copy_AWVALID;
input   m_axi_copy_AWREADY;
output  [63:0] m_axi_copy_AWADDR;
output  [0:0] m_axi_copy_AWID;
output  [31:0] m_axi_copy_AWLEN;
output  [2:0] m_axi_copy_AWSIZE;
output  [1:0] m_axi_copy_AWBURST;
output  [1:0] m_axi_copy_AWLOCK;
output  [3:0] m_axi_copy_AWCACHE;
output  [2:0] m_axi_copy_AWPROT;
output  [3:0] m_axi_copy_AWQOS;
output  [3:0] m_axi_copy_AWREGION;
output  [0:0] m_axi_copy_AWUSER;
output   m_axi_copy_WVALID;
input   m_axi_copy_WREADY;
output  [31:0] m_axi_copy_WDATA;
output  [3:0] m_axi_copy_WSTRB;
output   m_axi_copy_WLAST;
output  [0:0] m_axi_copy_WID;
output  [0:0] m_axi_copy_WUSER;
output   m_axi_copy_ARVALID;
input   m_axi_copy_ARREADY;
output  [63:0] m_axi_copy_ARADDR;
output  [0:0] m_axi_copy_ARID;
output  [31:0] m_axi_copy_ARLEN;
output  [2:0] m_axi_copy_ARSIZE;
output  [1:0] m_axi_copy_ARBURST;
output  [1:0] m_axi_copy_ARLOCK;
output  [3:0] m_axi_copy_ARCACHE;
output  [2:0] m_axi_copy_ARPROT;
output  [3:0] m_axi_copy_ARQOS;
output  [3:0] m_axi_copy_ARREGION;
output  [0:0] m_axi_copy_ARUSER;
input   m_axi_copy_RVALID;
output   m_axi_copy_RREADY;
input  [31:0] m_axi_copy_RDATA;
input   m_axi_copy_RLAST;
input  [0:0] m_axi_copy_RID;
input  [0:0] m_axi_copy_RUSER;
input  [1:0] m_axi_copy_RRESP;
input   m_axi_copy_BVALID;
output   m_axi_copy_BREADY;
input  [1:0] m_axi_copy_BRESP;
input  [0:0] m_axi_copy_BID;
input  [0:0] m_axi_copy_BUSER;
input  [31:0] trunc_ln1345;
input  [31:0] frame_size;
input  [31:0] width;
input  [63:0] ddr_copy;
output  [9:0] ycopy_V_address0;
output   ycopy_V_ce0;
output   ycopy_V_we0;
output  [31:0] ycopy_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_copy_ARVALID;
reg m_axi_copy_RREADY;
reg ycopy_V_ce0;
reg ycopy_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    copy_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    copy_blk_n_R;
wire    ap_CS_fsm_state11;
wire   [61:0] grp_fu_111_p2;
reg   [61:0] mul_ln534_reg_184;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln213_fu_117_p2;
reg   [31:0] add_ln213_reg_189;
reg   [63:0] copy_addr_reg_194;
wire    ap_CS_fsm_state3;
reg   [31:0] copy_addr_read_reg_200;
wire   [63:0] zext_ln29_fu_165_p1;
wire    ap_CS_fsm_state12;
wire  signed [63:0] sext_ln324_fu_155_p1;
reg    ap_block_state1;
wire   [31:0] grp_fu_111_p0;
wire   [31:0] grp_fu_111_p1;
wire   [61:0] zext_ln534_1_fu_123_p1;
wire   [61:0] add_ln324_1_fu_126_p2;
wire   [63:0] shl_ln_fu_131_p3;
wire   [63:0] add_ln324_fu_139_p2;
wire   [61:0] trunc_ln_fu_145_p4;
reg    grp_fu_111_ce;
reg   [11:0] ap_NS_fsm;
wire   [61:0] grp_fu_111_p00;
wire   [61:0] grp_fu_111_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
end

background_loop_mul_32ns_32ns_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_32ns_32ns_62_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_111_p0),
    .din1(grp_fu_111_p1),
    .ce(grp_fu_111_ce),
    .dout(grp_fu_111_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln213_reg_189 <= add_ln213_fu_117_p2;
        mul_ln534_reg_184 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        copy_addr_read_reg_200 <= m_axi_copy_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        copy_addr_reg_194 <= sext_ln324_fu_155_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        copy_blk_n_AR = m_axi_copy_ARREADY;
    end else begin
        copy_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        copy_blk_n_R = m_axi_copy_RVALID;
    end else begin
        copy_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_111_ce = 1'b1;
    end else begin
        grp_fu_111_ce = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_copy_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_copy_ARVALID = 1'b1;
    end else begin
        m_axi_copy_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_copy_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_copy_RREADY = 1'b1;
    end else begin
        m_axi_copy_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ycopy_V_ce0 = 1'b1;
    end else begin
        ycopy_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ycopy_V_we0 = 1'b1;
    end else begin
        ycopy_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_copy_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_copy_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln213_fu_117_p2 = ($signed(width) + $signed(32'd4294967295));

assign add_ln324_1_fu_126_p2 = (mul_ln534_reg_184 + zext_ln534_1_fu_123_p1);

assign add_ln324_fu_139_p2 = (shl_ln_fu_131_p3 + ddr_copy);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_fu_111_p0 = grp_fu_111_p00;

assign grp_fu_111_p00 = trunc_ln1345;

assign grp_fu_111_p1 = grp_fu_111_p10;

assign grp_fu_111_p10 = frame_size;

assign m_axi_copy_ARADDR = copy_addr_reg_194;

assign m_axi_copy_ARBURST = 2'd0;

assign m_axi_copy_ARCACHE = 4'd0;

assign m_axi_copy_ARID = 1'd0;

assign m_axi_copy_ARLEN = 32'd1;

assign m_axi_copy_ARLOCK = 2'd0;

assign m_axi_copy_ARPROT = 3'd0;

assign m_axi_copy_ARQOS = 4'd0;

assign m_axi_copy_ARREGION = 4'd0;

assign m_axi_copy_ARSIZE = 3'd0;

assign m_axi_copy_ARUSER = 1'd0;

assign m_axi_copy_AWADDR = 64'd0;

assign m_axi_copy_AWBURST = 2'd0;

assign m_axi_copy_AWCACHE = 4'd0;

assign m_axi_copy_AWID = 1'd0;

assign m_axi_copy_AWLEN = 32'd0;

assign m_axi_copy_AWLOCK = 2'd0;

assign m_axi_copy_AWPROT = 3'd0;

assign m_axi_copy_AWQOS = 4'd0;

assign m_axi_copy_AWREGION = 4'd0;

assign m_axi_copy_AWSIZE = 3'd0;

assign m_axi_copy_AWUSER = 1'd0;

assign m_axi_copy_AWVALID = 1'b0;

assign m_axi_copy_BREADY = 1'b0;

assign m_axi_copy_WDATA = 32'd0;

assign m_axi_copy_WID = 1'd0;

assign m_axi_copy_WLAST = 1'b0;

assign m_axi_copy_WSTRB = 4'd0;

assign m_axi_copy_WUSER = 1'd0;

assign m_axi_copy_WVALID = 1'b0;

assign sext_ln324_fu_155_p1 = $signed(trunc_ln_fu_145_p4);

assign shl_ln_fu_131_p3 = {{add_ln324_1_fu_126_p2}, {2'd0}};

assign trunc_ln_fu_145_p4 = {{add_ln324_fu_139_p2[63:2]}};

assign ycopy_V_address0 = zext_ln29_fu_165_p1;

assign ycopy_V_d0 = copy_addr_read_reg_200;

assign zext_ln29_fu_165_p1 = trunc_ln1345;

assign zext_ln534_1_fu_123_p1 = add_ln213_reg_189;

endmodule //background_loop_Block_entry_proc_proc
