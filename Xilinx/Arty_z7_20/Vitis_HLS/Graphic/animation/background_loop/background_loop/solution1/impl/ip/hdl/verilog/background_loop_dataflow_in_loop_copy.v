// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module background_loop_dataflow_in_loop_copy (
        m_axi_copy_AWVALID,
        m_axi_copy_AWREADY,
        m_axi_copy_AWADDR,
        m_axi_copy_AWID,
        m_axi_copy_AWLEN,
        m_axi_copy_AWSIZE,
        m_axi_copy_AWBURST,
        m_axi_copy_AWLOCK,
        m_axi_copy_AWCACHE,
        m_axi_copy_AWPROT,
        m_axi_copy_AWQOS,
        m_axi_copy_AWREGION,
        m_axi_copy_AWUSER,
        m_axi_copy_WVALID,
        m_axi_copy_WREADY,
        m_axi_copy_WDATA,
        m_axi_copy_WSTRB,
        m_axi_copy_WLAST,
        m_axi_copy_WID,
        m_axi_copy_WUSER,
        m_axi_copy_ARVALID,
        m_axi_copy_ARREADY,
        m_axi_copy_ARADDR,
        m_axi_copy_ARID,
        m_axi_copy_ARLEN,
        m_axi_copy_ARSIZE,
        m_axi_copy_ARBURST,
        m_axi_copy_ARLOCK,
        m_axi_copy_ARCACHE,
        m_axi_copy_ARPROT,
        m_axi_copy_ARQOS,
        m_axi_copy_ARREGION,
        m_axi_copy_ARUSER,
        m_axi_copy_RVALID,
        m_axi_copy_RREADY,
        m_axi_copy_RDATA,
        m_axi_copy_RLAST,
        m_axi_copy_RID,
        m_axi_copy_RUSER,
        m_axi_copy_RRESP,
        m_axi_copy_BVALID,
        m_axi_copy_BREADY,
        m_axi_copy_BRESP,
        m_axi_copy_BID,
        m_axi_copy_BUSER,
        trunc_ln1345,
        frame_size,
        width,
        ddr_copy,
        ycopy_V_address0,
        ycopy_V_ce0,
        ycopy_V_d0,
        ycopy_V_q0,
        ycopy_V_we0,
        ycopy_V_address1,
        ycopy_V_ce1,
        ycopy_V_d1,
        ycopy_V_q1,
        ycopy_V_we1,
        ap_clk,
        ap_rst,
        trunc_ln1345_ap_vld,
        frame_size_ap_vld,
        width_ap_vld,
        ddr_copy_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output   m_axi_copy_AWVALID;
input   m_axi_copy_AWREADY;
output  [63:0] m_axi_copy_AWADDR;
output  [0:0] m_axi_copy_AWID;
output  [31:0] m_axi_copy_AWLEN;
output  [2:0] m_axi_copy_AWSIZE;
output  [1:0] m_axi_copy_AWBURST;
output  [1:0] m_axi_copy_AWLOCK;
output  [3:0] m_axi_copy_AWCACHE;
output  [2:0] m_axi_copy_AWPROT;
output  [3:0] m_axi_copy_AWQOS;
output  [3:0] m_axi_copy_AWREGION;
output  [0:0] m_axi_copy_AWUSER;
output   m_axi_copy_WVALID;
input   m_axi_copy_WREADY;
output  [31:0] m_axi_copy_WDATA;
output  [3:0] m_axi_copy_WSTRB;
output   m_axi_copy_WLAST;
output  [0:0] m_axi_copy_WID;
output  [0:0] m_axi_copy_WUSER;
output   m_axi_copy_ARVALID;
input   m_axi_copy_ARREADY;
output  [63:0] m_axi_copy_ARADDR;
output  [0:0] m_axi_copy_ARID;
output  [31:0] m_axi_copy_ARLEN;
output  [2:0] m_axi_copy_ARSIZE;
output  [1:0] m_axi_copy_ARBURST;
output  [1:0] m_axi_copy_ARLOCK;
output  [3:0] m_axi_copy_ARCACHE;
output  [2:0] m_axi_copy_ARPROT;
output  [3:0] m_axi_copy_ARQOS;
output  [3:0] m_axi_copy_ARREGION;
output  [0:0] m_axi_copy_ARUSER;
input   m_axi_copy_RVALID;
output   m_axi_copy_RREADY;
input  [31:0] m_axi_copy_RDATA;
input   m_axi_copy_RLAST;
input  [0:0] m_axi_copy_RID;
input  [0:0] m_axi_copy_RUSER;
input  [1:0] m_axi_copy_RRESP;
input   m_axi_copy_BVALID;
output   m_axi_copy_BREADY;
input  [1:0] m_axi_copy_BRESP;
input  [0:0] m_axi_copy_BID;
input  [0:0] m_axi_copy_BUSER;
input  [31:0] trunc_ln1345;
input  [31:0] frame_size;
input  [31:0] width;
input  [63:0] ddr_copy;
output  [9:0] ycopy_V_address0;
output   ycopy_V_ce0;
output  [31:0] ycopy_V_d0;
input  [31:0] ycopy_V_q0;
output   ycopy_V_we0;
output  [9:0] ycopy_V_address1;
output   ycopy_V_ce1;
output  [31:0] ycopy_V_d1;
input  [31:0] ycopy_V_q1;
output   ycopy_V_we1;
input   ap_clk;
input   ap_rst;
input   trunc_ln1345_ap_vld;
input   frame_size_ap_vld;
input   width_ap_vld;
input   ddr_copy_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    Block_entry_proc_proc_U0_ap_start;
wire    Block_entry_proc_proc_U0_ap_done;
wire    Block_entry_proc_proc_U0_ap_continue;
wire    Block_entry_proc_proc_U0_ap_idle;
wire    Block_entry_proc_proc_U0_ap_ready;
wire    Block_entry_proc_proc_U0_m_axi_copy_AWVALID;
wire   [63:0] Block_entry_proc_proc_U0_m_axi_copy_AWADDR;
wire   [0:0] Block_entry_proc_proc_U0_m_axi_copy_AWID;
wire   [31:0] Block_entry_proc_proc_U0_m_axi_copy_AWLEN;
wire   [2:0] Block_entry_proc_proc_U0_m_axi_copy_AWSIZE;
wire   [1:0] Block_entry_proc_proc_U0_m_axi_copy_AWBURST;
wire   [1:0] Block_entry_proc_proc_U0_m_axi_copy_AWLOCK;
wire   [3:0] Block_entry_proc_proc_U0_m_axi_copy_AWCACHE;
wire   [2:0] Block_entry_proc_proc_U0_m_axi_copy_AWPROT;
wire   [3:0] Block_entry_proc_proc_U0_m_axi_copy_AWQOS;
wire   [3:0] Block_entry_proc_proc_U0_m_axi_copy_AWREGION;
wire   [0:0] Block_entry_proc_proc_U0_m_axi_copy_AWUSER;
wire    Block_entry_proc_proc_U0_m_axi_copy_WVALID;
wire   [31:0] Block_entry_proc_proc_U0_m_axi_copy_WDATA;
wire   [3:0] Block_entry_proc_proc_U0_m_axi_copy_WSTRB;
wire    Block_entry_proc_proc_U0_m_axi_copy_WLAST;
wire   [0:0] Block_entry_proc_proc_U0_m_axi_copy_WID;
wire   [0:0] Block_entry_proc_proc_U0_m_axi_copy_WUSER;
wire    Block_entry_proc_proc_U0_m_axi_copy_ARVALID;
wire   [63:0] Block_entry_proc_proc_U0_m_axi_copy_ARADDR;
wire   [0:0] Block_entry_proc_proc_U0_m_axi_copy_ARID;
wire   [31:0] Block_entry_proc_proc_U0_m_axi_copy_ARLEN;
wire   [2:0] Block_entry_proc_proc_U0_m_axi_copy_ARSIZE;
wire   [1:0] Block_entry_proc_proc_U0_m_axi_copy_ARBURST;
wire   [1:0] Block_entry_proc_proc_U0_m_axi_copy_ARLOCK;
wire   [3:0] Block_entry_proc_proc_U0_m_axi_copy_ARCACHE;
wire   [2:0] Block_entry_proc_proc_U0_m_axi_copy_ARPROT;
wire   [3:0] Block_entry_proc_proc_U0_m_axi_copy_ARQOS;
wire   [3:0] Block_entry_proc_proc_U0_m_axi_copy_ARREGION;
wire   [0:0] Block_entry_proc_proc_U0_m_axi_copy_ARUSER;
wire    Block_entry_proc_proc_U0_m_axi_copy_RREADY;
wire    Block_entry_proc_proc_U0_m_axi_copy_BREADY;
wire   [9:0] Block_entry_proc_proc_U0_ycopy_V_address0;
wire    Block_entry_proc_proc_U0_ycopy_V_ce0;
wire    Block_entry_proc_proc_U0_ycopy_V_we0;
wire   [31:0] Block_entry_proc_proc_U0_ycopy_V_d0;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    Block_entry_proc_proc_U0_start_full_n;
wire    Block_entry_proc_proc_U0_start_write;

background_loop_Block_entry_proc_proc Block_entry_proc_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry_proc_proc_U0_ap_start),
    .ap_done(Block_entry_proc_proc_U0_ap_done),
    .ap_continue(Block_entry_proc_proc_U0_ap_continue),
    .ap_idle(Block_entry_proc_proc_U0_ap_idle),
    .ap_ready(Block_entry_proc_proc_U0_ap_ready),
    .m_axi_copy_AWVALID(Block_entry_proc_proc_U0_m_axi_copy_AWVALID),
    .m_axi_copy_AWREADY(1'b0),
    .m_axi_copy_AWADDR(Block_entry_proc_proc_U0_m_axi_copy_AWADDR),
    .m_axi_copy_AWID(Block_entry_proc_proc_U0_m_axi_copy_AWID),
    .m_axi_copy_AWLEN(Block_entry_proc_proc_U0_m_axi_copy_AWLEN),
    .m_axi_copy_AWSIZE(Block_entry_proc_proc_U0_m_axi_copy_AWSIZE),
    .m_axi_copy_AWBURST(Block_entry_proc_proc_U0_m_axi_copy_AWBURST),
    .m_axi_copy_AWLOCK(Block_entry_proc_proc_U0_m_axi_copy_AWLOCK),
    .m_axi_copy_AWCACHE(Block_entry_proc_proc_U0_m_axi_copy_AWCACHE),
    .m_axi_copy_AWPROT(Block_entry_proc_proc_U0_m_axi_copy_AWPROT),
    .m_axi_copy_AWQOS(Block_entry_proc_proc_U0_m_axi_copy_AWQOS),
    .m_axi_copy_AWREGION(Block_entry_proc_proc_U0_m_axi_copy_AWREGION),
    .m_axi_copy_AWUSER(Block_entry_proc_proc_U0_m_axi_copy_AWUSER),
    .m_axi_copy_WVALID(Block_entry_proc_proc_U0_m_axi_copy_WVALID),
    .m_axi_copy_WREADY(1'b0),
    .m_axi_copy_WDATA(Block_entry_proc_proc_U0_m_axi_copy_WDATA),
    .m_axi_copy_WSTRB(Block_entry_proc_proc_U0_m_axi_copy_WSTRB),
    .m_axi_copy_WLAST(Block_entry_proc_proc_U0_m_axi_copy_WLAST),
    .m_axi_copy_WID(Block_entry_proc_proc_U0_m_axi_copy_WID),
    .m_axi_copy_WUSER(Block_entry_proc_proc_U0_m_axi_copy_WUSER),
    .m_axi_copy_ARVALID(Block_entry_proc_proc_U0_m_axi_copy_ARVALID),
    .m_axi_copy_ARREADY(m_axi_copy_ARREADY),
    .m_axi_copy_ARADDR(Block_entry_proc_proc_U0_m_axi_copy_ARADDR),
    .m_axi_copy_ARID(Block_entry_proc_proc_U0_m_axi_copy_ARID),
    .m_axi_copy_ARLEN(Block_entry_proc_proc_U0_m_axi_copy_ARLEN),
    .m_axi_copy_ARSIZE(Block_entry_proc_proc_U0_m_axi_copy_ARSIZE),
    .m_axi_copy_ARBURST(Block_entry_proc_proc_U0_m_axi_copy_ARBURST),
    .m_axi_copy_ARLOCK(Block_entry_proc_proc_U0_m_axi_copy_ARLOCK),
    .m_axi_copy_ARCACHE(Block_entry_proc_proc_U0_m_axi_copy_ARCACHE),
    .m_axi_copy_ARPROT(Block_entry_proc_proc_U0_m_axi_copy_ARPROT),
    .m_axi_copy_ARQOS(Block_entry_proc_proc_U0_m_axi_copy_ARQOS),
    .m_axi_copy_ARREGION(Block_entry_proc_proc_U0_m_axi_copy_ARREGION),
    .m_axi_copy_ARUSER(Block_entry_proc_proc_U0_m_axi_copy_ARUSER),
    .m_axi_copy_RVALID(m_axi_copy_RVALID),
    .m_axi_copy_RREADY(Block_entry_proc_proc_U0_m_axi_copy_RREADY),
    .m_axi_copy_RDATA(m_axi_copy_RDATA),
    .m_axi_copy_RLAST(m_axi_copy_RLAST),
    .m_axi_copy_RID(m_axi_copy_RID),
    .m_axi_copy_RUSER(m_axi_copy_RUSER),
    .m_axi_copy_RRESP(m_axi_copy_RRESP),
    .m_axi_copy_BVALID(1'b0),
    .m_axi_copy_BREADY(Block_entry_proc_proc_U0_m_axi_copy_BREADY),
    .m_axi_copy_BRESP(2'd0),
    .m_axi_copy_BID(1'd0),
    .m_axi_copy_BUSER(1'd0),
    .trunc_ln1345(trunc_ln1345),
    .frame_size(frame_size),
    .width(width),
    .ddr_copy(ddr_copy),
    .ycopy_V_address0(Block_entry_proc_proc_U0_ycopy_V_address0),
    .ycopy_V_ce0(Block_entry_proc_proc_U0_ycopy_V_ce0),
    .ycopy_V_we0(Block_entry_proc_proc_U0_ycopy_V_we0),
    .ycopy_V_d0(Block_entry_proc_proc_U0_ycopy_V_d0)
);

assign Block_entry_proc_proc_U0_ap_continue = ap_continue;

assign Block_entry_proc_proc_U0_ap_start = ap_start;

assign Block_entry_proc_proc_U0_start_full_n = 1'b1;

assign Block_entry_proc_proc_U0_start_write = 1'b0;

assign ap_done = Block_entry_proc_proc_U0_ap_done;

assign ap_idle = Block_entry_proc_proc_U0_ap_idle;

assign ap_ready = Block_entry_proc_proc_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = Block_entry_proc_proc_U0_ap_done;

assign ap_sync_ready = Block_entry_proc_proc_U0_ap_ready;

assign m_axi_copy_ARADDR = Block_entry_proc_proc_U0_m_axi_copy_ARADDR;

assign m_axi_copy_ARBURST = Block_entry_proc_proc_U0_m_axi_copy_ARBURST;

assign m_axi_copy_ARCACHE = Block_entry_proc_proc_U0_m_axi_copy_ARCACHE;

assign m_axi_copy_ARID = Block_entry_proc_proc_U0_m_axi_copy_ARID;

assign m_axi_copy_ARLEN = Block_entry_proc_proc_U0_m_axi_copy_ARLEN;

assign m_axi_copy_ARLOCK = Block_entry_proc_proc_U0_m_axi_copy_ARLOCK;

assign m_axi_copy_ARPROT = Block_entry_proc_proc_U0_m_axi_copy_ARPROT;

assign m_axi_copy_ARQOS = Block_entry_proc_proc_U0_m_axi_copy_ARQOS;

assign m_axi_copy_ARREGION = Block_entry_proc_proc_U0_m_axi_copy_ARREGION;

assign m_axi_copy_ARSIZE = Block_entry_proc_proc_U0_m_axi_copy_ARSIZE;

assign m_axi_copy_ARUSER = Block_entry_proc_proc_U0_m_axi_copy_ARUSER;

assign m_axi_copy_ARVALID = Block_entry_proc_proc_U0_m_axi_copy_ARVALID;

assign m_axi_copy_AWADDR = 64'd0;

assign m_axi_copy_AWBURST = 2'd0;

assign m_axi_copy_AWCACHE = 4'd0;

assign m_axi_copy_AWID = 1'd0;

assign m_axi_copy_AWLEN = 32'd0;

assign m_axi_copy_AWLOCK = 2'd0;

assign m_axi_copy_AWPROT = 3'd0;

assign m_axi_copy_AWQOS = 4'd0;

assign m_axi_copy_AWREGION = 4'd0;

assign m_axi_copy_AWSIZE = 3'd0;

assign m_axi_copy_AWUSER = 1'd0;

assign m_axi_copy_AWVALID = 1'b0;

assign m_axi_copy_BREADY = 1'b0;

assign m_axi_copy_RREADY = Block_entry_proc_proc_U0_m_axi_copy_RREADY;

assign m_axi_copy_WDATA = 32'd0;

assign m_axi_copy_WID = 1'd0;

assign m_axi_copy_WLAST = 1'b0;

assign m_axi_copy_WSTRB = 4'd0;

assign m_axi_copy_WUSER = 1'd0;

assign m_axi_copy_WVALID = 1'b0;

assign ycopy_V_address0 = Block_entry_proc_proc_U0_ycopy_V_address0;

assign ycopy_V_address1 = 10'd0;

assign ycopy_V_ce0 = Block_entry_proc_proc_U0_ycopy_V_ce0;

assign ycopy_V_ce1 = 1'b0;

assign ycopy_V_d0 = Block_entry_proc_proc_U0_ycopy_V_d0;

assign ycopy_V_d1 = 32'd0;

assign ycopy_V_we0 = Block_entry_proc_proc_U0_ycopy_V_we0;

assign ycopy_V_we1 = 1'b0;

endmodule //background_loop_dataflow_in_loop_copy
