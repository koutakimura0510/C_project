-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity background_loop_Block_entry_proc_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_copy_AWVALID : OUT STD_LOGIC;
    m_axi_copy_AWREADY : IN STD_LOGIC;
    m_axi_copy_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_copy_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_copy_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_WVALID : OUT STD_LOGIC;
    m_axi_copy_WREADY : IN STD_LOGIC;
    m_axi_copy_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_copy_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_WLAST : OUT STD_LOGIC;
    m_axi_copy_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_ARVALID : OUT STD_LOGIC;
    m_axi_copy_ARREADY : IN STD_LOGIC;
    m_axi_copy_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_copy_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_copy_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_copy_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_copy_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_RVALID : IN STD_LOGIC;
    m_axi_copy_RREADY : OUT STD_LOGIC;
    m_axi_copy_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_copy_RLAST : IN STD_LOGIC;
    m_axi_copy_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_BVALID : IN STD_LOGIC;
    m_axi_copy_BREADY : OUT STD_LOGIC;
    m_axi_copy_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_copy_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_copy_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    trunc_ln1345 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame_size : IN STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    ddr_copy : IN STD_LOGIC_VECTOR (63 downto 0);
    ycopy_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ycopy_V_ce0 : OUT STD_LOGIC;
    ycopy_V_we0 : OUT STD_LOGIC;
    ycopy_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of background_loop_Block_entry_proc_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal copy_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal copy_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln534_reg_184 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln213_fu_117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_addr_reg_194 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal copy_addr_read_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sext_ln324_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_111_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln534_1_fu_123_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln324_1_fu_126_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln_fu_131_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln324_fu_139_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_145_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_111_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_111_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_111_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component background_loop_mul_32ns_32ns_62_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    mul_32ns_32ns_62_2_1_U1 : component background_loop_mul_32ns_32ns_62_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_111_p0,
        din1 => grp_fu_111_p1,
        ce => grp_fu_111_ce,
        dout => grp_fu_111_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln213_reg_189 <= add_ln213_fu_117_p2;
                mul_ln534_reg_184 <= grp_fu_111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                copy_addr_read_reg_200 <= m_axi_copy_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                copy_addr_reg_194 <= sext_ln324_fu_155_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_copy_ARREADY, m_axi_copy_RVALID, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((m_axi_copy_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((m_axi_copy_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln213_fu_117_p2 <= std_logic_vector(unsigned(width) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln324_1_fu_126_p2 <= std_logic_vector(unsigned(mul_ln534_reg_184) + unsigned(zext_ln534_1_fu_123_p1));
    add_ln324_fu_139_p2 <= std_logic_vector(unsigned(shl_ln_fu_131_p3) + unsigned(ddr_copy));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    copy_blk_n_AR_assign_proc : process(m_axi_copy_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            copy_blk_n_AR <= m_axi_copy_ARREADY;
        else 
            copy_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    copy_blk_n_R_assign_proc : process(m_axi_copy_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            copy_blk_n_R <= m_axi_copy_RVALID;
        else 
            copy_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_111_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_111_ce <= ap_const_logic_1;
        else 
            grp_fu_111_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_111_p0 <= grp_fu_111_p00(32 - 1 downto 0);
    grp_fu_111_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1345),62));
    grp_fu_111_p1 <= grp_fu_111_p10(32 - 1 downto 0);
    grp_fu_111_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(frame_size),62));
    m_axi_copy_ARADDR <= copy_addr_reg_194;
    m_axi_copy_ARBURST <= ap_const_lv2_0;
    m_axi_copy_ARCACHE <= ap_const_lv4_0;
    m_axi_copy_ARID <= ap_const_lv1_0;
    m_axi_copy_ARLEN <= ap_const_lv32_1;
    m_axi_copy_ARLOCK <= ap_const_lv2_0;
    m_axi_copy_ARPROT <= ap_const_lv3_0;
    m_axi_copy_ARQOS <= ap_const_lv4_0;
    m_axi_copy_ARREGION <= ap_const_lv4_0;
    m_axi_copy_ARSIZE <= ap_const_lv3_0;
    m_axi_copy_ARUSER <= ap_const_lv1_0;

    m_axi_copy_ARVALID_assign_proc : process(m_axi_copy_ARREADY, ap_CS_fsm_state4)
    begin
        if (((m_axi_copy_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_copy_ARVALID <= ap_const_logic_1;
        else 
            m_axi_copy_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_copy_AWADDR <= ap_const_lv64_0;
    m_axi_copy_AWBURST <= ap_const_lv2_0;
    m_axi_copy_AWCACHE <= ap_const_lv4_0;
    m_axi_copy_AWID <= ap_const_lv1_0;
    m_axi_copy_AWLEN <= ap_const_lv32_0;
    m_axi_copy_AWLOCK <= ap_const_lv2_0;
    m_axi_copy_AWPROT <= ap_const_lv3_0;
    m_axi_copy_AWQOS <= ap_const_lv4_0;
    m_axi_copy_AWREGION <= ap_const_lv4_0;
    m_axi_copy_AWSIZE <= ap_const_lv3_0;
    m_axi_copy_AWUSER <= ap_const_lv1_0;
    m_axi_copy_AWVALID <= ap_const_logic_0;
    m_axi_copy_BREADY <= ap_const_logic_0;

    m_axi_copy_RREADY_assign_proc : process(m_axi_copy_RVALID, ap_CS_fsm_state11)
    begin
        if (((m_axi_copy_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_copy_RREADY <= ap_const_logic_1;
        else 
            m_axi_copy_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_copy_WDATA <= ap_const_lv32_0;
    m_axi_copy_WID <= ap_const_lv1_0;
    m_axi_copy_WLAST <= ap_const_logic_0;
    m_axi_copy_WSTRB <= ap_const_lv4_0;
    m_axi_copy_WUSER <= ap_const_lv1_0;
    m_axi_copy_WVALID <= ap_const_logic_0;
        sext_ln324_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_145_p4),64));

    shl_ln_fu_131_p3 <= (add_ln324_1_fu_126_p2 & ap_const_lv2_0);
    trunc_ln_fu_145_p4 <= add_ln324_fu_139_p2(63 downto 2);
    ycopy_V_address0 <= zext_ln29_fu_165_p1(10 - 1 downto 0);

    ycopy_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ycopy_V_ce0 <= ap_const_logic_1;
        else 
            ycopy_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ycopy_V_d0 <= copy_addr_read_reg_200;

    ycopy_V_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ycopy_V_we0 <= ap_const_logic_1;
        else 
            ycopy_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln29_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1345),64));
    zext_ln534_1_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln213_reg_189),62));
end behav;
