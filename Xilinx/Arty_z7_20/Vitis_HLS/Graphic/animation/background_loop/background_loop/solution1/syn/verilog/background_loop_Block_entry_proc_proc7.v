// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module background_loop_Block_entry_proc_proc7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ycopy_V_address0,
        ycopy_V_ce0,
        ycopy_V_q0,
        trunc_ln329,
        m_axi_update_AWVALID,
        m_axi_update_AWREADY,
        m_axi_update_AWADDR,
        m_axi_update_AWID,
        m_axi_update_AWLEN,
        m_axi_update_AWSIZE,
        m_axi_update_AWBURST,
        m_axi_update_AWLOCK,
        m_axi_update_AWCACHE,
        m_axi_update_AWPROT,
        m_axi_update_AWQOS,
        m_axi_update_AWREGION,
        m_axi_update_AWUSER,
        m_axi_update_WVALID,
        m_axi_update_WREADY,
        m_axi_update_WDATA,
        m_axi_update_WSTRB,
        m_axi_update_WLAST,
        m_axi_update_WID,
        m_axi_update_WUSER,
        m_axi_update_ARVALID,
        m_axi_update_ARREADY,
        m_axi_update_ARADDR,
        m_axi_update_ARID,
        m_axi_update_ARLEN,
        m_axi_update_ARSIZE,
        m_axi_update_ARBURST,
        m_axi_update_ARLOCK,
        m_axi_update_ARCACHE,
        m_axi_update_ARPROT,
        m_axi_update_ARQOS,
        m_axi_update_ARREGION,
        m_axi_update_ARUSER,
        m_axi_update_RVALID,
        m_axi_update_RREADY,
        m_axi_update_RDATA,
        m_axi_update_RLAST,
        m_axi_update_RID,
        m_axi_update_RUSER,
        m_axi_update_RRESP,
        m_axi_update_BVALID,
        m_axi_update_BREADY,
        m_axi_update_BRESP,
        m_axi_update_BID,
        m_axi_update_BUSER,
        frame_size,
        ddr_update
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] ycopy_V_address0;
output   ycopy_V_ce0;
input  [31:0] ycopy_V_q0;
input  [31:0] trunc_ln329;
output   m_axi_update_AWVALID;
input   m_axi_update_AWREADY;
output  [63:0] m_axi_update_AWADDR;
output  [0:0] m_axi_update_AWID;
output  [31:0] m_axi_update_AWLEN;
output  [2:0] m_axi_update_AWSIZE;
output  [1:0] m_axi_update_AWBURST;
output  [1:0] m_axi_update_AWLOCK;
output  [3:0] m_axi_update_AWCACHE;
output  [2:0] m_axi_update_AWPROT;
output  [3:0] m_axi_update_AWQOS;
output  [3:0] m_axi_update_AWREGION;
output  [0:0] m_axi_update_AWUSER;
output   m_axi_update_WVALID;
input   m_axi_update_WREADY;
output  [31:0] m_axi_update_WDATA;
output  [3:0] m_axi_update_WSTRB;
output   m_axi_update_WLAST;
output  [0:0] m_axi_update_WID;
output  [0:0] m_axi_update_WUSER;
output   m_axi_update_ARVALID;
input   m_axi_update_ARREADY;
output  [63:0] m_axi_update_ARADDR;
output  [0:0] m_axi_update_ARID;
output  [31:0] m_axi_update_ARLEN;
output  [2:0] m_axi_update_ARSIZE;
output  [1:0] m_axi_update_ARBURST;
output  [1:0] m_axi_update_ARLOCK;
output  [3:0] m_axi_update_ARCACHE;
output  [2:0] m_axi_update_ARPROT;
output  [3:0] m_axi_update_ARQOS;
output  [3:0] m_axi_update_ARREGION;
output  [0:0] m_axi_update_ARUSER;
input   m_axi_update_RVALID;
output   m_axi_update_RREADY;
input  [31:0] m_axi_update_RDATA;
input   m_axi_update_RLAST;
input  [0:0] m_axi_update_RID;
input  [0:0] m_axi_update_RUSER;
input  [1:0] m_axi_update_RRESP;
input   m_axi_update_BVALID;
output   m_axi_update_BREADY;
input  [1:0] m_axi_update_BRESP;
input  [0:0] m_axi_update_BID;
input  [0:0] m_axi_update_BUSER;
input  [31:0] frame_size;
input  [63:0] ddr_update;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ycopy_V_ce0;
reg m_axi_update_AWVALID;
reg m_axi_update_WVALID;
reg m_axi_update_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    update_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    update_blk_n_W;
wire    ap_CS_fsm_state5;
reg    update_blk_n_B;
wire    ap_CS_fsm_state10;
wire   [61:0] grp_fu_109_p2;
reg   [61:0] mul_ln329_reg_167;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [63:0] update_addr_reg_177;
reg   [31:0] ycopy_V_load_reg_183;
wire   [63:0] zext_ln48_fu_115_p1;
wire  signed [63:0] sext_ln329_fu_142_p1;
reg    ap_block_state1;
wire   [31:0] grp_fu_109_p0;
wire   [31:0] grp_fu_109_p1;
wire   [63:0] shl_ln_fu_119_p3;
wire   [63:0] add_ln329_fu_126_p2;
wire   [61:0] trunc_ln329_1_fu_132_p4;
reg    grp_fu_109_ce;
reg   [9:0] ap_NS_fsm;
wire   [61:0] grp_fu_109_p00;
wire   [61:0] grp_fu_109_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
end

background_loop_mul_32ns_32ns_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_32ns_32ns_62_2_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_109_p0),
    .din1(grp_fu_109_p1),
    .ce(grp_fu_109_ce),
    .dout(grp_fu_109_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_update_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln329_reg_167 <= grp_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        update_addr_reg_177 <= sext_ln329_fu_142_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ycopy_V_load_reg_183 <= ycopy_V_q0;
    end
end

always @ (*) begin
    if (((m_axi_update_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_update_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_109_ce = 1'b1;
    end else begin
        grp_fu_109_ce = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_update_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_update_AWVALID = 1'b1;
    end else begin
        m_axi_update_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_update_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_update_BREADY = 1'b1;
    end else begin
        m_axi_update_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_update_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_update_WVALID = 1'b1;
    end else begin
        m_axi_update_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        update_blk_n_AW = m_axi_update_AWREADY;
    end else begin
        update_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        update_blk_n_B = m_axi_update_BVALID;
    end else begin
        update_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        update_blk_n_W = m_axi_update_WREADY;
    end else begin
        update_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ycopy_V_ce0 = 1'b1;
    end else begin
        ycopy_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_update_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_update_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_update_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln329_fu_126_p2 = (shl_ln_fu_119_p3 + ddr_update);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_fu_109_p0 = grp_fu_109_p00;

assign grp_fu_109_p00 = frame_size;

assign grp_fu_109_p1 = grp_fu_109_p10;

assign grp_fu_109_p10 = trunc_ln329;

assign m_axi_update_ARADDR = 64'd0;

assign m_axi_update_ARBURST = 2'd0;

assign m_axi_update_ARCACHE = 4'd0;

assign m_axi_update_ARID = 1'd0;

assign m_axi_update_ARLEN = 32'd0;

assign m_axi_update_ARLOCK = 2'd0;

assign m_axi_update_ARPROT = 3'd0;

assign m_axi_update_ARQOS = 4'd0;

assign m_axi_update_ARREGION = 4'd0;

assign m_axi_update_ARSIZE = 3'd0;

assign m_axi_update_ARUSER = 1'd0;

assign m_axi_update_ARVALID = 1'b0;

assign m_axi_update_AWADDR = update_addr_reg_177;

assign m_axi_update_AWBURST = 2'd0;

assign m_axi_update_AWCACHE = 4'd0;

assign m_axi_update_AWID = 1'd0;

assign m_axi_update_AWLEN = 32'd1;

assign m_axi_update_AWLOCK = 2'd0;

assign m_axi_update_AWPROT = 3'd0;

assign m_axi_update_AWQOS = 4'd0;

assign m_axi_update_AWREGION = 4'd0;

assign m_axi_update_AWSIZE = 3'd0;

assign m_axi_update_AWUSER = 1'd0;

assign m_axi_update_RREADY = 1'b0;

assign m_axi_update_WDATA = ycopy_V_load_reg_183;

assign m_axi_update_WID = 1'd0;

assign m_axi_update_WLAST = 1'b0;

assign m_axi_update_WSTRB = 4'd15;

assign m_axi_update_WUSER = 1'd0;

assign sext_ln329_fu_142_p1 = $signed(trunc_ln329_1_fu_132_p4);

assign shl_ln_fu_119_p3 = {{mul_ln329_reg_167}, {2'd0}};

assign trunc_ln329_1_fu_132_p4 = {{add_ln329_fu_126_p2[63:2]}};

assign ycopy_V_address0 = zext_ln48_fu_115_p1;

assign zext_ln48_fu_115_p1 = trunc_ln329;

endmodule //background_loop_Block_entry_proc_proc7
