// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module background_loop_right_copy_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        width_dout,
        width_empty_n,
        width_read,
        y_1_dout,
        y_1_empty_n,
        y_1_read,
        frame_size_dout,
        frame_size_empty_n,
        frame_size_read,
        xcopy_V1_address0,
        xcopy_V1_ce0,
        xcopy_V1_q0,
        ddr_update_dout,
        ddr_update_empty_n,
        ddr_update_read,
        m_axi_update_AWVALID,
        m_axi_update_AWREADY,
        m_axi_update_AWADDR,
        m_axi_update_AWID,
        m_axi_update_AWLEN,
        m_axi_update_AWSIZE,
        m_axi_update_AWBURST,
        m_axi_update_AWLOCK,
        m_axi_update_AWCACHE,
        m_axi_update_AWPROT,
        m_axi_update_AWQOS,
        m_axi_update_AWREGION,
        m_axi_update_AWUSER,
        m_axi_update_WVALID,
        m_axi_update_WREADY,
        m_axi_update_WDATA,
        m_axi_update_WSTRB,
        m_axi_update_WLAST,
        m_axi_update_WID,
        m_axi_update_WUSER,
        m_axi_update_ARVALID,
        m_axi_update_ARREADY,
        m_axi_update_ARADDR,
        m_axi_update_ARID,
        m_axi_update_ARLEN,
        m_axi_update_ARSIZE,
        m_axi_update_ARBURST,
        m_axi_update_ARLOCK,
        m_axi_update_ARCACHE,
        m_axi_update_ARPROT,
        m_axi_update_ARQOS,
        m_axi_update_ARREGION,
        m_axi_update_ARUSER,
        m_axi_update_RVALID,
        m_axi_update_RREADY,
        m_axi_update_RDATA,
        m_axi_update_RLAST,
        m_axi_update_RID,
        m_axi_update_RUSER,
        m_axi_update_RRESP,
        m_axi_update_BVALID,
        m_axi_update_BREADY,
        m_axi_update_BRESP,
        m_axi_update_BID,
        m_axi_update_BUSER
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_pp0_stage0 = 11'd32;
parameter    ap_ST_fsm_state9 = 11'd64;
parameter    ap_ST_fsm_state10 = 11'd128;
parameter    ap_ST_fsm_state11 = 11'd256;
parameter    ap_ST_fsm_state12 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] width_dout;
input   width_empty_n;
output   width_read;
input  [31:0] y_1_dout;
input   y_1_empty_n;
output   y_1_read;
input  [31:0] frame_size_dout;
input   frame_size_empty_n;
output   frame_size_read;
output  [9:0] xcopy_V1_address0;
output   xcopy_V1_ce0;
input  [31:0] xcopy_V1_q0;
input  [63:0] ddr_update_dout;
input   ddr_update_empty_n;
output   ddr_update_read;
output   m_axi_update_AWVALID;
input   m_axi_update_AWREADY;
output  [63:0] m_axi_update_AWADDR;
output  [0:0] m_axi_update_AWID;
output  [31:0] m_axi_update_AWLEN;
output  [2:0] m_axi_update_AWSIZE;
output  [1:0] m_axi_update_AWBURST;
output  [1:0] m_axi_update_AWLOCK;
output  [3:0] m_axi_update_AWCACHE;
output  [2:0] m_axi_update_AWPROT;
output  [3:0] m_axi_update_AWQOS;
output  [3:0] m_axi_update_AWREGION;
output  [0:0] m_axi_update_AWUSER;
output   m_axi_update_WVALID;
input   m_axi_update_WREADY;
output  [31:0] m_axi_update_WDATA;
output  [3:0] m_axi_update_WSTRB;
output   m_axi_update_WLAST;
output  [0:0] m_axi_update_WID;
output  [0:0] m_axi_update_WUSER;
output   m_axi_update_ARVALID;
input   m_axi_update_ARREADY;
output  [63:0] m_axi_update_ARADDR;
output  [0:0] m_axi_update_ARID;
output  [31:0] m_axi_update_ARLEN;
output  [2:0] m_axi_update_ARSIZE;
output  [1:0] m_axi_update_ARBURST;
output  [1:0] m_axi_update_ARLOCK;
output  [3:0] m_axi_update_ARCACHE;
output  [2:0] m_axi_update_ARPROT;
output  [3:0] m_axi_update_ARQOS;
output  [3:0] m_axi_update_ARREGION;
output  [0:0] m_axi_update_ARUSER;
input   m_axi_update_RVALID;
output   m_axi_update_RREADY;
input  [31:0] m_axi_update_RDATA;
input   m_axi_update_RLAST;
input  [0:0] m_axi_update_RID;
input  [0:0] m_axi_update_RUSER;
input  [1:0] m_axi_update_RRESP;
input   m_axi_update_BVALID;
output   m_axi_update_BREADY;
input  [1:0] m_axi_update_BRESP;
input  [0:0] m_axi_update_BID;
input  [0:0] m_axi_update_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg width_read;
reg y_1_read;
reg frame_size_read;
reg xcopy_V1_ce0;
reg ddr_update_read;
reg m_axi_update_AWVALID;
reg m_axi_update_WVALID;
reg m_axi_update_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    width_blk_n;
reg    y_1_blk_n;
reg    frame_size_blk_n;
reg    ddr_update_blk_n;
reg    update_blk_n_AW;
wire    ap_CS_fsm_state5;
reg    update_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_reg_264;
reg   [0:0] icmp_ln878_reg_264_pp0_iter1_reg;
reg    update_blk_n_B;
wire    ap_CS_fsm_state13;
reg   [31:0] x_reg_130;
reg   [31:0] width_read_reg_212;
reg   [31:0] y_1_read_reg_217;
reg   [31:0] frame_size_read_reg_222;
reg   [63:0] ddr_update_read_reg_227;
wire    ap_CS_fsm_state2;
wire   [61:0] grp_fu_147_p2;
reg   [61:0] ret_reg_242;
wire    ap_CS_fsm_state3;
wire   [31:0] add_ln213_fu_153_p2;
reg   [31:0] add_ln213_reg_247;
wire    ap_CS_fsm_state4;
reg   [63:0] update_addr_reg_253;
wire   [31:0] add_ln42_fu_196_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_202_p2;
reg   [31:0] xcopy_V1_load_reg_273;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln42_fu_207_p1;
wire  signed [63:0] sext_ln329_fu_186_p1;
wire    ap_block_pp0_stage0_01001;
reg    ap_block_state1;
wire   [31:0] grp_fu_147_p0;
wire   [31:0] grp_fu_147_p1;
wire   [63:0] shl_ln329_1_fu_158_p3;
wire   [63:0] add_ln329_fu_165_p2;
wire   [63:0] add_ln329_1_fu_171_p2;
wire   [61:0] trunc_ln329_1_fu_176_p4;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [61:0] grp_fu_147_p00;
wire   [61:0] grp_fu_147_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

background_loop_mul_32ns_32ns_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_32ns_32ns_62_2_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_147_p0),
    .din1(grp_fu_147_p1),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state13) & (m_axi_update_BVALID == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_update_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((m_axi_update_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_update_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        x_reg_130 <= 32'd0;
    end else if (((icmp_ln878_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_130 <= add_ln42_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln213_reg_247 <= add_ln213_fu_153_p2;
        update_addr_reg_253 <= sext_ln329_fu_186_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ddr_update_read_reg_227 <= ddr_update_dout;
        frame_size_read_reg_222 <= frame_size_dout;
        width_read_reg_212 <= width_dout;
        y_1_read_reg_217 <= y_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_reg_264 <= icmp_ln878_fu_202_p2;
        icmp_ln878_reg_264_pp0_iter1_reg <= icmp_ln878_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ret_reg_242 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xcopy_V1_load_reg_273 <= xcopy_V1_q0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_202_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (m_axi_update_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (m_axi_update_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_update_blk_n = ddr_update_empty_n;
    end else begin
        ddr_update_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_update_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_1_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_update_read = 1'b1;
    end else begin
        ddr_update_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_size_blk_n = frame_size_empty_n;
    end else begin
        frame_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_update_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_1_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_size_read = 1'b1;
    end else begin
        frame_size_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_update_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_update_AWVALID = 1'b1;
    end else begin
        m_axi_update_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (m_axi_update_BVALID == 1'b1))) begin
        m_axi_update_BREADY = 1'b1;
    end else begin
        m_axi_update_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_264_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_update_WVALID = 1'b1;
    end else begin
        m_axi_update_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        update_blk_n_AW = m_axi_update_AWREADY;
    end else begin
        update_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        update_blk_n_B = m_axi_update_BVALID;
    end else begin
        update_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_264_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        update_blk_n_W = m_axi_update_WREADY;
    end else begin
        update_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_update_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_1_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xcopy_V1_ce0 = 1'b1;
    end else begin
        xcopy_V1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_1_blk_n = y_1_empty_n;
    end else begin
        y_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_update_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_1_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_1_read = 1'b1;
    end else begin
        y_1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ddr_update_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_1_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_update_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (m_axi_update_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln213_fu_153_p2 = ($signed(width_read_reg_212) + $signed(32'd4294967295));

assign add_ln329_1_fu_171_p2 = (add_ln329_fu_165_p2 + ddr_update_read_reg_227);

assign add_ln329_fu_165_p2 = (shl_ln329_1_fu_158_p3 + 64'd4);

assign add_ln42_fu_196_p2 = (x_reg_130 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ddr_update_empty_n == 1'b0) | (frame_size_empty_n == 1'b0) | (y_1_empty_n == 1'b0) | (width_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((m_axi_update_WREADY == 1'b0) & (icmp_ln878_reg_264_pp0_iter1_reg == 1'd0));
end

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_147_p0 = grp_fu_147_p00;

assign grp_fu_147_p00 = y_1_read_reg_217;

assign grp_fu_147_p1 = grp_fu_147_p10;

assign grp_fu_147_p10 = frame_size_read_reg_222;

assign icmp_ln878_fu_202_p2 = ((x_reg_130 == add_ln213_reg_247) ? 1'b1 : 1'b0);

assign m_axi_update_ARADDR = 64'd0;

assign m_axi_update_ARBURST = 2'd0;

assign m_axi_update_ARCACHE = 4'd0;

assign m_axi_update_ARID = 1'd0;

assign m_axi_update_ARLEN = 32'd0;

assign m_axi_update_ARLOCK = 2'd0;

assign m_axi_update_ARPROT = 3'd0;

assign m_axi_update_ARQOS = 4'd0;

assign m_axi_update_ARREGION = 4'd0;

assign m_axi_update_ARSIZE = 3'd0;

assign m_axi_update_ARUSER = 1'd0;

assign m_axi_update_ARVALID = 1'b0;

assign m_axi_update_AWADDR = update_addr_reg_253;

assign m_axi_update_AWBURST = 2'd0;

assign m_axi_update_AWCACHE = 4'd0;

assign m_axi_update_AWID = 1'd0;

assign m_axi_update_AWLEN = add_ln213_reg_247;

assign m_axi_update_AWLOCK = 2'd0;

assign m_axi_update_AWPROT = 3'd0;

assign m_axi_update_AWQOS = 4'd0;

assign m_axi_update_AWREGION = 4'd0;

assign m_axi_update_AWSIZE = 3'd0;

assign m_axi_update_AWUSER = 1'd0;

assign m_axi_update_RREADY = 1'b0;

assign m_axi_update_WDATA = xcopy_V1_load_reg_273;

assign m_axi_update_WID = 1'd0;

assign m_axi_update_WLAST = 1'b0;

assign m_axi_update_WSTRB = 4'd15;

assign m_axi_update_WUSER = 1'd0;

assign sext_ln329_fu_186_p1 = $signed(trunc_ln329_1_fu_176_p4);

assign shl_ln329_1_fu_158_p3 = {{ret_reg_242}, {2'd0}};

assign trunc_ln329_1_fu_176_p4 = {{add_ln329_1_fu_171_p2[63:2]}};

assign xcopy_V1_address0 = zext_ln42_fu_207_p1;

assign zext_ln42_fu_207_p1 = x_reg_130;

endmodule //background_loop_right_copy_loop_proc
