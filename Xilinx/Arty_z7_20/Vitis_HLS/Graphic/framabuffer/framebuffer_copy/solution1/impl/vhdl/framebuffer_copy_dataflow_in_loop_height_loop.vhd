-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity framebuffer_copy_dataflow_in_loop_height_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0);
    display_xsize : IN STD_LOGIC_VECTOR (31 downto 0);
    copy : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_cp_AWVALID : OUT STD_LOGIC;
    m_axi_cp_AWREADY : IN STD_LOGIC;
    m_axi_cp_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_cp_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cp_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cp_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cp_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cp_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cp_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cp_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cp_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cp_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_WVALID : OUT STD_LOGIC;
    m_axi_cp_WREADY : IN STD_LOGIC;
    m_axi_cp_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cp_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cp_WLAST : OUT STD_LOGIC;
    m_axi_cp_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_ARVALID : OUT STD_LOGIC;
    m_axi_cp_ARREADY : IN STD_LOGIC;
    m_axi_cp_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_cp_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cp_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cp_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cp_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cp_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cp_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cp_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cp_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cp_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_RVALID : IN STD_LOGIC;
    m_axi_cp_RREADY : OUT STD_LOGIC;
    m_axi_cp_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cp_RLAST : IN STD_LOGIC;
    m_axi_cp_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cp_BVALID : IN STD_LOGIC;
    m_axi_cp_BREADY : OUT STD_LOGIC;
    m_axi_cp_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cp_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cp_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    update : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_up_AWVALID : OUT STD_LOGIC;
    m_axi_up_AWREADY : IN STD_LOGIC;
    m_axi_up_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_up_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_up_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_up_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_up_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_up_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_up_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_up_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_up_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_up_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_WVALID : OUT STD_LOGIC;
    m_axi_up_WREADY : IN STD_LOGIC;
    m_axi_up_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_up_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_up_WLAST : OUT STD_LOGIC;
    m_axi_up_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_ARVALID : OUT STD_LOGIC;
    m_axi_up_ARREADY : IN STD_LOGIC;
    m_axi_up_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_up_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_up_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_up_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_up_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_up_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_up_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_up_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_up_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_up_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_RVALID : IN STD_LOGIC;
    m_axi_up_RREADY : OUT STD_LOGIC;
    m_axi_up_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_up_RLAST : IN STD_LOGIC;
    m_axi_up_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_up_BVALID : IN STD_LOGIC;
    m_axi_up_BREADY : OUT STD_LOGIC;
    m_axi_up_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_up_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_up_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    width_ap_vld : IN STD_LOGIC;
    y_ap_vld : IN STD_LOGIC;
    display_xsize_ap_vld : IN STD_LOGIC;
    copy_ap_vld : IN STD_LOGIC;
    update_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of framebuffer_copy_dataflow_in_loop_height_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal src_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_loop_proc5_U0_ap_start : STD_LOGIC;
    signal width_loop_proc5_U0_ap_done : STD_LOGIC;
    signal width_loop_proc5_U0_ap_continue : STD_LOGIC;
    signal width_loop_proc5_U0_ap_idle : STD_LOGIC;
    signal width_loop_proc5_U0_ap_ready : STD_LOGIC;
    signal width_loop_proc5_U0_m_axi_cp_AWVALID : STD_LOGIC;
    signal width_loop_proc5_U0_m_axi_cp_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_WVALID : STD_LOGIC;
    signal width_loop_proc5_U0_m_axi_cp_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_WLAST : STD_LOGIC;
    signal width_loop_proc5_U0_m_axi_cp_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARVALID : STD_LOGIC;
    signal width_loop_proc5_U0_m_axi_cp_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal width_loop_proc5_U0_m_axi_cp_RREADY : STD_LOGIC;
    signal width_loop_proc5_U0_m_axi_cp_BREADY : STD_LOGIC;
    signal width_loop_proc5_U0_src_V1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal width_loop_proc5_U0_src_V1_ce0 : STD_LOGIC;
    signal width_loop_proc5_U0_src_V1_we0 : STD_LOGIC;
    signal width_loop_proc5_U0_src_V1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_loop_proc5_U0_width_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal width_loop_proc5_U0_width_out_write : STD_LOGIC;
    signal width_loop_proc5_U0_y_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal width_loop_proc5_U0_y_out_write : STD_LOGIC;
    signal width_loop_proc5_U0_display_xsize_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal width_loop_proc5_U0_display_xsize_out_write : STD_LOGIC;
    signal width_loop_proc5_U0_update_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal width_loop_proc5_U0_update_out_write : STD_LOGIC;
    signal ap_channel_done_src_V : STD_LOGIC;
    signal width_loop_proc5_U0_src_V1_full_n : STD_LOGIC;
    signal copy_loop_proc_U0_ap_start : STD_LOGIC;
    signal copy_loop_proc_U0_ap_done : STD_LOGIC;
    signal copy_loop_proc_U0_ap_continue : STD_LOGIC;
    signal copy_loop_proc_U0_ap_idle : STD_LOGIC;
    signal copy_loop_proc_U0_ap_ready : STD_LOGIC;
    signal copy_loop_proc_U0_width_read : STD_LOGIC;
    signal copy_loop_proc_U0_y_read : STD_LOGIC;
    signal copy_loop_proc_U0_display_xsize_read : STD_LOGIC;
    signal copy_loop_proc_U0_src_V1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal copy_loop_proc_U0_src_V1_ce0 : STD_LOGIC;
    signal copy_loop_proc_U0_update_read : STD_LOGIC;
    signal copy_loop_proc_U0_m_axi_up_AWVALID : STD_LOGIC;
    signal copy_loop_proc_U0_m_axi_up_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_loop_proc_U0_m_axi_up_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_loop_proc_U0_m_axi_up_WVALID : STD_LOGIC;
    signal copy_loop_proc_U0_m_axi_up_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_loop_proc_U0_m_axi_up_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_loop_proc_U0_m_axi_up_WLAST : STD_LOGIC;
    signal copy_loop_proc_U0_m_axi_up_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_loop_proc_U0_m_axi_up_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARVALID : STD_LOGIC;
    signal copy_loop_proc_U0_m_axi_up_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_loop_proc_U0_m_axi_up_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_loop_proc_U0_m_axi_up_RREADY : STD_LOGIC;
    signal copy_loop_proc_U0_m_axi_up_BREADY : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal src_V_i_full_n : STD_LOGIC;
    signal src_V_t_empty_n : STD_LOGIC;
    signal width_c_full_n : STD_LOGIC;
    signal width_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal width_c_empty_n : STD_LOGIC;
    signal y_c_full_n : STD_LOGIC;
    signal y_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_c_empty_n : STD_LOGIC;
    signal display_xsize_c_full_n : STD_LOGIC;
    signal display_xsize_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal display_xsize_c_empty_n : STD_LOGIC;
    signal update_c_full_n : STD_LOGIC;
    signal update_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal update_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal width_loop_proc5_U0_start_full_n : STD_LOGIC;
    signal width_loop_proc5_U0_start_write : STD_LOGIC;
    signal copy_loop_proc_U0_start_full_n : STD_LOGIC;
    signal copy_loop_proc_U0_start_write : STD_LOGIC;

    component framebuffer_copy_width_loop_proc5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        y : IN STD_LOGIC_VECTOR (31 downto 0);
        display_xsize : IN STD_LOGIC_VECTOR (31 downto 0);
        copy : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_cp_AWVALID : OUT STD_LOGIC;
        m_axi_cp_AWREADY : IN STD_LOGIC;
        m_axi_cp_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_cp_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cp_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cp_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cp_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cp_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cp_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cp_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cp_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cp_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_WVALID : OUT STD_LOGIC;
        m_axi_cp_WREADY : IN STD_LOGIC;
        m_axi_cp_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cp_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cp_WLAST : OUT STD_LOGIC;
        m_axi_cp_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_ARVALID : OUT STD_LOGIC;
        m_axi_cp_ARREADY : IN STD_LOGIC;
        m_axi_cp_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_cp_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cp_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cp_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cp_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cp_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cp_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cp_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cp_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cp_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_RVALID : IN STD_LOGIC;
        m_axi_cp_RREADY : OUT STD_LOGIC;
        m_axi_cp_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cp_RLAST : IN STD_LOGIC;
        m_axi_cp_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cp_BVALID : IN STD_LOGIC;
        m_axi_cp_BREADY : OUT STD_LOGIC;
        m_axi_cp_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cp_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cp_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        src_V1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        src_V1_ce0 : OUT STD_LOGIC;
        src_V1_we0 : OUT STD_LOGIC;
        src_V1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        update : IN STD_LOGIC_VECTOR (63 downto 0);
        width_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC;
        y_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_out_full_n : IN STD_LOGIC;
        y_out_write : OUT STD_LOGIC;
        display_xsize_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        display_xsize_out_full_n : IN STD_LOGIC;
        display_xsize_out_write : OUT STD_LOGIC;
        update_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        update_out_full_n : IN STD_LOGIC;
        update_out_write : OUT STD_LOGIC );
    end component;


    component framebuffer_copy_copy_loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_empty_n : IN STD_LOGIC;
        y_read : OUT STD_LOGIC;
        display_xsize_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        display_xsize_empty_n : IN STD_LOGIC;
        display_xsize_read : OUT STD_LOGIC;
        src_V1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        src_V1_ce0 : OUT STD_LOGIC;
        src_V1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        update_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        update_empty_n : IN STD_LOGIC;
        update_read : OUT STD_LOGIC;
        m_axi_up_AWVALID : OUT STD_LOGIC;
        m_axi_up_AWREADY : IN STD_LOGIC;
        m_axi_up_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_up_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_up_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_up_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_up_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_up_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_up_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_up_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_up_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_up_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_WVALID : OUT STD_LOGIC;
        m_axi_up_WREADY : IN STD_LOGIC;
        m_axi_up_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_up_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_up_WLAST : OUT STD_LOGIC;
        m_axi_up_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_ARVALID : OUT STD_LOGIC;
        m_axi_up_ARREADY : IN STD_LOGIC;
        m_axi_up_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_up_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_up_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_up_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_up_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_up_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_up_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_up_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_up_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_up_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_RVALID : IN STD_LOGIC;
        m_axi_up_RREADY : OUT STD_LOGIC;
        m_axi_up_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_up_RLAST : IN STD_LOGIC;
        m_axi_up_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_up_BVALID : IN STD_LOGIC;
        m_axi_up_BREADY : OUT STD_LOGIC;
        m_axi_up_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_up_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_up_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component framebuffer_copy_dataflow_in_loop_height_loop_src_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component framebuffer_copy_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component framebuffer_copy_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    src_V_U : component framebuffer_copy_dataflow_in_loop_height_loop_src_V
    generic map (
        DataWidth => 32,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => width_loop_proc5_U0_src_V1_address0,
        i_ce0 => width_loop_proc5_U0_src_V1_ce0,
        i_we0 => width_loop_proc5_U0_src_V1_we0,
        i_d0 => width_loop_proc5_U0_src_V1_d0,
        i_q0 => src_V_i_q0,
        t_address0 => copy_loop_proc_U0_src_V1_address0,
        t_ce0 => copy_loop_proc_U0_src_V1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => src_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => src_V_i_full_n,
        i_write => width_loop_proc5_U0_ap_done,
        t_empty_n => src_V_t_empty_n,
        t_read => copy_loop_proc_U0_ap_ready);

    width_loop_proc5_U0 : component framebuffer_copy_width_loop_proc5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => width_loop_proc5_U0_ap_start,
        ap_done => width_loop_proc5_U0_ap_done,
        ap_continue => width_loop_proc5_U0_ap_continue,
        ap_idle => width_loop_proc5_U0_ap_idle,
        ap_ready => width_loop_proc5_U0_ap_ready,
        width => width,
        y => y,
        display_xsize => display_xsize,
        copy => copy,
        m_axi_cp_AWVALID => width_loop_proc5_U0_m_axi_cp_AWVALID,
        m_axi_cp_AWREADY => ap_const_logic_0,
        m_axi_cp_AWADDR => width_loop_proc5_U0_m_axi_cp_AWADDR,
        m_axi_cp_AWID => width_loop_proc5_U0_m_axi_cp_AWID,
        m_axi_cp_AWLEN => width_loop_proc5_U0_m_axi_cp_AWLEN,
        m_axi_cp_AWSIZE => width_loop_proc5_U0_m_axi_cp_AWSIZE,
        m_axi_cp_AWBURST => width_loop_proc5_U0_m_axi_cp_AWBURST,
        m_axi_cp_AWLOCK => width_loop_proc5_U0_m_axi_cp_AWLOCK,
        m_axi_cp_AWCACHE => width_loop_proc5_U0_m_axi_cp_AWCACHE,
        m_axi_cp_AWPROT => width_loop_proc5_U0_m_axi_cp_AWPROT,
        m_axi_cp_AWQOS => width_loop_proc5_U0_m_axi_cp_AWQOS,
        m_axi_cp_AWREGION => width_loop_proc5_U0_m_axi_cp_AWREGION,
        m_axi_cp_AWUSER => width_loop_proc5_U0_m_axi_cp_AWUSER,
        m_axi_cp_WVALID => width_loop_proc5_U0_m_axi_cp_WVALID,
        m_axi_cp_WREADY => ap_const_logic_0,
        m_axi_cp_WDATA => width_loop_proc5_U0_m_axi_cp_WDATA,
        m_axi_cp_WSTRB => width_loop_proc5_U0_m_axi_cp_WSTRB,
        m_axi_cp_WLAST => width_loop_proc5_U0_m_axi_cp_WLAST,
        m_axi_cp_WID => width_loop_proc5_U0_m_axi_cp_WID,
        m_axi_cp_WUSER => width_loop_proc5_U0_m_axi_cp_WUSER,
        m_axi_cp_ARVALID => width_loop_proc5_U0_m_axi_cp_ARVALID,
        m_axi_cp_ARREADY => m_axi_cp_ARREADY,
        m_axi_cp_ARADDR => width_loop_proc5_U0_m_axi_cp_ARADDR,
        m_axi_cp_ARID => width_loop_proc5_U0_m_axi_cp_ARID,
        m_axi_cp_ARLEN => width_loop_proc5_U0_m_axi_cp_ARLEN,
        m_axi_cp_ARSIZE => width_loop_proc5_U0_m_axi_cp_ARSIZE,
        m_axi_cp_ARBURST => width_loop_proc5_U0_m_axi_cp_ARBURST,
        m_axi_cp_ARLOCK => width_loop_proc5_U0_m_axi_cp_ARLOCK,
        m_axi_cp_ARCACHE => width_loop_proc5_U0_m_axi_cp_ARCACHE,
        m_axi_cp_ARPROT => width_loop_proc5_U0_m_axi_cp_ARPROT,
        m_axi_cp_ARQOS => width_loop_proc5_U0_m_axi_cp_ARQOS,
        m_axi_cp_ARREGION => width_loop_proc5_U0_m_axi_cp_ARREGION,
        m_axi_cp_ARUSER => width_loop_proc5_U0_m_axi_cp_ARUSER,
        m_axi_cp_RVALID => m_axi_cp_RVALID,
        m_axi_cp_RREADY => width_loop_proc5_U0_m_axi_cp_RREADY,
        m_axi_cp_RDATA => m_axi_cp_RDATA,
        m_axi_cp_RLAST => m_axi_cp_RLAST,
        m_axi_cp_RID => m_axi_cp_RID,
        m_axi_cp_RUSER => m_axi_cp_RUSER,
        m_axi_cp_RRESP => m_axi_cp_RRESP,
        m_axi_cp_BVALID => ap_const_logic_0,
        m_axi_cp_BREADY => width_loop_proc5_U0_m_axi_cp_BREADY,
        m_axi_cp_BRESP => ap_const_lv2_0,
        m_axi_cp_BID => ap_const_lv1_0,
        m_axi_cp_BUSER => ap_const_lv1_0,
        src_V1_address0 => width_loop_proc5_U0_src_V1_address0,
        src_V1_ce0 => width_loop_proc5_U0_src_V1_ce0,
        src_V1_we0 => width_loop_proc5_U0_src_V1_we0,
        src_V1_d0 => width_loop_proc5_U0_src_V1_d0,
        update => update,
        width_out_din => width_loop_proc5_U0_width_out_din,
        width_out_full_n => width_c_full_n,
        width_out_write => width_loop_proc5_U0_width_out_write,
        y_out_din => width_loop_proc5_U0_y_out_din,
        y_out_full_n => y_c_full_n,
        y_out_write => width_loop_proc5_U0_y_out_write,
        display_xsize_out_din => width_loop_proc5_U0_display_xsize_out_din,
        display_xsize_out_full_n => display_xsize_c_full_n,
        display_xsize_out_write => width_loop_proc5_U0_display_xsize_out_write,
        update_out_din => width_loop_proc5_U0_update_out_din,
        update_out_full_n => update_c_full_n,
        update_out_write => width_loop_proc5_U0_update_out_write);

    copy_loop_proc_U0 : component framebuffer_copy_copy_loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => copy_loop_proc_U0_ap_start,
        ap_done => copy_loop_proc_U0_ap_done,
        ap_continue => copy_loop_proc_U0_ap_continue,
        ap_idle => copy_loop_proc_U0_ap_idle,
        ap_ready => copy_loop_proc_U0_ap_ready,
        width_dout => width_c_dout,
        width_empty_n => width_c_empty_n,
        width_read => copy_loop_proc_U0_width_read,
        y_dout => y_c_dout,
        y_empty_n => y_c_empty_n,
        y_read => copy_loop_proc_U0_y_read,
        display_xsize_dout => display_xsize_c_dout,
        display_xsize_empty_n => display_xsize_c_empty_n,
        display_xsize_read => copy_loop_proc_U0_display_xsize_read,
        src_V1_address0 => copy_loop_proc_U0_src_V1_address0,
        src_V1_ce0 => copy_loop_proc_U0_src_V1_ce0,
        src_V1_q0 => src_V_t_q0,
        update_dout => update_c_dout,
        update_empty_n => update_c_empty_n,
        update_read => copy_loop_proc_U0_update_read,
        m_axi_up_AWVALID => copy_loop_proc_U0_m_axi_up_AWVALID,
        m_axi_up_AWREADY => m_axi_up_AWREADY,
        m_axi_up_AWADDR => copy_loop_proc_U0_m_axi_up_AWADDR,
        m_axi_up_AWID => copy_loop_proc_U0_m_axi_up_AWID,
        m_axi_up_AWLEN => copy_loop_proc_U0_m_axi_up_AWLEN,
        m_axi_up_AWSIZE => copy_loop_proc_U0_m_axi_up_AWSIZE,
        m_axi_up_AWBURST => copy_loop_proc_U0_m_axi_up_AWBURST,
        m_axi_up_AWLOCK => copy_loop_proc_U0_m_axi_up_AWLOCK,
        m_axi_up_AWCACHE => copy_loop_proc_U0_m_axi_up_AWCACHE,
        m_axi_up_AWPROT => copy_loop_proc_U0_m_axi_up_AWPROT,
        m_axi_up_AWQOS => copy_loop_proc_U0_m_axi_up_AWQOS,
        m_axi_up_AWREGION => copy_loop_proc_U0_m_axi_up_AWREGION,
        m_axi_up_AWUSER => copy_loop_proc_U0_m_axi_up_AWUSER,
        m_axi_up_WVALID => copy_loop_proc_U0_m_axi_up_WVALID,
        m_axi_up_WREADY => m_axi_up_WREADY,
        m_axi_up_WDATA => copy_loop_proc_U0_m_axi_up_WDATA,
        m_axi_up_WSTRB => copy_loop_proc_U0_m_axi_up_WSTRB,
        m_axi_up_WLAST => copy_loop_proc_U0_m_axi_up_WLAST,
        m_axi_up_WID => copy_loop_proc_U0_m_axi_up_WID,
        m_axi_up_WUSER => copy_loop_proc_U0_m_axi_up_WUSER,
        m_axi_up_ARVALID => copy_loop_proc_U0_m_axi_up_ARVALID,
        m_axi_up_ARREADY => ap_const_logic_0,
        m_axi_up_ARADDR => copy_loop_proc_U0_m_axi_up_ARADDR,
        m_axi_up_ARID => copy_loop_proc_U0_m_axi_up_ARID,
        m_axi_up_ARLEN => copy_loop_proc_U0_m_axi_up_ARLEN,
        m_axi_up_ARSIZE => copy_loop_proc_U0_m_axi_up_ARSIZE,
        m_axi_up_ARBURST => copy_loop_proc_U0_m_axi_up_ARBURST,
        m_axi_up_ARLOCK => copy_loop_proc_U0_m_axi_up_ARLOCK,
        m_axi_up_ARCACHE => copy_loop_proc_U0_m_axi_up_ARCACHE,
        m_axi_up_ARPROT => copy_loop_proc_U0_m_axi_up_ARPROT,
        m_axi_up_ARQOS => copy_loop_proc_U0_m_axi_up_ARQOS,
        m_axi_up_ARREGION => copy_loop_proc_U0_m_axi_up_ARREGION,
        m_axi_up_ARUSER => copy_loop_proc_U0_m_axi_up_ARUSER,
        m_axi_up_RVALID => ap_const_logic_0,
        m_axi_up_RREADY => copy_loop_proc_U0_m_axi_up_RREADY,
        m_axi_up_RDATA => ap_const_lv32_0,
        m_axi_up_RLAST => ap_const_logic_0,
        m_axi_up_RID => ap_const_lv1_0,
        m_axi_up_RUSER => ap_const_lv1_0,
        m_axi_up_RRESP => ap_const_lv2_0,
        m_axi_up_BVALID => m_axi_up_BVALID,
        m_axi_up_BREADY => copy_loop_proc_U0_m_axi_up_BREADY,
        m_axi_up_BRESP => m_axi_up_BRESP,
        m_axi_up_BID => m_axi_up_BID,
        m_axi_up_BUSER => m_axi_up_BUSER);

    width_c_U : component framebuffer_copy_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => width_loop_proc5_U0_width_out_din,
        if_full_n => width_c_full_n,
        if_write => width_loop_proc5_U0_width_out_write,
        if_dout => width_c_dout,
        if_empty_n => width_c_empty_n,
        if_read => copy_loop_proc_U0_width_read);

    y_c_U : component framebuffer_copy_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => width_loop_proc5_U0_y_out_din,
        if_full_n => y_c_full_n,
        if_write => width_loop_proc5_U0_y_out_write,
        if_dout => y_c_dout,
        if_empty_n => y_c_empty_n,
        if_read => copy_loop_proc_U0_y_read);

    display_xsize_c_U : component framebuffer_copy_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => width_loop_proc5_U0_display_xsize_out_din,
        if_full_n => display_xsize_c_full_n,
        if_write => width_loop_proc5_U0_display_xsize_out_write,
        if_dout => display_xsize_c_dout,
        if_empty_n => display_xsize_c_empty_n,
        if_read => copy_loop_proc_U0_display_xsize_read);

    update_c_U : component framebuffer_copy_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => width_loop_proc5_U0_update_out_din,
        if_full_n => update_c_full_n,
        if_write => width_loop_proc5_U0_update_out_write,
        if_dout => update_c_dout,
        if_empty_n => update_c_empty_n,
        if_read => copy_loop_proc_U0_update_read);




    ap_channel_done_src_V <= width_loop_proc5_U0_ap_done;
    ap_done <= copy_loop_proc_U0_ap_done;
    ap_idle <= (width_loop_proc5_U0_ap_idle and (src_V_t_empty_n xor ap_const_logic_1) and copy_loop_proc_U0_ap_idle);
    ap_ready <= width_loop_proc5_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= copy_loop_proc_U0_ap_done;
    ap_sync_ready <= width_loop_proc5_U0_ap_ready;
    copy_loop_proc_U0_ap_continue <= ap_continue;
    copy_loop_proc_U0_ap_start <= src_V_t_empty_n;
    copy_loop_proc_U0_start_full_n <= ap_const_logic_1;
    copy_loop_proc_U0_start_write <= ap_const_logic_0;
    m_axi_cp_ARADDR <= width_loop_proc5_U0_m_axi_cp_ARADDR;
    m_axi_cp_ARBURST <= width_loop_proc5_U0_m_axi_cp_ARBURST;
    m_axi_cp_ARCACHE <= width_loop_proc5_U0_m_axi_cp_ARCACHE;
    m_axi_cp_ARID <= width_loop_proc5_U0_m_axi_cp_ARID;
    m_axi_cp_ARLEN <= width_loop_proc5_U0_m_axi_cp_ARLEN;
    m_axi_cp_ARLOCK <= width_loop_proc5_U0_m_axi_cp_ARLOCK;
    m_axi_cp_ARPROT <= width_loop_proc5_U0_m_axi_cp_ARPROT;
    m_axi_cp_ARQOS <= width_loop_proc5_U0_m_axi_cp_ARQOS;
    m_axi_cp_ARREGION <= width_loop_proc5_U0_m_axi_cp_ARREGION;
    m_axi_cp_ARSIZE <= width_loop_proc5_U0_m_axi_cp_ARSIZE;
    m_axi_cp_ARUSER <= width_loop_proc5_U0_m_axi_cp_ARUSER;
    m_axi_cp_ARVALID <= width_loop_proc5_U0_m_axi_cp_ARVALID;
    m_axi_cp_AWADDR <= ap_const_lv64_0;
    m_axi_cp_AWBURST <= ap_const_lv2_0;
    m_axi_cp_AWCACHE <= ap_const_lv4_0;
    m_axi_cp_AWID <= ap_const_lv1_0;
    m_axi_cp_AWLEN <= ap_const_lv32_0;
    m_axi_cp_AWLOCK <= ap_const_lv2_0;
    m_axi_cp_AWPROT <= ap_const_lv3_0;
    m_axi_cp_AWQOS <= ap_const_lv4_0;
    m_axi_cp_AWREGION <= ap_const_lv4_0;
    m_axi_cp_AWSIZE <= ap_const_lv3_0;
    m_axi_cp_AWUSER <= ap_const_lv1_0;
    m_axi_cp_AWVALID <= ap_const_logic_0;
    m_axi_cp_BREADY <= ap_const_logic_0;
    m_axi_cp_RREADY <= width_loop_proc5_U0_m_axi_cp_RREADY;
    m_axi_cp_WDATA <= ap_const_lv32_0;
    m_axi_cp_WID <= ap_const_lv1_0;
    m_axi_cp_WLAST <= ap_const_logic_0;
    m_axi_cp_WSTRB <= ap_const_lv4_0;
    m_axi_cp_WUSER <= ap_const_lv1_0;
    m_axi_cp_WVALID <= ap_const_logic_0;
    m_axi_up_ARADDR <= ap_const_lv64_0;
    m_axi_up_ARBURST <= ap_const_lv2_0;
    m_axi_up_ARCACHE <= ap_const_lv4_0;
    m_axi_up_ARID <= ap_const_lv1_0;
    m_axi_up_ARLEN <= ap_const_lv32_0;
    m_axi_up_ARLOCK <= ap_const_lv2_0;
    m_axi_up_ARPROT <= ap_const_lv3_0;
    m_axi_up_ARQOS <= ap_const_lv4_0;
    m_axi_up_ARREGION <= ap_const_lv4_0;
    m_axi_up_ARSIZE <= ap_const_lv3_0;
    m_axi_up_ARUSER <= ap_const_lv1_0;
    m_axi_up_ARVALID <= ap_const_logic_0;
    m_axi_up_AWADDR <= copy_loop_proc_U0_m_axi_up_AWADDR;
    m_axi_up_AWBURST <= copy_loop_proc_U0_m_axi_up_AWBURST;
    m_axi_up_AWCACHE <= copy_loop_proc_U0_m_axi_up_AWCACHE;
    m_axi_up_AWID <= copy_loop_proc_U0_m_axi_up_AWID;
    m_axi_up_AWLEN <= copy_loop_proc_U0_m_axi_up_AWLEN;
    m_axi_up_AWLOCK <= copy_loop_proc_U0_m_axi_up_AWLOCK;
    m_axi_up_AWPROT <= copy_loop_proc_U0_m_axi_up_AWPROT;
    m_axi_up_AWQOS <= copy_loop_proc_U0_m_axi_up_AWQOS;
    m_axi_up_AWREGION <= copy_loop_proc_U0_m_axi_up_AWREGION;
    m_axi_up_AWSIZE <= copy_loop_proc_U0_m_axi_up_AWSIZE;
    m_axi_up_AWUSER <= copy_loop_proc_U0_m_axi_up_AWUSER;
    m_axi_up_AWVALID <= copy_loop_proc_U0_m_axi_up_AWVALID;
    m_axi_up_BREADY <= copy_loop_proc_U0_m_axi_up_BREADY;
    m_axi_up_RREADY <= ap_const_logic_0;
    m_axi_up_WDATA <= copy_loop_proc_U0_m_axi_up_WDATA;
    m_axi_up_WID <= copy_loop_proc_U0_m_axi_up_WID;
    m_axi_up_WLAST <= copy_loop_proc_U0_m_axi_up_WLAST;
    m_axi_up_WSTRB <= copy_loop_proc_U0_m_axi_up_WSTRB;
    m_axi_up_WUSER <= copy_loop_proc_U0_m_axi_up_WUSER;
    m_axi_up_WVALID <= copy_loop_proc_U0_m_axi_up_WVALID;
    width_loop_proc5_U0_ap_continue <= src_V_i_full_n;
    width_loop_proc5_U0_ap_start <= ap_start;
    width_loop_proc5_U0_src_V1_full_n <= src_V_i_full_n;
    width_loop_proc5_U0_start_full_n <= ap_const_logic_1;
    width_loop_proc5_U0_start_write <= ap_const_logic_0;
end behav;
