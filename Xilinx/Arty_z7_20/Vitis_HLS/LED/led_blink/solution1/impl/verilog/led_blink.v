// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="led_blink_led_blink,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=727,HLS_SYN_LUT=939,HLS_VERSION=2020_2}" *)

module led_blink (
        ap_clk,
        ap_rst_n,
        m_axi_onoff_AWVALID,
        m_axi_onoff_AWREADY,
        m_axi_onoff_AWADDR,
        m_axi_onoff_AWID,
        m_axi_onoff_AWLEN,
        m_axi_onoff_AWSIZE,
        m_axi_onoff_AWBURST,
        m_axi_onoff_AWLOCK,
        m_axi_onoff_AWCACHE,
        m_axi_onoff_AWPROT,
        m_axi_onoff_AWQOS,
        m_axi_onoff_AWREGION,
        m_axi_onoff_AWUSER,
        m_axi_onoff_WVALID,
        m_axi_onoff_WREADY,
        m_axi_onoff_WDATA,
        m_axi_onoff_WSTRB,
        m_axi_onoff_WLAST,
        m_axi_onoff_WID,
        m_axi_onoff_WUSER,
        m_axi_onoff_ARVALID,
        m_axi_onoff_ARREADY,
        m_axi_onoff_ARADDR,
        m_axi_onoff_ARID,
        m_axi_onoff_ARLEN,
        m_axi_onoff_ARSIZE,
        m_axi_onoff_ARBURST,
        m_axi_onoff_ARLOCK,
        m_axi_onoff_ARCACHE,
        m_axi_onoff_ARPROT,
        m_axi_onoff_ARQOS,
        m_axi_onoff_ARREGION,
        m_axi_onoff_ARUSER,
        m_axi_onoff_RVALID,
        m_axi_onoff_RREADY,
        m_axi_onoff_RDATA,
        m_axi_onoff_RLAST,
        m_axi_onoff_RID,
        m_axi_onoff_RUSER,
        m_axi_onoff_RRESP,
        m_axi_onoff_BVALID,
        m_axi_onoff_BREADY,
        m_axi_onoff_BRESP,
        m_axi_onoff_BID,
        m_axi_onoff_BUSER,
        led,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_ONOFF_ID_WIDTH = 1;
parameter    C_M_AXI_ONOFF_ADDR_WIDTH = 64;
parameter    C_M_AXI_ONOFF_DATA_WIDTH = 32;
parameter    C_M_AXI_ONOFF_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ONOFF_ARUSER_WIDTH = 1;
parameter    C_M_AXI_ONOFF_WUSER_WIDTH = 1;
parameter    C_M_AXI_ONOFF_RUSER_WIDTH = 1;
parameter    C_M_AXI_ONOFF_BUSER_WIDTH = 1;
parameter    C_M_AXI_ONOFF_USER_VALUE = 0;
parameter    C_M_AXI_ONOFF_PROT_VALUE = 0;
parameter    C_M_AXI_ONOFF_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_ONOFF_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_onoff_AWVALID;
input   m_axi_onoff_AWREADY;
output  [C_M_AXI_ONOFF_ADDR_WIDTH - 1:0] m_axi_onoff_AWADDR;
output  [C_M_AXI_ONOFF_ID_WIDTH - 1:0] m_axi_onoff_AWID;
output  [7:0] m_axi_onoff_AWLEN;
output  [2:0] m_axi_onoff_AWSIZE;
output  [1:0] m_axi_onoff_AWBURST;
output  [1:0] m_axi_onoff_AWLOCK;
output  [3:0] m_axi_onoff_AWCACHE;
output  [2:0] m_axi_onoff_AWPROT;
output  [3:0] m_axi_onoff_AWQOS;
output  [3:0] m_axi_onoff_AWREGION;
output  [C_M_AXI_ONOFF_AWUSER_WIDTH - 1:0] m_axi_onoff_AWUSER;
output   m_axi_onoff_WVALID;
input   m_axi_onoff_WREADY;
output  [C_M_AXI_ONOFF_DATA_WIDTH - 1:0] m_axi_onoff_WDATA;
output  [C_M_AXI_ONOFF_WSTRB_WIDTH - 1:0] m_axi_onoff_WSTRB;
output   m_axi_onoff_WLAST;
output  [C_M_AXI_ONOFF_ID_WIDTH - 1:0] m_axi_onoff_WID;
output  [C_M_AXI_ONOFF_WUSER_WIDTH - 1:0] m_axi_onoff_WUSER;
output   m_axi_onoff_ARVALID;
input   m_axi_onoff_ARREADY;
output  [C_M_AXI_ONOFF_ADDR_WIDTH - 1:0] m_axi_onoff_ARADDR;
output  [C_M_AXI_ONOFF_ID_WIDTH - 1:0] m_axi_onoff_ARID;
output  [7:0] m_axi_onoff_ARLEN;
output  [2:0] m_axi_onoff_ARSIZE;
output  [1:0] m_axi_onoff_ARBURST;
output  [1:0] m_axi_onoff_ARLOCK;
output  [3:0] m_axi_onoff_ARCACHE;
output  [2:0] m_axi_onoff_ARPROT;
output  [3:0] m_axi_onoff_ARQOS;
output  [3:0] m_axi_onoff_ARREGION;
output  [C_M_AXI_ONOFF_ARUSER_WIDTH - 1:0] m_axi_onoff_ARUSER;
input   m_axi_onoff_RVALID;
output   m_axi_onoff_RREADY;
input  [C_M_AXI_ONOFF_DATA_WIDTH - 1:0] m_axi_onoff_RDATA;
input   m_axi_onoff_RLAST;
input  [C_M_AXI_ONOFF_ID_WIDTH - 1:0] m_axi_onoff_RID;
input  [C_M_AXI_ONOFF_RUSER_WIDTH - 1:0] m_axi_onoff_RUSER;
input  [1:0] m_axi_onoff_RRESP;
input   m_axi_onoff_BVALID;
output   m_axi_onoff_BREADY;
input  [1:0] m_axi_onoff_BRESP;
input  [C_M_AXI_ONOFF_ID_WIDTH - 1:0] m_axi_onoff_BID;
input  [C_M_AXI_ONOFF_BUSER_WIDTH - 1:0] m_axi_onoff_BUSER;
output  [3:0] led;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] onoff_offset;
reg    onoff_blk_n_AR;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    onoff_blk_n_R;
wire    ap_CS_fsm_state9;
wire    onoff_AWREADY;
wire    onoff_WREADY;
reg    onoff_ARVALID;
wire    onoff_ARREADY;
wire    onoff_RVALID;
reg    onoff_RREADY;
wire   [7:0] onoff_RDATA;
wire    onoff_RLAST;
wire   [0:0] onoff_RID;
wire   [0:0] onoff_RUSER;
wire   [1:0] onoff_RRESP;
wire    onoff_BVALID;
wire   [1:0] onoff_BRESP;
wire   [0:0] onoff_BID;
wire   [0:0] onoff_BUSER;
reg   [63:0] onoff_addr_reg_90;
wire    ap_CS_fsm_state1;
wire   [0:0] trunc_ln218_fu_81_p1;
reg   [8:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

led_blink_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .onoff_offset(onoff_offset)
);

led_blink_onoff_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_ONOFF_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_ONOFF_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_ONOFF_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_ONOFF_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_ONOFF_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_ONOFF_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_ONOFF_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_ONOFF_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_ONOFF_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_ONOFF_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_ONOFF_CACHE_VALUE ))
onoff_m_axi_U(
    .AWVALID(m_axi_onoff_AWVALID),
    .AWREADY(m_axi_onoff_AWREADY),
    .AWADDR(m_axi_onoff_AWADDR),
    .AWID(m_axi_onoff_AWID),
    .AWLEN(m_axi_onoff_AWLEN),
    .AWSIZE(m_axi_onoff_AWSIZE),
    .AWBURST(m_axi_onoff_AWBURST),
    .AWLOCK(m_axi_onoff_AWLOCK),
    .AWCACHE(m_axi_onoff_AWCACHE),
    .AWPROT(m_axi_onoff_AWPROT),
    .AWQOS(m_axi_onoff_AWQOS),
    .AWREGION(m_axi_onoff_AWREGION),
    .AWUSER(m_axi_onoff_AWUSER),
    .WVALID(m_axi_onoff_WVALID),
    .WREADY(m_axi_onoff_WREADY),
    .WDATA(m_axi_onoff_WDATA),
    .WSTRB(m_axi_onoff_WSTRB),
    .WLAST(m_axi_onoff_WLAST),
    .WID(m_axi_onoff_WID),
    .WUSER(m_axi_onoff_WUSER),
    .ARVALID(m_axi_onoff_ARVALID),
    .ARREADY(m_axi_onoff_ARREADY),
    .ARADDR(m_axi_onoff_ARADDR),
    .ARID(m_axi_onoff_ARID),
    .ARLEN(m_axi_onoff_ARLEN),
    .ARSIZE(m_axi_onoff_ARSIZE),
    .ARBURST(m_axi_onoff_ARBURST),
    .ARLOCK(m_axi_onoff_ARLOCK),
    .ARCACHE(m_axi_onoff_ARCACHE),
    .ARPROT(m_axi_onoff_ARPROT),
    .ARQOS(m_axi_onoff_ARQOS),
    .ARREGION(m_axi_onoff_ARREGION),
    .ARUSER(m_axi_onoff_ARUSER),
    .RVALID(m_axi_onoff_RVALID),
    .RREADY(m_axi_onoff_RREADY),
    .RDATA(m_axi_onoff_RDATA),
    .RLAST(m_axi_onoff_RLAST),
    .RID(m_axi_onoff_RID),
    .RUSER(m_axi_onoff_RUSER),
    .RRESP(m_axi_onoff_RRESP),
    .BVALID(m_axi_onoff_BVALID),
    .BREADY(m_axi_onoff_BREADY),
    .BRESP(m_axi_onoff_BRESP),
    .BID(m_axi_onoff_BID),
    .BUSER(m_axi_onoff_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(onoff_ARVALID),
    .I_ARREADY(onoff_ARREADY),
    .I_ARADDR(onoff_addr_reg_90),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(onoff_RVALID),
    .I_RREADY(onoff_RREADY),
    .I_RDATA(onoff_RDATA),
    .I_RID(onoff_RID),
    .I_RUSER(onoff_RUSER),
    .I_RRESP(onoff_RRESP),
    .I_RLAST(onoff_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(onoff_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(onoff_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(onoff_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(onoff_BRESP),
    .I_BID(onoff_BID),
    .I_BUSER(onoff_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        onoff_addr_reg_90 <= onoff_offset;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (onoff_ARREADY == 1'b1))) begin
        onoff_ARVALID = 1'b1;
    end else begin
        onoff_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (onoff_RVALID == 1'b1))) begin
        onoff_RREADY = 1'b1;
    end else begin
        onoff_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        onoff_blk_n_AR = m_axi_onoff_ARREADY;
    end else begin
        onoff_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        onoff_blk_n_R = m_axi_onoff_RVALID;
    end else begin
        onoff_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (onoff_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (onoff_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign led = trunc_ln218_fu_81_p1;

assign trunc_ln218_fu_81_p1 = onoff_RDATA[0:0];

endmodule //led_blink
