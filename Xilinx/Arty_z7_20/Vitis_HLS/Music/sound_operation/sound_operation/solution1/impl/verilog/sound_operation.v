// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sound_operation_sound_operation,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=182,HLS_VERSION=2020_2}" *)

module sound_operation (
        ap_clk,
        ap_rst_n,
        m_axi_ram_AWVALID,
        m_axi_ram_AWREADY,
        m_axi_ram_AWADDR,
        m_axi_ram_AWID,
        m_axi_ram_AWLEN,
        m_axi_ram_AWSIZE,
        m_axi_ram_AWBURST,
        m_axi_ram_AWLOCK,
        m_axi_ram_AWCACHE,
        m_axi_ram_AWPROT,
        m_axi_ram_AWQOS,
        m_axi_ram_AWREGION,
        m_axi_ram_AWUSER,
        m_axi_ram_WVALID,
        m_axi_ram_WREADY,
        m_axi_ram_WDATA,
        m_axi_ram_WSTRB,
        m_axi_ram_WLAST,
        m_axi_ram_WID,
        m_axi_ram_WUSER,
        m_axi_ram_ARVALID,
        m_axi_ram_ARREADY,
        m_axi_ram_ARADDR,
        m_axi_ram_ARID,
        m_axi_ram_ARLEN,
        m_axi_ram_ARSIZE,
        m_axi_ram_ARBURST,
        m_axi_ram_ARLOCK,
        m_axi_ram_ARCACHE,
        m_axi_ram_ARPROT,
        m_axi_ram_ARQOS,
        m_axi_ram_ARREGION,
        m_axi_ram_ARUSER,
        m_axi_ram_RVALID,
        m_axi_ram_RREADY,
        m_axi_ram_RDATA,
        m_axi_ram_RLAST,
        m_axi_ram_RID,
        m_axi_ram_RUSER,
        m_axi_ram_RRESP,
        m_axi_ram_BVALID,
        m_axi_ram_BREADY,
        m_axi_ram_BRESP,
        m_axi_ram_BID,
        m_axi_ram_BUSER,
        sdata,
        opeout,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_RAM_ID_WIDTH = 1;
parameter    C_M_AXI_RAM_ADDR_WIDTH = 64;
parameter    C_M_AXI_RAM_DATA_WIDTH = 32;
parameter    C_M_AXI_RAM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_WUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_RUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_BUSER_WIDTH = 1;
parameter    C_M_AXI_RAM_USER_VALUE = 0;
parameter    C_M_AXI_RAM_PROT_VALUE = 0;
parameter    C_M_AXI_RAM_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RAM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_ram_AWVALID;
input   m_axi_ram_AWREADY;
output  [C_M_AXI_RAM_ADDR_WIDTH - 1:0] m_axi_ram_AWADDR;
output  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_AWID;
output  [7:0] m_axi_ram_AWLEN;
output  [2:0] m_axi_ram_AWSIZE;
output  [1:0] m_axi_ram_AWBURST;
output  [1:0] m_axi_ram_AWLOCK;
output  [3:0] m_axi_ram_AWCACHE;
output  [2:0] m_axi_ram_AWPROT;
output  [3:0] m_axi_ram_AWQOS;
output  [3:0] m_axi_ram_AWREGION;
output  [C_M_AXI_RAM_AWUSER_WIDTH - 1:0] m_axi_ram_AWUSER;
output   m_axi_ram_WVALID;
input   m_axi_ram_WREADY;
output  [C_M_AXI_RAM_DATA_WIDTH - 1:0] m_axi_ram_WDATA;
output  [C_M_AXI_RAM_WSTRB_WIDTH - 1:0] m_axi_ram_WSTRB;
output   m_axi_ram_WLAST;
output  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_WID;
output  [C_M_AXI_RAM_WUSER_WIDTH - 1:0] m_axi_ram_WUSER;
output   m_axi_ram_ARVALID;
input   m_axi_ram_ARREADY;
output  [C_M_AXI_RAM_ADDR_WIDTH - 1:0] m_axi_ram_ARADDR;
output  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_ARID;
output  [7:0] m_axi_ram_ARLEN;
output  [2:0] m_axi_ram_ARSIZE;
output  [1:0] m_axi_ram_ARBURST;
output  [1:0] m_axi_ram_ARLOCK;
output  [3:0] m_axi_ram_ARCACHE;
output  [2:0] m_axi_ram_ARPROT;
output  [3:0] m_axi_ram_ARQOS;
output  [3:0] m_axi_ram_ARREGION;
output  [C_M_AXI_RAM_ARUSER_WIDTH - 1:0] m_axi_ram_ARUSER;
input   m_axi_ram_RVALID;
output   m_axi_ram_RREADY;
input  [C_M_AXI_RAM_DATA_WIDTH - 1:0] m_axi_ram_RDATA;
input   m_axi_ram_RLAST;
input  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_RID;
input  [C_M_AXI_RAM_RUSER_WIDTH - 1:0] m_axi_ram_RUSER;
input  [1:0] m_axi_ram_RRESP;
input   m_axi_ram_BVALID;
output   m_axi_ram_BREADY;
input  [1:0] m_axi_ram_BRESP;
input  [C_M_AXI_RAM_ID_WIDTH - 1:0] m_axi_ram_BID;
input  [C_M_AXI_RAM_BUSER_WIDTH - 1:0] m_axi_ram_BUSER;
input  [31:0] sdata;
input  [31:0] opeout;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] ramadr;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

sound_operation_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ramadr(ramadr)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign m_axi_ram_ARADDR = 64'd0;

assign m_axi_ram_ARBURST = 2'd0;

assign m_axi_ram_ARCACHE = 4'd0;

assign m_axi_ram_ARID = 1'd0;

assign m_axi_ram_ARLEN = 8'd0;

assign m_axi_ram_ARLOCK = 2'd0;

assign m_axi_ram_ARPROT = 3'd0;

assign m_axi_ram_ARQOS = 4'd0;

assign m_axi_ram_ARREGION = 4'd0;

assign m_axi_ram_ARSIZE = 3'd0;

assign m_axi_ram_ARUSER = 1'd0;

assign m_axi_ram_ARVALID = 1'b0;

assign m_axi_ram_AWADDR = 64'd0;

assign m_axi_ram_AWBURST = 2'd0;

assign m_axi_ram_AWCACHE = 4'd0;

assign m_axi_ram_AWID = 1'd0;

assign m_axi_ram_AWLEN = 8'd0;

assign m_axi_ram_AWLOCK = 2'd0;

assign m_axi_ram_AWPROT = 3'd0;

assign m_axi_ram_AWQOS = 4'd0;

assign m_axi_ram_AWREGION = 4'd0;

assign m_axi_ram_AWSIZE = 3'd0;

assign m_axi_ram_AWUSER = 1'd0;

assign m_axi_ram_AWVALID = 1'b0;

assign m_axi_ram_BREADY = 1'b0;

assign m_axi_ram_RREADY = 1'b0;

assign m_axi_ram_WDATA = 32'd0;

assign m_axi_ram_WID = 1'd0;

assign m_axi_ram_WLAST = 1'b0;

assign m_axi_ram_WSTRB = 4'd0;

assign m_axi_ram_WUSER = 1'd0;

assign m_axi_ram_WVALID = 1'b0;

endmodule //sound_operation
