-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sound_operation_Block_entry_proc_proc3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_ram_AWVALID : OUT STD_LOGIC;
    m_axi_ram_AWREADY : IN STD_LOGIC;
    m_axi_ram_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_ram_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_WVALID : OUT STD_LOGIC;
    m_axi_ram_WREADY : IN STD_LOGIC;
    m_axi_ram_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_WLAST : OUT STD_LOGIC;
    m_axi_ram_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_ARVALID : OUT STD_LOGIC;
    m_axi_ram_ARREADY : IN STD_LOGIC;
    m_axi_ram_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_ram_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ram_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ram_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_RVALID : IN STD_LOGIC;
    m_axi_ram_RREADY : OUT STD_LOGIC;
    m_axi_ram_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ram_RLAST : IN STD_LOGIC;
    m_axi_ram_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_BVALID : IN STD_LOGIC;
    m_axi_ram_BREADY : OUT STD_LOGIC;
    m_axi_ram_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ram_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ram_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ramadr_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ramadr_empty_n : IN STD_LOGIC;
    ramadr_read : OUT STD_LOGIC;
    sdata : OUT STD_LOGIC_VECTOR (31 downto 0);
    sdata_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sound_operation_Block_entry_proc_proc3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ram_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ram_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ramadr_blk_n : STD_LOGIC;
    signal ram_addr_reg_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln324_fu_80_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sdata_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal trunc_ln_fu_70_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_ram_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    sdata_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                sdata_preg <= ap_const_lv32_0;
            else
                if (((m_axi_ram_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    sdata_preg <= m_axi_ram_RDATA;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ram_addr_reg_90 <= sext_ln324_fu_80_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_ram_ARREADY, m_axi_ram_RVALID, ramadr_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ramadr_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_ram_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_ram_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ramadr_empty_n)
    begin
                ap_block_state1 <= ((ramadr_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_ram_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_ram_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_ram_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_ram_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ram_ARADDR <= ram_addr_reg_90;
    m_axi_ram_ARBURST <= ap_const_lv2_0;
    m_axi_ram_ARCACHE <= ap_const_lv4_0;
    m_axi_ram_ARID <= ap_const_lv1_0;
    m_axi_ram_ARLEN <= ap_const_lv32_1;
    m_axi_ram_ARLOCK <= ap_const_lv2_0;
    m_axi_ram_ARPROT <= ap_const_lv3_0;
    m_axi_ram_ARQOS <= ap_const_lv4_0;
    m_axi_ram_ARREGION <= ap_const_lv4_0;
    m_axi_ram_ARSIZE <= ap_const_lv3_0;
    m_axi_ram_ARUSER <= ap_const_lv1_0;

    m_axi_ram_ARVALID_assign_proc : process(m_axi_ram_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_ram_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_ram_ARVALID <= ap_const_logic_1;
        else 
            m_axi_ram_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ram_AWADDR <= ap_const_lv64_0;
    m_axi_ram_AWBURST <= ap_const_lv2_0;
    m_axi_ram_AWCACHE <= ap_const_lv4_0;
    m_axi_ram_AWID <= ap_const_lv1_0;
    m_axi_ram_AWLEN <= ap_const_lv32_0;
    m_axi_ram_AWLOCK <= ap_const_lv2_0;
    m_axi_ram_AWPROT <= ap_const_lv3_0;
    m_axi_ram_AWQOS <= ap_const_lv4_0;
    m_axi_ram_AWREGION <= ap_const_lv4_0;
    m_axi_ram_AWSIZE <= ap_const_lv3_0;
    m_axi_ram_AWUSER <= ap_const_lv1_0;
    m_axi_ram_AWVALID <= ap_const_logic_0;
    m_axi_ram_BREADY <= ap_const_logic_0;

    m_axi_ram_RREADY_assign_proc : process(m_axi_ram_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_ram_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_ram_RREADY <= ap_const_logic_1;
        else 
            m_axi_ram_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ram_WDATA <= ap_const_lv32_0;
    m_axi_ram_WID <= ap_const_lv1_0;
    m_axi_ram_WLAST <= ap_const_logic_0;
    m_axi_ram_WSTRB <= ap_const_lv4_0;
    m_axi_ram_WUSER <= ap_const_lv1_0;
    m_axi_ram_WVALID <= ap_const_logic_0;

    ram_blk_n_AR_assign_proc : process(m_axi_ram_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ram_blk_n_AR <= m_axi_ram_ARREADY;
        else 
            ram_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    ram_blk_n_R_assign_proc : process(m_axi_ram_RVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ram_blk_n_R <= m_axi_ram_RVALID;
        else 
            ram_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    ramadr_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ramadr_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ramadr_blk_n <= ramadr_empty_n;
        else 
            ramadr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ramadr_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ramadr_empty_n)
    begin
        if ((not(((ramadr_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ramadr_read <= ap_const_logic_1;
        else 
            ramadr_read <= ap_const_logic_0;
        end if; 
    end process;


    sdata_assign_proc : process(m_axi_ram_RVALID, m_axi_ram_RDATA, ap_CS_fsm_state9, sdata_preg)
    begin
        if (((m_axi_ram_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sdata <= m_axi_ram_RDATA;
        else 
            sdata <= sdata_preg;
        end if; 
    end process;


    sdata_ap_vld_assign_proc : process(m_axi_ram_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_ram_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sdata_ap_vld <= ap_const_logic_1;
        else 
            sdata_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln324_fu_80_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_70_p4),64));

    trunc_ln_fu_70_p4 <= ramadr_dout(63 downto 2);
end behav;
