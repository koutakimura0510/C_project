
nios2pio.elf:     file format elf32-littlenios2
nios2pio.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000338 memsz 0x00000338 flags r-x
    LOAD off    0x00001358 vaddr 0x00002358 paddr 0x0000235c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001360 vaddr 0x00002360 paddr 0x00002360 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  0000135c  2**0
                  CONTENTS
  2 .text         00000338  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00002358  00002360  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00002358  0000235c  00001358  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00002360  00002360  00001360  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000236c  0000236c  0000135c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000128  00000000  00000000  00001380  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000008ae  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000004e3  00000000  00000000  00001d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000005aa  00000000  00000000  00002239  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000144  00000000  00000000  000027e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000466  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000092  00000000  00000000  00002d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00002e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  00002e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00003c5a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00003c5d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00003c69  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00003c6a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00003c6b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00003c6f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00003c73  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00003c77  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00003c82  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00003c8d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  00003ca5  2**0
                  CONTENTS, READONLY
 29 .jdi          00005d2a  00000000  00000000  00003cc5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003da74  00000000  00000000  000099ef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
00002358 l    d  .rodata	00000000 .rodata
00002358 l    d  .rwdata	00000000 .rwdata
00002360 l    d  .bss	00000000 .bss
0000236c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios2pio_bsp//obj/HAL/src/crt0.o
00002068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
000022a4 g     F .text	0000002c alt_main
0000235c g       *ABS*	00000000 __flash_rwdata_start
00002318 g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000001c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002364 g     O .bss	00000004 alt_argv
0000a358 g       *ABS*	00000000 _gp
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002320 g     F .text	00000038 alt_icache_flush
0000236c g       *ABS*	00000000 __bss_end
000022f4 g     F .text	00000018 alt_dcache_flush_all
0000235c g       *ABS*	00000000 __ram_rwdata_end
00002358 g       *ABS*	00000000 __ram_rodata_end
00002358 g     O .rwdata	00000004 jtag_uart_0
0000236c g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	0000004c _start
000022f0 g     F .text	00000004 alt_sys_init
00002358 g       *ABS*	00000000 __ram_rwdata_start
00002358 g       *ABS*	00000000 __ram_rodata_start
0000236c g       *ABS*	00000000 __alt_stack_base
00002360 g       *ABS*	00000000 __bss_start
0000206c g     F .text	00000158 main
00002360 g     O .bss	00000004 alt_envp
00002358 g       *ABS*	00000000 __flash_rodata_start
000022d0 g     F .text	00000020 alt_irq_init
00002368 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
0000235c g       *ABS*	00000000 _edata
0000236c g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00004000 g       *ABS*	00000000 __alt_data_end
0000201c g       .entry	00000000 _exit
0000230c g     F .text	0000000c alt_icache_flush_all
000021c4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    2000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    2004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    2008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    200c:	00bffd16 	blt	zero,r2,2004 <_gp+0xffff7cac>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2014:	08480814 	ori	at,at,8224
    jmp r1
    2018:	0800683a 	jmp	at

0000201c <_exit>:
    201c:	00000000 	call	0 <__reset-0x2000>

Disassembly of section .text:

00002020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    2020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    2024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    2028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    202c:	00bffd16 	blt	zero,r2,2024 <_gp+0xffff7ccc>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2034:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    203c:	d6a8d614 	ori	gp,gp,41816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2044:	1088d814 	ori	r2,r2,9056

    movhi r3, %hi(__bss_end)
    2048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    204c:	18c8db14 	ori	r3,r3,9068

    beq r2, r3, 1f
    2050:	10c00326 	beq	r2,r3,2060 <_start+0x40>

0:
    stw zero, (r2)
    2054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    205c:	10fffd36 	bltu	r2,r3,2054 <_gp+0xffff7cfc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2060:	00021c40 	call	21c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2064:	00022a40 	call	22a4 <alt_main>

00002068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2068:	003fff06 	br	2068 <_gp+0xffff7d10>

0000206c <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <stdint.h>

int main()
{
    206c:	defffd04 	addi	sp,sp,-12
    2070:	df000215 	stw	fp,8(sp)
    2074:	df000204 	addi	fp,sp,8
	int32_t in, out;

	while (1) {
		in = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE);
    2078:	00940004 	movi	r2,20480
    207c:	10800037 	ldwio	r2,0(r2)
    2080:	e0bfff15 	stw	r2,-4(fp)

		switch (in) {
    2084:	e0bfff17 	ldw	r2,-4(fp)
    2088:	10800428 	cmpgeui	r2,r2,16
    208c:	1000461e 	bne	r2,zero,21a8 <main+0x13c>
    2090:	e0bfff17 	ldw	r2,-4(fp)
    2094:	100690ba 	slli	r3,r2,2
    2098:	00800034 	movhi	r2,0
    209c:	10882b04 	addi	r2,r2,8364
    20a0:	1885883a 	add	r2,r3,r2
    20a4:	10800017 	ldw	r2,0(r2)
    20a8:	1000683a 	jmp	r2
    20ac:	000020ec 	andhi	zero,zero,131
    20b0:	000020f8 	rdprs	zero,zero,131
    20b4:	00002104 	movi	zero,132
    20b8:	00002110 	cmplti	zero,zero,132
    20bc:	0000211c 	xori	zero,zero,132
    20c0:	00002128 	cmpgeui	zero,zero,132
    20c4:	00002134 	movhi	zero,132
    20c8:	00002140 	call	214 <__reset-0x1dec>
    20cc:	0000214c 	andi	zero,zero,133
    20d0:	00002154 	movui	zero,133
    20d4:	00002160 	cmpeqi	zero,zero,133
    20d8:	0000216c 	andhi	zero,zero,133
    20dc:	00002178 	rdprs	zero,zero,133
    20e0:	00002184 	movi	zero,134
    20e4:	00002190 	cmplti	zero,zero,134
    20e8:	0000219c 	xori	zero,zero,134
			case 0x0: out = 0x40; break;
    20ec:	00801004 	movi	r2,64
    20f0:	e0bffe15 	stw	r2,-8(fp)
    20f4:	00002f06 	br	21b4 <main+0x148>
			case 0x1: out = 0x79; break;
    20f8:	00801e44 	movi	r2,121
    20fc:	e0bffe15 	stw	r2,-8(fp)
    2100:	00002c06 	br	21b4 <main+0x148>
			case 0x2: out = 0x24; break;
    2104:	00800904 	movi	r2,36
    2108:	e0bffe15 	stw	r2,-8(fp)
    210c:	00002906 	br	21b4 <main+0x148>
			case 0x3: out = 0x30; break;
    2110:	00800c04 	movi	r2,48
    2114:	e0bffe15 	stw	r2,-8(fp)
    2118:	00002606 	br	21b4 <main+0x148>
			case 0x4: out = 0x19; break;
    211c:	00800644 	movi	r2,25
    2120:	e0bffe15 	stw	r2,-8(fp)
    2124:	00002306 	br	21b4 <main+0x148>
			case 0x5: out = 0x12; break;
    2128:	00800484 	movi	r2,18
    212c:	e0bffe15 	stw	r2,-8(fp)
    2130:	00002006 	br	21b4 <main+0x148>
			case 0x6: out = 0x02; break;
    2134:	00800084 	movi	r2,2
    2138:	e0bffe15 	stw	r2,-8(fp)
    213c:	00001d06 	br	21b4 <main+0x148>
			case 0x7: out = 0x58; break;
    2140:	00801604 	movi	r2,88
    2144:	e0bffe15 	stw	r2,-8(fp)
    2148:	00001a06 	br	21b4 <main+0x148>
			case 0x8: out = 0x00; break;
    214c:	e03ffe15 	stw	zero,-8(fp)
    2150:	00001806 	br	21b4 <main+0x148>
			case 0x9: out = 0x10; break;
    2154:	00800404 	movi	r2,16
    2158:	e0bffe15 	stw	r2,-8(fp)
    215c:	00001506 	br	21b4 <main+0x148>
			case 0xa: out = 0x08; break;
    2160:	00800204 	movi	r2,8
    2164:	e0bffe15 	stw	r2,-8(fp)
    2168:	00001206 	br	21b4 <main+0x148>
			case 0xb: out = 0x03; break;
    216c:	008000c4 	movi	r2,3
    2170:	e0bffe15 	stw	r2,-8(fp)
    2174:	00000f06 	br	21b4 <main+0x148>
			case 0xc: out = 0x46; break;
    2178:	00801184 	movi	r2,70
    217c:	e0bffe15 	stw	r2,-8(fp)
    2180:	00000c06 	br	21b4 <main+0x148>
			case 0xd: out = 0x21; break;
    2184:	00800844 	movi	r2,33
    2188:	e0bffe15 	stw	r2,-8(fp)
    218c:	00000906 	br	21b4 <main+0x148>
			case 0xe: out = 0x06; break;
    2190:	00800184 	movi	r2,6
    2194:	e0bffe15 	stw	r2,-8(fp)
    2198:	00000606 	br	21b4 <main+0x148>
			case 0xf: out = 0x0e; break;
    219c:	00800384 	movi	r2,14
    21a0:	e0bffe15 	stw	r2,-8(fp)
    21a4:	00000306 	br	21b4 <main+0x148>
			default:  out = 0xff; break;
    21a8:	00803fc4 	movi	r2,255
    21ac:	e0bffe15 	stw	r2,-8(fp)
    21b0:	0001883a 	nop
		}
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, out);
    21b4:	00940404 	movi	r2,20496
    21b8:	e0fffe17 	ldw	r3,-8(fp)
    21bc:	10c00035 	stwio	r3,0(r2)
	}
    21c0:	003fad06 	br	2078 <_gp+0xffff7d20>

000021c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    21c4:	deffff04 	addi	sp,sp,-4
    21c8:	01000034 	movhi	r4,0
    21cc:	01400034 	movhi	r5,0
    21d0:	dfc00015 	stw	ra,0(sp)
    21d4:	2108d604 	addi	r4,r4,9048
    21d8:	2948d704 	addi	r5,r5,9052

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    21dc:	2140061e 	bne	r4,r5,21f8 <alt_load+0x34>
    21e0:	01000034 	movhi	r4,0
    21e4:	01400034 	movhi	r5,0
    21e8:	21080804 	addi	r4,r4,8224
    21ec:	29480804 	addi	r5,r5,8224
    21f0:	2140121e 	bne	r4,r5,223c <alt_load+0x78>
    21f4:	00000b06 	br	2224 <alt_load+0x60>
    21f8:	00c00034 	movhi	r3,0
    21fc:	18c8d704 	addi	r3,r3,9052
    2200:	1907c83a 	sub	r3,r3,r4
    2204:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2208:	10fff526 	beq	r2,r3,21e0 <_gp+0xffff7e88>
    {
      *to++ = *from++;
    220c:	114f883a 	add	r7,r2,r5
    2210:	39c00017 	ldw	r7,0(r7)
    2214:	110d883a 	add	r6,r2,r4
    2218:	10800104 	addi	r2,r2,4
    221c:	31c00015 	stw	r7,0(r6)
    2220:	003ff906 	br	2208 <_gp+0xffff7eb0>
    2224:	01000034 	movhi	r4,0
    2228:	01400034 	movhi	r5,0
    222c:	2108d604 	addi	r4,r4,9048
    2230:	2948d604 	addi	r5,r5,9048

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2234:	2140101e 	bne	r4,r5,2278 <alt_load+0xb4>
    2238:	00000b06 	br	2268 <alt_load+0xa4>
    223c:	00c00034 	movhi	r3,0
    2240:	18c80804 	addi	r3,r3,8224
    2244:	1907c83a 	sub	r3,r3,r4
    2248:	0005883a 	mov	r2,zero
  {
    while( to != end )
    224c:	10fff526 	beq	r2,r3,2224 <_gp+0xffff7ecc>
    {
      *to++ = *from++;
    2250:	114f883a 	add	r7,r2,r5
    2254:	39c00017 	ldw	r7,0(r7)
    2258:	110d883a 	add	r6,r2,r4
    225c:	10800104 	addi	r2,r2,4
    2260:	31c00015 	stw	r7,0(r6)
    2264:	003ff906 	br	224c <_gp+0xffff7ef4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2268:	00022f40 	call	22f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    226c:	dfc00017 	ldw	ra,0(sp)
    2270:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2274:	000230c1 	jmpi	230c <alt_icache_flush_all>
    2278:	00c00034 	movhi	r3,0
    227c:	18c8d604 	addi	r3,r3,9048
    2280:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2284:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2288:	18bff726 	beq	r3,r2,2268 <_gp+0xffff7f10>
    {
      *to++ = *from++;
    228c:	114f883a 	add	r7,r2,r5
    2290:	39c00017 	ldw	r7,0(r7)
    2294:	110d883a 	add	r6,r2,r4
    2298:	10800104 	addi	r2,r2,4
    229c:	31c00015 	stw	r7,0(r6)
    22a0:	003ff906 	br	2288 <_gp+0xffff7f30>

000022a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    22a4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    22a8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    22ac:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    22b0:	00022d00 	call	22d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    22b4:	00022f00 	call	22f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    22b8:	d1a00217 	ldw	r6,-32760(gp)
    22bc:	d1600317 	ldw	r5,-32756(gp)
    22c0:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    22c4:	dfc00017 	ldw	ra,0(sp)
    22c8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    22cc:	000206c1 	jmpi	206c <main>

000022d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    22d0:	deffff04 	addi	sp,sp,-4
    22d4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    22d8:	00023180 	call	2318 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    22dc:	00800044 	movi	r2,1
    22e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    22e4:	dfc00017 	ldw	ra,0(sp)
    22e8:	dec00104 	addi	sp,sp,4
    22ec:	f800283a 	ret

000022f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    22f0:	f800283a 	ret

000022f4 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    22f4:	0005883a 	mov	r2,zero
    22f8:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    22fc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    2300:	10800804 	addi	r2,r2,32
    2304:	10fffd1e 	bne	r2,r3,22fc <_gp+0xffff7fa4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2308:	f800283a 	ret

0000230c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    230c:	01440004 	movi	r5,4096
    2310:	0009883a 	mov	r4,zero
    2314:	00023201 	jmpi	2320 <alt_icache_flush>

00002318 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2318:	000170fa 	wrctl	ienable,zero
    231c:	f800283a 	ret

00002320 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    2320:	00840004 	movi	r2,4096
    2324:	1140012e 	bgeu	r2,r5,232c <alt_icache_flush+0xc>
    2328:	100b883a 	mov	r5,r2
    232c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2330:	2005883a 	mov	r2,r4
    2334:	1140032e 	bgeu	r2,r5,2344 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2338:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    233c:	10800804 	addi	r2,r2,32
    2340:	003ffc06 	br	2334 <_gp+0xffff7fdc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2344:	210007cc 	andi	r4,r4,31
    2348:	20000126 	beq	r4,zero,2350 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    234c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2350:	0000203a 	flushp
    2354:	f800283a 	ret
