/*
 * SPI通信のシリアルデータを、パラレルデータに変換
 *
 * シリアルデータ(クロック同期、8ビット固定長)をシフトレジスタで受信
 * システムCLKのみで動作させるため、シリアルクロックの立ち上がりエッジで
 * シリアルイネーブルとデータをサンプリングする
 */

module SPI (
    input CLK, RESET,
    input SCLK,         //* シリアルクロック
    input SENABLE,      //* シリアルイネーブル
    input SMOSI,        //* シリアルデータ
    output reg [7:0] ODATA
);

reg [2:0] s_clk_reg;
wire      s_clk_rise;   // s_clkの立ち上がりエッジ
reg       s_enb_reg;    // s_enb入力レジスタ
reg [2:0] cnt_reg;      // s_enb長カウンタ
reg [7:0] rcv_reg;      // s_datのシフトレジスタ
reg [7:0] p_dat_reg;    // p_dat出力レジスタ

assign rst = ~rst_n;    // 内部リセットを正論理にする


//* SCLKのエッジを検出
always @(posedge CLK) begin
    if(RESET == 1'b1) begin
        s_clk_reg[2:0] <= 3'd0;
    end else begin
        s_clk_reg[2:0] <= {s_clk_reg[1:0], SCLK};
    end
end

assign s_clk_rise = (s_clk_reg[2:1]==2'b01);


//* SENABLEをラッチ
always @(posedge CLK) begin
    if(RESET == 1'b1) begin
        s_enb_reg <= 1'b0;
    end else if(s_clk_rise) begin
        s_enb_reg <= SENABLE;
    end
end


//* s_datをシリアルパラレル変換
always @(posedge CLK) begin
    if(RESET == 1'b1) begin
        rcv_reg[7:0] <= 8'd0;
    end else if(s_clk_rise) begin
        rcv_reg[7:0] <= {rcv_reg[6:0], MOSI};
    end
end


//* s_enbの長さをカウント
always @(posedge CLK) begin
    if(RESET == 1'b1) begin
        cnt_reg <= 3'd0;
    end else if(s_clk_rise) begin
        cnt_reg <= (s_enb_reg)? (cnt_reg + 1'b1):3'd0;
    end
end


//* 8ビット入力したらパラレルレジスタに保存
always @(posedge CLK) begin
    if(RESET == 1'b1) begin
        ODATA <= 4'd0;
    end else if(s_clk_rise & (cnt_reg == 3'd7)) begin
        ODATA <= rcv_reg;
    end
end

endmodule