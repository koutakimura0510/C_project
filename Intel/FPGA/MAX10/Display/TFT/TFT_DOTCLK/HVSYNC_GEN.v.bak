module HVSYNC_GEN (
    input CLK, RESET, DRAW_ON,
    output reg HSYNC, VSYNC,
    output reg [8:0] hpos, vpos,
    output display_on
);

//HFP 0a = 4
//HBP 14 = 20
//VFP 02 = 2
//VBP 02 = 2
// declarations for TV-simulator sync parameters
// horizontal constants
parameter H_DISPLAY       = 240; // horizontal display width
parameter H_BACK          =  20; // horizontal left border (back porch)
parameter H_FRONT         =  10; // horizontal right border (front porch)
parameter H_SYNC          =  10; // horizontal sync width
// vertical constants
parameter V_DISPLAY       = 320; // vertical display height
parameter V_TOP           =   2; // vertical top border
parameter V_BOTTOM        =   4; // vertical bottom border
parameter V_SYNC          =   2; // vertical sync # lines
// derived constants
parameter H_SYNC_START    = H_DISPLAY + H_FRONT;
parameter H_SYNC_END      = H_DISPLAY + H_FRONT + H_SYNC - 1;
parameter H_MAX           = H_DISPLAY + H_BACK + H_FRONT + H_SYNC - 1;
parameter V_SYNC_START    = V_DISPLAY + V_BOTTOM;
parameter V_SYNC_END      = V_DISPLAY + V_BOTTOM + V_SYNC - 1;
parameter V_MAX           = V_DISPLAY + V_TOP + V_BOTTOM + V_SYNC - 1;

wire hmax, vmax;

assign hmax = (hpos == H_MAX && RESET == 1'b0) ? 1'b1 : 1'b0;
assign vmax = (vpos == V_MAX && RESET == 1'b0) ? 1'b1 : 1'b0;


/**------------------------------------------
 * 水平同期カウンター
 *------------------------------------------*/
always @(posedge CLK) begin
    HSYNC <= (hpos >= H_SYNC_START && hpos <= H_SYNC_END) ? 1'b1 : 1'b0;
    if (RESET == 1'b1 && DRAW_ON == 1'b0) begin
        hpos <= 0;
    end else if (hmax == 1'b1) begin
        hpos <= 0;
    end else begin
        hpos <= hpos + 1;
    end
end


/**------------------------------------------
 * 垂直同期カウンター
 *------------------------------------------*/
always @(posedge CLK) begin
    VSYNC <= (vpos >= V_SYNC_START && vpos <= V_SYNC_END) ? 1'b1 : 1'b0;
    if (RESET == 1'b1 && DRAW_ON == 1'b0) begin
        vpos <= 0;
    end else if (hmax == 1'b1) begin
        if (vmax == 1'b1) begin
            vpos <= 0;
        end else begin
            vpos <= vpos + 1;
        end
    end
end

/*
 * 有効領域のディスプレイON信号の生成
 */
assign display_on = (hpos < H_DISPLAY && vpos < V_DISPLAY) ? 1'b0 : 1'b1;

endmodule